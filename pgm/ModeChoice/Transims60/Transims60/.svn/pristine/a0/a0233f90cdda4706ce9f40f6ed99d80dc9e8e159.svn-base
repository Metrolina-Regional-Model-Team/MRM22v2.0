//*********************************************************
//	Node_Fields.cpp - process node related fields
//*********************************************************

#include "VissimNet.hpp"

#include <math.h>

//---------------------------------------------------------
//	Node_Fields
//---------------------------------------------------------

bool VissimNet::Node_Fields (void)
{
	int link, index;
	double len, len2;
	String data;

	Int_Map_Itr map_itr;
	Link_Data *link_ptr, *lnk_ptr;
	Dir_Data *dir_ptr, *dir2_ptr;
	Connect_Data *connect_ptr;

	len = len2 = 0.0;

	if (pair_itr->first.Equals ("<node")) {
		if (node_flag) Warning ("Node Block was Not Terminated");
		node_flag = !pair_itr->second.Equals ("/>");
		node_data.Clear ();
		node = (int) node_array.size ();

		for (++pair_itr; pair_itr != string_pairs.end (); pair_itr++) {
			if (pair_itr->first.Equals ("anmConnNodeNo")) {
				data = pair_itr->second;
				if (data.length () > 10) {
					data = data.substr (data.length () - 10);
				}
				if (data.length () == 10 && data [0] > '1') data [0] = '1';
				node_data.Node (data.Integer ());
			} else if (pair_itr->first.Equals ("no")) {
				data = pair_itr->second;
				if (data.length () > 10) {
					data = data.substr (data.length () - 10);
				}
				if (data.length () == 10 && data [0] > '1') data [0] = '1';
				node_data.Node (data.Integer ());
			}
		}
		if (!node_flag) {
			if (node_map.insert (Int_Map_Data (node_data.Node (), node)).second) {
				node_array.push_back (node_data);
				if ((int) node_array.size () != node + 1) {
					Warning ("Node Numbering Problem, Node=") << node_data.Node ();
				}
			}
		}
		return (true);
	} else if (pair_itr->first.Equals ("</node")) {
		if (!node_flag) Warning ("Node Block was Not Initialized");
		node_flag = false;
		if (node_map.insert (Int_Map_Data (node_data.Node (), node)).second) {
			node_array.push_back (node_data);

			if ((int) node_array.size () != node + 1) {
				Warning ("Node Numbering Problem, Node=") << node_data.Node ();
			}
		}
	}
	if (node_flag) {
		if (pair_itr->first.Equals ("<linkSegs")) {
			if (linksegs_flag) Warning ("LinkSeg Block was Not Terminated");
			linksegs_flag = true;
		} else if (pair_itr->first.Equals ("</linkSegs")) {
			if (!linksegs_flag) Warning ("LinkSeg Block was Not Initialized");
			linksegs_flag = false;
		}
		if (linksegs_flag) {
			if (pair_itr->first.Equals ("<linkSegment")) {
				if (linkseg_flag) Warning ("LinkSegment Block was Not Terminated");
				linkseg_flag = !pair_itr->second.Equals ("/>");

				for (++pair_itr; pair_itr != string_pairs.end (); pair_itr++) {
					if (pair_itr->first.Equals ("link")) {
						data = pair_itr->second;
						if (data.length () > 10) {
							data = data.substr (data.length () - 10);
						}
						if (data.length () == 10 && data [0] > '1') data [0] = '1';
						link = data.Integer ();
					} else if (pair_itr->first.Equals ("fromPos")) {
						len = pair_itr->second.Double ();
					} else if (pair_itr->first.Equals ("internalToPos")) {
						len2 = pair_itr->second.Double ();
					}
				}
				if (!linkseg_flag) {
					goto save_data;
				}
			} else if (pair_itr->first.Equals ("</linkSegment")) {
				if (!linkseg_flag) Warning ("LinkSegment Block was Not Initialized");
				linkseg_flag = false;
				goto save_data;
			}
		}
	}
	return (false);

save_data:
	map_itr = link_map.find (link);

	if (map_itr != link_map.end ()) {
		link_ptr = &link_array [map_itr->second];

		dir_ptr = &dir_array [link_ptr->AB_Dir ()];

		if (len == 0.0) {
			if (link_ptr->Anode () < 0) {
				link_ptr->Anode (node);

				for (index = dir_ptr->First_Connect (false); index >= 0; index = connect_ptr->Next_Index (false)) {
					connect_ptr = &connect_array [index];
					connect_ptr->Node (node);

					dir2_ptr = &dir_array [connect_ptr->Dir_Index ()];
					lnk_ptr = &link_array [dir2_ptr->Link ()];
					lnk_ptr->Bnode (node);
				}
			}
		}
		if (len2 == -1) {
			if (link_ptr->Bnode () < 0) {
				link_ptr->Bnode (node);

				for (index = dir_ptr->First_Connect (); index >= 0; index = connect_ptr->Next_Index ()) {
					connect_ptr = &connect_array [index];
					connect_ptr->Node (node);

					dir2_ptr = &dir_array [connect_ptr->To_Index ()];
					lnk_ptr = &link_array [dir2_ptr->Link ()];
					lnk_ptr->Anode (node);
				}
			}
		}
		if (len > 0 && len2 > 0) {
			if (link_ptr->Bnode () < 0 && dir_ptr->First_Connect () < 0) {
				link_ptr->Bnode (node);
			}
		}
	}
	return (true);
} 
