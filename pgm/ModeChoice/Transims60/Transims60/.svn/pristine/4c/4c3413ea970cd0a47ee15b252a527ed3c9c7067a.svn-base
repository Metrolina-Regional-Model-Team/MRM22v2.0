//*********************************************************
//	Execute.cpp - main execution procedure
//*********************************************************

#include "ModeChoice.hpp"

//---------------------------------------------------------
//	Execute
//---------------------------------------------------------

void ModeChoice::Execute (void)
{
	int i, j, num_seg, num_val;
	bool flag;

	Dbls_Array mode_zeros, val_zeros;

	//---- compile the model script ----

	Compile_Script ();

	//---- read the network ----

	Data_Service::Execute ();

	//---- read the segment map file ----

	if (segment_flag) {
		Segment_Map ();
		num_seg = num_market + 1;
	} else {
		num_seg = 1;
	}
	num_val = 1;
	if (seg_value_flag) num_val += num_market;

	//---- allocate summary space ----

	if (prod_flag || attr_flag) {
		if (zones == 0) {
			zones = (int) zone_array.size ();
		}
		zero_values.assign (zones, 0.0);

		if (prod_flag) {
			prod_share.assign ((num_modes + 1), zero_values);
		}
		if (attr_flag) {
			attr_share.assign ((num_modes + 1), zero_values);
		}
	}
	if (mode_value_flag || seg_value_flag) {
		zero_values.assign (const_field + 1, 0.0);
		val_zeros.assign (num_modes, zero_values);

		value_sum.assign (num_val, val_zeros);
	}
	if (market_flag || summary_flag || constant_flag || calib_flag || access_flag) {
		zero_types.assign (num_models + 1, 0.0);
		mode_zeros.assign ((num_modes + 1), zero_types);

		if (market_flag || summary_flag || constant_flag || bias_flag || calib_flag) {
			market_seg.assign (num_seg, mode_zeros);

			if (constant_flag || calib_flag) {
				seg_constant.assign (num_seg, mode_zeros);
			}
			if (bias_flag || calib_flag) {
				seg_bias.assign (num_seg, mode_zeros);
			}
		}
		if (access_flag) {
			access_sum.assign (num_access, mode_zeros);
		}
	}

	//---- read the mode constants file ----

	if (constant_flag) {
		Read_Constants ();
	}

	//---- read the mode bias file ----

	if (bias_flag) {
		Read_Mode_Bias ();
	}

	//---- read the calibration targets ----

	if (calib_flag) {
		Read_Targets ();
	}

	//---- intialize parking demand ----

	if (plan_flag) {
		if (park_demand_flag) {
			penalty_update_flag = (park_demand_array.Penalty_Function () > 0);
			park_demand_array.Zero_Demand ();
		} else if (System_File_Flag (NEW_PARK_DEMAND)) {
			park_demand_array.Initialize ();
		}
	}

	//---- perform mode choice ----

	flag = false;
	zero_types.assign (num_models, -700.0);

	for (iteration=1; iteration <= max_iter; iteration++) {
		save_flag = (flag || iteration == max_iter);
		iter_save_flag = (save_iter_flag && save_iter_range.In_Range (iteration));

		if (plan_skim_flag) {
			Read_Plan_Skims ();
		} else if (plan_flag) {
			if (System_File_Flag (NEW_PARK_DEMAND)) {
				Initialize_Park_Demand (*System_Park_Demand_File (true));
			}
			Read_Plans ();
		} else {
			Zone_Tables ();
		}

		//---- calibrate the constants ----

		if (calib_flag) {
			flag = Adjust_Constants ();
		}
		if (save_flag) break;

		//---- update the parking penalties ----

		if (penalty_update_flag) {
			park_demand_array.Update_Penalties ();
		}

		if (iter_save_flag) {

			//---- write the summary file ----

			if (summary_flag && summary_file.Is_Open ()) {
				Write_Summary ();
			}

			//---- write the market segment file ----

			if (market_flag && market_file.Is_Open ()) {
				Write_Market ();
			}

			//---- write the market segment file ----

			if (mode_seg_flag) {
				Write_Mode_Segment ();
			}

			//---- reports ----

			for (i = First_Report (); i != 0; i = Next_Report ()) {
				switch (i) {
					case MODE_SUMMARY:		//---- Mode Summary Report ----
						Mode_Summary ();
						break;
					case MARKET_REPORT:		//---- Market Segment Report ----
						for (j = 1; j <= num_market; j++) {
							Mode_Summary (j);
						}
						break;
					case MODE_VALUES:		//---- Mode Value Summary ----
						Value_Summary ();
						break;
					case SEGMENT_VALUES:	//---- Segment Value Summary ----
						for (j = 1; j <= num_market; j++) {
							Value_Summary (j);
						}
						break;
					case ACCESS_MARKET:		//---- Access Market Summary ----
						Access_Summary ();
						break;
					default:
						break;
				}
			}
			if (mode_value_flag || seg_value_flag) {
				value_sum.assign (num_val, val_zeros);
			}
			if (access_flag) {
				access_sum.assign (num_access, mode_zeros);
			}
		}

		//---- zero the market segments ----

		market_seg.assign (num_seg, mode_zeros);
	}

	//---- write the summary file ----

	if (summary_flag && summary_file.Is_Open ()) {
		Write_Summary ();
	}

	//---- write the market segment file ----

	if (market_flag && market_file.Is_Open ()) {
		Write_Market ();
	}

	//---- write the market segment file ----

	if (mode_seg_flag) {
		Write_Mode_Segment ();
	}

	//---- write the zone data ----

	if (prod_flag || attr_flag) {
		Write_Zones ();
	}

	//---- write the park demand file ----

	if (System_File_Flag (NEW_PARK_DEMAND)) {
		Write_Park_Demand ();
	}

	//---- print reports ----

	for (i=First_Report (); i != 0; i=Next_Report ()) {
		switch (i) {
			case MODE_SUMMARY:		//---- Mode Summary Report ----
				Mode_Summary ();
				break;
			case MARKET_REPORT:		//---- Market Segment Report ----
				for (j=1; j <= num_market; j++) {
					Mode_Summary (j);
				}
				break;
			case MODE_VALUES:		//---- Mode Value Summary ----
				Value_Summary ();
				break;
			case SEGMENT_VALUES:	//---- Segment Value Summary ----
				for (j=1; j <= num_market; j++) {
					Value_Summary (j);
				}
				break;
			case ACCESS_MARKET:		//---- Access Market Summary ----
				Access_Summary ();
				break;
			default:
				break;
		}
	}

	if (new_plan_flag) {
		System_Plan_File (true)->Print_Summary ();
	}
	Exit_Stat (DONE);
}

//---------------------------------------------------------
//	Page_Header
//---------------------------------------------------------

void ModeChoice::Page_Header (void)
{
	switch (Header_Number ()) {
		case PRINT_SCRIPT:		//---- Mode Choice Script ----
			Print (1, "Mode Choice Script");
			Print (1);
			break;
		case PRINT_STACK:		//---- Mode Choice Stack ----
			Print (1, "Mode Choice Stack");
			Print (1);
			break;
		case MODE_SUMMARY:		//---- Mode Summary Report ----
		case MARKET_REPORT:		//---- Market Summary Report ----
			Mode_Header ();
			break;
		case MODE_VALUES:		//---- Mode Value Summary ----
		case SEGMENT_VALUES:	//---- Segment Value Summary ----
			Value_Header ();
			break;
		case CALIB_REPORT:		//---- Calibration Report ----
			Calib_Header ();
			break;
		case TARGET_DATA:		//---- Target Data Report ----
			Target_Header ();
			break;
		case ACCESS_MARKET:		//---- Access Market Summary ----
			Access_Header ();
			break;
		default:
			break;
	}
}
