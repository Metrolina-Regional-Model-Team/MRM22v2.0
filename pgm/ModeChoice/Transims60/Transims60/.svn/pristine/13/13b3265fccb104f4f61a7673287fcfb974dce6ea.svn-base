//*********************************************************
//	Update_Factors.cpp - factor transit schedules
//*********************************************************

#include "Reschedule.hpp"

//---------------------------------------------------------
//	Update_Factors
//---------------------------------------------------------

void Reschedule::Update_Factors (void)
{
	int run, runs, offset, num_stops, index;
	double len_fac, factor;
	Dtime time, min_time, sum, tod, start, old_tod, new_tod;
	bool first;
	
	Line_Itr line_itr;
	Line_Stop_Itr stop_itr, first_itr;
	Line_Run *run_ptr;
	Driver_Itr driver_itr;
	Stop_Data *stop_ptr;
	Dir_Data *dir_ptr;
	Link_Data *link_ptr;
	Perf_Period *perf_ptr;

	//---- process each transit route ----

	for (line_itr = line_array.begin (); line_itr != line_array.end (); line_itr++) {
		Show_Progress ();

		if (select_transit_modes && !select_transit [line_itr->Mode ()]) continue;
		if (select_routes && !route_range.In_Range (line_itr->Route ())) continue;

		first_itr = line_itr->begin ();
		if (first_itr == line_itr->end ()) continue;

		factor = mode_factor.Best (line_itr->Mode ());

		runs = (int) first_itr->size ();

		//---- update the schedules for each run ----

		for (run=0; run < runs; run++) {
			tod = start = old_tod = new_tod = first_itr->at (run).Schedule ();

			sum = 0;
			first = true;
			offset = 0;
			num_stops = 0;
			stop_itr = first_itr;

			//---- find travel time changes for links along the route ----

			for (driver_itr = line_itr->driver_array.begin (); driver_itr != line_itr->driver_array.end (); driver_itr++) {
				dir_ptr = &dir_array [*driver_itr];
				link_ptr = &link_array [dir_ptr->Link ()];

				offset = 0;
				index = *driver_itr;

				if (dir_ptr->Use_Index () >= 0) {
					index = dir_ptr->Use_Index ();
				}
				time = min_time = dir_ptr->Time0 () * factor;

				perf_ptr = update_array.Period_Ptr (tod);
				if (perf_ptr != 0) {
					time = perf_ptr->Time (index) * factor;
					if (time < min_time) time = min_time;
				}

				for (; stop_itr != line_itr->end (); stop_itr++) {
					stop_ptr = &stop_array [stop_itr->Stop ()];

					if (stop_ptr->Link_Dir () != dir_ptr->Link_Dir ()) break;

					if (!first) {
						len_fac = (double) (stop_ptr->Offset () - offset) / link_ptr->Length ();

						sum += (int) (time * len_fac);

						tod = (int) (tod + sum);
						if (tod >= Model_End_Time ()) {
							tod = Model_End_Time () - 1;
						}
						run_ptr = &stop_itr->at (run);

						old_tod = run_ptr->Schedule ();

						run_ptr->Schedule (tod.Round_Seconds ());

						new_tod = run_ptr->Schedule ();
						sum = 0;
					} else {
						first = false;
					}
					offset = stop_ptr->Offset ();
					num_stops++;
				}
				if (stop_itr == line_itr->end ()) break;
				if (first) continue;

				len_fac = (double) (link_ptr->Length () - offset) / link_ptr->Length ();
						
				sum += (int) (time * len_fac);
			}
			Run_Summary (line_itr->Mode (), line_itr->Route (), run, start, old_tod, new_tod);
		}
		if (change_flag) {
			change_array.push_back (run_change);
		}
	}
	if (file_flag) {
		change_file.Close ();
	}
}
