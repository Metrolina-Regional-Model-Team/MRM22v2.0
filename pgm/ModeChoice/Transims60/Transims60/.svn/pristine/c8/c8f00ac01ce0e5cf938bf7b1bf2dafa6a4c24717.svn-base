//*********************************************************
//	Set_Method.cpp - set the processing method
//*********************************************************

#include "Router.hpp"

//---------------------------------------------------------
//	Set_Method
//---------------------------------------------------------

bool Router::Set_Method (Plan_Ptr plan_ptr)
{
	double prob;
	bool build_flag;
	int copy;
	
	if (plan_ptr->Problem () == CONSTRAINT_PROBLEM) {
		plan_ptr->Method (EXTEND_PLAN);
		plan_ptr->Problem (0);
		return (false);
	}
	if (plan_ptr->Method () == EXTEND_PLAN || plan_ptr->Method () == EXTEND_COPY) {
		copy = EXTEND_COPY;
	} else {
		copy = COPY_PLAN;
	}

	if (plan_ptr->Priority () == SKIP) {
		plan_ptr->Method (copy);
	} else if (method == DTA_FLOWS) {
		plan_ptr->Method (BUILD_PATH);
	} else if (iteration == 1 && plan_ptr->size () == 0) {
		plan_ptr->Method (BUILD_PATH);
	} else if (!first_iteration && select_priorities) {
		build_flag = select_priority [plan_ptr->Priority ()];

		if (build_flag && max_percent_flag && percent_selected < 1.0) {
			prob = random_select.Probability (plan_ptr->Household () + iteration + random_seed);
			if (plan_ptr->Priority () > 0) {
				build_flag = (prob <= (percent_selected * plan_ptr->Priority ()));
			} else {
				build_flag = (prob <= percent_selected);
			}
		}
		if (build_flag) {
			plan_ptr->Method (BUILD_PATH);
		} else if (method == DUE_PLANS) {
			plan_ptr->Method (copy);
		} else {
			plan_ptr->Method (UPDATE_PLAN);
		}
	} else if (method == DUE_PLANS) {
		plan_ptr->Method (BUILD_PATH);
	} else if (plan_ptr->size () == 0 || plan_ptr->Problem () > 0) {
		plan_ptr->Method (BUILD_PATH);
	} else if (reroute_flag) {
		if (plan_ptr->Depart () < reroute_time && plan_ptr->Arrive () > reroute_time) {
			plan_ptr->Method (REROUTE_PATH);
			plan_ptr->Arrive (reroute_time);
			plan_ptr->Constraint (START_TIME);
		} else if (plan_ptr->Depart () >= reroute_time) {
			plan_ptr->Method (BUILD_PATH);
		} else if (plan_ptr->Arrive () < reroute_time) {
			plan_ptr->Method (COPY_PLAN);
		}
	} else if (update_flag) {
		plan_ptr->Method (UPDATE_PLAN);
	} else if (Link_Flows ()) {
		plan_ptr->Method (PATH_FLOWS);
	} else {
		plan_ptr->Method (COPY_PLAN);
	}
	return (copy == EXTEND_COPY && plan_ptr->Method () == BUILD_PATH);
}
