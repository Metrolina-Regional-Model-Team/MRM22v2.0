//*********************************************************
//	Read_Plan_Skims.cpp - read the plan skim file
//*********************************************************

#include "ModeChoice.hpp"

//---------------------------------------------------------
//	Read_Plan_Skims
//---------------------------------------------------------

void ModeChoice::Read_Plan_Skims (void)
{
	int i;

	Trip_Index trip_index, min_index, index;
	Trip_Index_Itr index_itr;
	Plan_Skim_Itr skim_itr;
	Plan_Skim_Data_Itr data_itr;

	memory_flag = false;

	if (calib_flag) {
		if (save_flag && new_skim_flag) {
			Show_Message (String ("Iteration %d Writing Plan Skims -- Record") % iteration);
		} else {
			Show_Message (String ("Iteration %d Reading Plan Skims -- Record") % iteration);
		}
		if (iteration > 1) {
			if (skim_memory_flag) {
				memory_flag = true;
				for (data_itr = plan_skim_arrays.begin (); data_itr != plan_skim_arrays.end (); data_itr++) {
					(*data_itr)->Rewind ();
				}
			} else {
				for (skim_itr = plan_skim_files.begin (); skim_itr != plan_skim_files.end (); skim_itr++) {
					(*skim_itr)->Rewind ();
				}
			}
		}
	} else {
		Show_Message ("Reading Plan Skim Files -- Record");
	}
	Set_Progress ();

	//---- process each trip ----

	i = (int) plan_skims.size ();
	index_array.assign (i, trip_index);
	
	while (trip_index.Household () < MAX_INTEGER) {
		Show_Progress ();

		//---- read the next ----

		min_index.Household (MAX_INTEGER);

		for (i = 0, index_itr = index_array.begin (); index_itr != index_array.end (); index_itr++, i++) {
			if (*index_itr <= trip_index) {
				if (memory_flag) {
					if (plan_skim_arrays [i]->Read_Record ()) {
						plan_skim_arrays [i]->Get_Index (*index_itr);
						index_skims [i]->Record (plan_skim_arrays [i]->Record ());
					} else {
						(*index_itr).Household (MAX_INTEGER);
					}
				} else {
					if (plan_skim_files [i]->Read_Record ()) {
						plan_skim_files [i]->Get_Index (*index_itr);
						index_skims [i]->Put_Data (*(plan_skim_files [i]));

						if (skim_memory_flag && !tour_choice_flag) {
							plan_skim_arrays [i]->Record (index_skims [i]->Record ());
							plan_skim_arrays [i]->Add_Record ();
						}
					} else {
						(*index_itr).Household (MAX_INTEGER);
					}
				}
			}
			if (*index_itr < min_index) {
				min_index = *index_itr;
			}
		}
		if (min_index.Household () == MAX_INTEGER) break;

		trip_index = min_index;

		//---- get the return trip ----

		if (tour_choice_flag && !memory_flag) {
			for (i = 0, index_itr = index_array.begin (); index_itr != index_array.end (); index_itr++, i++) {
				if (*index_itr == trip_index) {
					if (plan_skim_files [i]->Read_Record ()) {
						plan_skim_files [i]->Get_Index (index);

						if (index.Household () == index_itr->Household () && index.Person () == index_itr->Person () &&
							index.Tour () == index_itr->Tour () && index.Trip () == index_itr->Trip () + 1) {
							index_skims [i]->Add_Return (*(plan_skim_files [i]));
						} else {
							*index_itr = index;
							index_skims [i]->Put_Data (*(plan_skim_files [i]));
						}
					} else {
						(*index_itr).Household (MAX_INTEGER);
					}
					if (skim_memory_flag && *index_itr == trip_index) {
						plan_skim_arrays [i]->Record (index_skims [i]->Record ());
						plan_skim_arrays [i]->Add_Record ();
					}
				}
			}
		}

		//---- mode choice ----

		Choice_Data (trip_index);
	}
	if (!calib_flag) End_Progress ();
}
