CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 1
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	      1 ! 
	      2 !                P R O G R A M   C A P S P D                        
	      3 !          LINK PREPARATION AND SPEED/CAPACITY MODULE                 
	      4 !                          VERSION 3.1                                
	      5 !                         December 9, 2011                               
	      6 
	      7 
	      8 
	      9 !   ACKNOWLEDGEMENTS:                                                 
	     10 !        THIS VERSION COMBINES THE LNKPREP MODULE WRITTEN BY BERNARD  
	     11 !   B. KAHAN OF JOHN HAMBURG & ASSOCIATES, THE CAPSPD PROGRAM,        
	     12 !   ORIGINALLY WRITTEN BY RICHARD L. MERRICK (ALSO OF JOHN HAMBURG    
	     13 !   & ASSOCIATES), AND SASZBR, WRITTEN BY TERRY LATHROP - CDOT.       
	     14    
	     15 !   v 1.2 - added reading area type file (McLelland, November 12, 2004)
	     16 !   v 1.3 - added reading guideway speeds (McLelland, January 11, 2005)
	     17 !   v 1.4 - changed alpha / beta to lanes and funcl (McLelland, January 12, 2005)
	     18 !   v.1.5 - changed zvd calc for signals - removed 10 sec delay added for queue clearing
	     19 !           (McLelland - March 23, 2005)
	     20 !   v.1.6 - changed hov funcl 20 to 23 :  hov is now 22: hov2+, 23: hov3+.  buses allowed on both 
	     21 !           (McLelland - Sept. 7, 2005)
	     22 !           changed hov access funcl 80 to 83 - hov access is now 82 (hov2+) and 83 (hov3+).  buses 
	     23 !           allowed on both (McLelland - Sept. 14, 2005)
	     24 !   v.2.0 - Added non-stop bus travel times
	     25 !   v.2.1 - Added ability to retain earlier loaded speeds 
	     26 !   v.2.2 - changed impedence function from TT=0.6, Dist=0.4 to TT=0.8, Dist=0.2
	     27 !           change is entirely in GISDK - new version here for bookkeepping sake
	     28 !   v.2.3 - added return code
	     29 !   v.2.4 - added adjustment to speed limit - for base year rural surface streets (funcl 4-7, major
	     30 !              to local) - if these have speed limits 50 and above - reduced to 45 for areas that 
	     31 !              are suburban or urban - warning issued (capspd, line no. 120), runyear > baseyear
	     32 !           warnings about intersection controls for centroid connectors removed.  Connector is still
	     33 !              given intersection control, but warnings are not issued because it tends to bulk up
	     34 !              the report and centroid connectors do not have capacity restraint applied anyway.
	     35 !              McLelland - November 1, 2006
	     36 !   v.2.5  - freeway speed adjustments - cap at spdcap (default 60) for atype 1-4 or Meck Co (county=119)
	     37 !              runyear > capyear.  McLelland,  Jan. 29, 2007
	     38 !   v.2.6  - added functional classes 24,25 for arterial HOV lanes
	     39 !              24 - HOV 2+ arterial 
	     40 !              25 - HOV 3+ arterial
	     41 !   v.2.7  - repair return code, McLelland, Jan. 24, 2008
	     42 !   v.2.8  - max capacity of 2200 for freeway / expressway and 2000 for surface,
	     43 !              McLelland, April 24, 2008
	     44 !   v.2.9  - added funcl 85 for walk from station PnR or station bus to station
	     45 !   v.3.0  - ZBR switched from warning to fatal error
	     46 !		   - added check for relevant TAZ (bad TAZ is fatal)
	     47 !		   - repaired area type =1 for funcl = 85
	     48 !			   McLelland, March 17, 2009  
	     49 !	v.3.1  - repaired funcl 24 and 25 funcl names to HOT2+ and HOT3+ McLelland, Dec 09, 2011  
	     50 !		   - repaired factype lookup for signalized intersections from "S" to "L"  McLelland, Dec 09, 2011  
	     51 
	     52 !   compile from \metrolina\pgm
	     53 !   command > df source\capspd /list /fpscomp:filesfromcmd
	     54 !
	     55 !  Joseph McLelland
	     56 !  Charlotte DOT
	     57 

CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 2
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	     58 !  Trace  1:  subroutine entry   
	     59 !         2:  netpass1             NOT DONE
	     60 !         3:  checkN               
	     61 !         4:  ZBR                  NOT DONE 
	     62 !         5:  lookupin              
	     63 !         6:  capspd
	     64 !         7:  areatype
	     65 !         8   guideway
	     66 !  List   1:  lookup tables 
	     67 
	     68 
	     69       IMPLICIT INTEGER (A-Z)                                            
	     70                                                                        
	     71 
	     72 ! files
	     73                                                                      
	     74       integer*4    fcntrlin /5/, fnetin /10/, flookup /11/, fnetout /14/,      &
	     75 	               ferrmsg /8/, fwarnmsg /7/, fmsgout /6/, fnerr /12/,         &
	     76 				   fcntlout /16/, fdctout /15/, frtncd /18/,                    &
	     77 				   fatypein /9/, fguidewayin /13/
	     78       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	     79 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        &  
	     80 				   fatypein, fguidewayin, frtncd
	     81 
	     82       LOGICAL*1 TRACE(10) /10*.false./, LIST(3) /3*.false./                                      
	     83       COMMON /OPT/ TRACE,LIST                                          
	     84          
	     85 	  INTEGER*4    RUNYEAR /2000/, SPDCAP /80/, CAPYEAR /2050/, BASEYEAR /2005/    
	     86 	  LOGICAL*1    RTNSPD 
	     87 	  COMMON /PARAM/ RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR, RTNSPD             
	     88 
	     89       logical*1	   fatal /.false./, severe /.false./                                                    
	     90       integer      rtn /0/
	     91 
	     92 
	     93 	                 
	     94 ! node arrays
	     95 
	     96 	  integer*4       zbrin(30000) /30000*0/, zbrout(30000) /30000*0/
	     97 	  logical*1       nfun(30000,21) /630000*.false./, ncntl(30000,6) /180000*.false./
	     98 
	     99       COMMON /narray/ zbrin, zbrout, nfun, ncntl
	    100 
	    101 ! lookup arrays
	    102 
	    103 
	    104       real*4     LnCap1hr(21,5) /105*1000./,     & ! Link Cap - Lane capacity funcl x areatp    
	    105                  Speederfac(21,5) /105*1./,      & ! Link Spd - factor for spds > spd limit 
	    106 	             CycLen(21,5) /105*60./,         & ! IntX Del - cycle length
	    107 				 PkSpFac(21,5) /105*1./,         & ! Link Spd - factor estimated loaded spd
	    108 				 LocTrnSpFr(21,5) /105*0./,      & ! Link Spd - local bus free speed
	    109 				 XprTrnSpFr(21,5) /105*0./,      & ! Link Spd - express bus free speed
	    110 				 LocTrnSpPk(21,5) /105*0./,      & ! Link Spd - local bus peak speed
	    111 				 XprTrnSpPk(21,5) /105*0./,      & ! Link Spd - express bus peak speed
	    112 				 GrnPctFr(21,21) /441*0./,       & ! IntX Del - green percentage
	    113 				 Cap_Park(5) /5*1./,             & ! Link Cap - on-street parking factor
	    114 				 Cap_Ped(4) /4*1./,              & ! Link Cap - pedestrian activity factor

CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 3
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    115 				 SpFr_Ped(4) /4*1./,             & ! Link spd - pedestrian activity factor
	    116 				 Cap_DevDn(4) /4*1./,            & ! Link cap - development density factor
	    117 				 SpFr_DevDn(4) /4*1./,           & ! Link Spd - development density factor
	    118 				 Cap_Drvwy(4)  /4*1./,           & ! Link Cap - driveway density factor
	    119 				 SpFr_Drvwy(4) /4*1./,           & ! Link Spd - driveway density factor
	    120 				 Cap_FacLn(9,3) /27*1./,         & ! Link cap - facility type x lanes
	    121 				 ZVD_cntl(6)  /6*0./,            & ! IntX Del - delay by control type
	    122 				 Delay_prhb(6) /6*1./,           & ! IntX Del - turn prohibitions
	    123 				 Delay_fac(9) /9*1./,            & ! IntX Del - facility type (signalized)
	    124 				 Delay_TLns(6) /6*1./,           & ! IntX Del - turn lanes factor
	    125 				 Delay_Prg(2) /2*1./,            & ! IntX Del - progressive signals factor
	    126 				 Cap_Cntl(6) /6*1./,             & ! Link Cap - cap fac for non-signalized int.
	    127 				 cappkfac /2.0/,                 & ! Capacity factor for peak period (currently 2 hr
	    127 s)  
	    128 				 capmidfac /7.0/,                & ! Capacity factor for midday period  
	    129 				 capnitefac /9./,                & ! Capacity factor for night period
	    130 				 impwttime /0.6/,                & ! Link impedance - weight for time 
	    131 				 impwtdist /0.4/,                & ! Link impedance - weight for distance  
	    132 				 minspeed /10.0/,                & ! Minimum final speed on link
	    133 				 alpha(21,5,2) /210*0.15/,       & ! Highway delay coefficients - alpha (funcl x urb
	    133 an/rural * no.lanes) - default 0.15
	    134 				 beta(21,5,2)  /210*0.40/          ! Highway delay coefficients - beta  (funcl x urb
	    134 an/rural * no.lanes) - default 0.40
	    135 
	    136 
	    137       COMMON /LOOKUP/ LnCap1hr, Speederfac, CycLen,                    &
	    138 	  			 PkSpFac, LocTrnSpFr, XprTrnSpFr,                      &
	    139 				 LocTrnSpPk, XprTrnSpPk, GrnPctFr,                     &
	    140 				 Cap_Park, Cap_Ped, SpFr_Ped,                          &
	    141 				 Cap_DevDn,SpFr_DevDn, Cap_Drvwy,                      &
	    142 				 SpFr_Drvwy, Cap_FacLn, ZVD_cntl,                      &  
	    143 				 Delay_prhb, Delay_fac, Delay_TLns,                    & 
	    144 				 Delay_Prg, Cap_Cntl,                                  &
	    145 				 cappkfac, capmidfac, capnitefac,                      &
	    146 				 impwttime, impwtdist, minspeed, alpha, beta
	    147 
	    148 
	    149 !  characteristics variable values
	    150 
	    151 
	    152 	  integer*4   maxfuncl /21/, maxat /5/, maxfac /9/,                         & 
	    153 	              legalfun(21) /1,2,3,4,5,6,7,8,9,22,23,24,25,30,40,82,83,84,85,90,92/
	    154 	  character*1 legalfac(9) /'F','E','R','D','M','B','T','C','U'/
	    155 	  character*1 legalcntl(7) /'T','L','S','F','Y','R','X'/
	    156 	  character*2 legalffn(14) /'IU','IR','FU','PU','PR','MU','MR','CU','CM','CR','LU','LR','TR','HO'/
	    157 	  character*1 legalprk(5) /'Y','N','A','P','B'/
	    158 	  character*1 legalhml(4) /'H','M','L','X'/
	    159 	  character*1 legallu(6) /'D','R','C','I','O','X'/
	    160 	  character*1 legalprhb(6) /'N','L','R','T','C','X'/
	    161 	  
	    162 	  character*10 funname(21) /'Freeway',                  & 
	    163 								'Expressway',               &
	    164 								'Class II',                 & 
	    165 								'Major',                    & 
	    166 								'Minor',                    & 
	    167 								'Collector',                &
	    168 								'Local',                    & 

CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 4
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    169 								'Ramp',                     &
	    170 								'Frwy Ramp',                &
	    171 								'HOV2+',               & 
	    172 								'HOV3+',               &
	    173 								'HOT2+',                & 
	    174 								'HOT3+',                &
	    175 								'Rail',		                &  
	    176 								'Busway',                   &
	    177 								'HOV2acc',                  & 
	    178 								'HOV3acc',                  &  
	    179 								'HwyTrnConn',               & 
	    180 								'StationWlk',               & 
	    181 								'CenCon',                   & 
	    182 								'CenConTr'/,                &
	    183 
	    184                     atname(5)  /'       CBD',               &
	    185 					            '       OBD',               &
	    186 								'     Urban',               &
	    187 								'  Suburban',               &
	    188 								'     Rural'/,              &
	    189 
	    190                    parkname(5) /'Y:Park OK',                &
	    191 					            'N:No Park',                &
	    192 								'A:NoAMpark',               &
	    193 								'P:NoPMpark',               &
	    194 								'B:NoPeakPk'/,              &
	    195  
	    196                     facname(9) /'F:Freeway',                &
	    197 								'E:Xprssway',               &  
	    198 								'R:Ramp',                   & 
	    199 								'D:Div-NoBk',               & 
	    200 								'M:Div-Mbrk',               & 
	    201 								'B:Div-Lbay',               &
	    202 								'T:Und-Lbay',               & 
	    203 								'C:Und-cntL',               &
	    204 								'U:Und-no L' /,             &
	    205  
	    206                    prhbname(4) /'L:No left',                &
	    207 								'R:No right',               &  
	    208 								'T:No thru',                & 
	    209 								'C:No turns' /,             &
	    210  
	    211                    cntlname(6) /'T:Through',                &
	    212 								'L:Signal',                 &  
	    213 								'S:Stop',                   & 
	    214 								'F:4w stop',                & 
	    215 								'Y:Yield' ,                 & 
	    216 								'R:RoundAbt' /,             &
	    217 				
	    218                     hmlname(4) /'H:High',                   &
	    219 								'M:Medium',                 &  
	    220 								'L:Low',                    & 
	    221 								'X:Prohibit' /              
	    222 											 
	    223 	  COMMON /legalval/ maxfuncl, maxat, maxfac,                                &
	    224 	                    legalfun, legalfac, legalcntl,                          & 
	    225 	                    legalffn,  legalprk, legalhml,                          &

CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 5
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    226 						legallu, legalprhb,                                     &
	    227 						funname, atname, parkname,                              &
	    228 						facname, prhbname,cntlname,hmlname                               
	    229 
	    230                          
	    231 ! TAZ areatype array
	    232 
	    233 	  integer*4       tazat(30000) /30000*0/ 
	    234       COMMON /at/     tazat
	    235 
	    236 
	    237 ! Guideway speeds 
	    238 
	    239 	  real*4       gdwytt(300,4) /1200 * 0./
	    240 	  integer*4    gdwyid(300) /300*0/, gwcnt /0/ 
	    241       COMMON /gw/  gdwyid, gdwytt, gwcnt
	    242 
	    243 
	    244 
	    245 
	    246 !      PROGRAM ENTRY                                 
	    247        
	    248 
	    249 
	    250       call CntrlIn(fatal)
	    251 	  if (fatal) go to 900
	    252 
	    253 !  Get lookup tables
	    254 
	    255       call lookupin(fatal, severe)
	    256 	  if (fatal) go to 900
	    257 
	    258 
	    259 ! Get area type by TAZ
	    260 
	    261      call AreaType(severe)
	    262 
	    263 !  Guideway speeds
	    264 
	    265      call Guideway
	    266 
	    267 
	    268 !  First pass through network - range checks, builds N arrays
	    269 
	    270 	  call NetPass1(fatal, severe)
	    271 	  if (fatal) go to 900
	    272 
	    273 !  All links in, go through node array, make logic checks
	    274 
	    275       call checkN(fatal)
	    276 	  if (fatal) go to 900
	    277 
	    278 !  Call zbr for incoming / outgoing check 
	    279 
	    280       call zbr(fatal, severe)
	    281 	  if (fatal) go to 900
	    282 

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 6
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    283 
	    284 !  Call capspd - capacity speed 
	    285 !  second pass through network (needed to get node data for opposing funcl) 
	    286 
	    287 
	    288       rewind fnetin
	    289       call CAPSPD(fatal, severe)
	    290 	  if (fatal) go to 900
	    291 	  if (severe) go to 920 
	    292       go to 980
	    293 
	    294 !  Fatal error kill job
	    295 
	    296   900 continue
	    297       write(msgout,9900)
	    298       write(fmsgout,9900)
	    299  9900 format('FATAL ERRORS, job terminated')
	    300       rtn = 24
	    301 	  write(frtncd, 910) rtn
	    302   910 format(i8)
	    303       close	(5, disp='keep') 
	    304       close	(6, disp='keep') 
	    305       close	(7, disp='keep') 
	    306       close	(8, disp='keep')
	    307       close	(9, disp='keep') 
	    308       close	(10, disp='keep') 
	    309       close	(11, disp='keep') 
	    310       close	(12, disp='keep') 
	    311       close	(13, disp='keep') 
	    312       close	(14, disp='keep') 
	    313       close	(15, disp='keep') 
	    314       close	(16, disp='keep') 
	    315       close	(18, disp='keep') 
	    316       STOP 
	    317 
	    318 !     Severe warnings - job completed, warn user
	    319 
	    320   920 continue
	    321       rtn = 8
	    322 	  write(frtncd, 910) rtn
	    323       go to	990   	      
	    324   
	    325 !     Normal end 
	    326 
	    327   980 continue
	    328       rtn = 0
	    329 	  write(frtncd, 910) rtn
	    330      			                                                                     
	    331   990 continue                                                           
	    332       write(msgout,9990)
	    333  9990 format('All done')	   
	    334       close	(5, disp='keep') 
	    335       close	(6, disp='keep') 
	    336       close	(7, disp='keep') 
	    337       close	(8, disp='keep')
	    338       close	(9, disp='keep') 
	    339       close	(10, disp='keep') 

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 7
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    340       close	(11, disp='keep') 
	    341       close	(12, disp='keep') 
	    342       close	(13, disp='keep') 
	    343       close	(14, disp='keep') 
	    344       close	(15, disp='keep') 
	    345       close	(16, disp='keep') 
	    346       close	(18, disp='keep') 
	    347  	  STOP                                                               
	    348 
	    349       CONTAINS                                                                      
	    350 
	    351 !********************************************************************************
	    352 
	    353       SUBROUTINE CntrlIn(fatal)               
	    354 !                                                                       
	    355 !  SUBROUTINE CntrlIn - READS PARAMETER AND OPTION CARDS - SETS UP         
	    356 !  PROGRAM STATE                                                        
	    357 !                                                                       
	    358       IMPLICIT INTEGER(A-Z)                                             
	    359 
	    360 ! arguments
	    361 
	    362       logical*1     fatal
	    363 
	    364 ! files
	    365 
	    366       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	    367 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	    368 				   fcntlout, fdctout, fatypein, fguidewayin, frtncd 
	    369       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	    370 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        & 
	    371 				   fatypein, fguidewayin, frtncd 
	    372 
	    373                          
	    374       LOGICAL*1    TRACE(10), LIST(3)                                      
	    375       COMMON /OPT/ TRACE,LIST                                          
	    376 
	    377  
	    378     
	    379 	  INTEGER*4    RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR    
	    380 	  LOGICAL*1    RTNSPD 
	    381 	  COMMON /PARAM/ RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR, RTNSPD             
	    382 	 
	    383  	  character*80 IN05 /'parameter file'/,                                         &
	    384 	               IN10, IN11, IN12,  IN09, IN13,                                         &
	    385 				   OUT06, OUT07, OUT08, OUT14, OUT15, OUT16, OUT18
	    386 
	    387 	  integer*4 i_var05 /0/, i_var06 /0/, i_var07 /0/, i_var08 /0/,                  & 
	    388 	            i_var10 /0/,                                                         &
	    389 				i_var11 /0/, i_var12 /0/, i_var14 /0/,                               & 
	    390 				i_var15 /0/, i_var16 /0/, i_var09 /0/, i_var13 /0/, i_var18                         
	    390                       
	    391 	  
	    392 	  NAMELIST /INFILES/ IN09, IN10, IN11, IN12, IN13
	    393 	  NAMELIST /OUTFILES/ OUT06, OUT07, OUT08, OUT14, OUT15, OUT16, OUT18
	    394 	  NAMELIST /PARAM/ RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR, RTNSPD                                        
	    395       NAMELIST /OPTION/ TRACE,LIST                                      

CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 8
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    396          
	    397 
	    398       integer*4 RC /0/, date_time(8)     
	    399                                                                        
	    400       character*20 VDATE/'ver 3.1, Dec-09-2011'/
	    401 	  character*12 clk1, clk2, clk3
	    402 	  character*4 yr
	    403 	  character*2 mo, day, h, m                                          
	    404 
	    405                   
	    406 !  CntrlIN ENTRY POINT                                                     
	    407 
	    408       IF (TRACE(1)) print 9001                                                      
	    409  9001 format('Trace(1):  Subroutine CntrlIn entered')             
	    410 
	    411 !                                                                       
	    412 ! Open Files
	    413 
	    414       open (5, file=' ', err=805, iostat=i_var05, &
	    415 	      READONLY, status='OLD')
	    416 
	    417 
	    418       read(5,NML=INFILES)
	    419  	  read(5,NML=OUTFILES)
	    420       read(5,NML=PARAM)	  	  
	    421       read(5,NML=OPTION)	  	  
	    422  
	    423       open (6, file=OUT06, err=806, iostat=i_var06, status = 'REPLACE', recl = 254)
	    424   	  
	    425       open (7, file=OUT07, err=807, iostat=i_var07, status = 'REPLACE', recl = 254)
	    426 
	    427       open (8, file=OUT08, err=808, iostat=i_var08, status = 'REPLACE', recl = 254)
	    428 
	    429       open (9, file=IN09,  err=809, iostat=i_var09, READONLY, status='OLD')
	    430 
	    431       open (10, file=IN10, err=810, iostat=i_var10, READONLY, status='OLD',recl = 382)
	    432 
	    433       open (11, file=IN11, err=811, iostat=i_var11, READONLY, status='OLD')
	    434 
	    435       open (12, file=IN12, err=812, iostat=i_var12, READONLY, status='OLD')
	    436 
	    437       open (13, file=IN13, err=813, iostat=i_var13, READONLY, status='OLD')
	    438 
	    439       open (14, file=OUT14, err=814, iostat=i_var14, status = 'REPLACE', recl=530)
	    440 
	    441       open (15, file=OUT15, err=815, iostat=i_var15, status = 'REPLACE', recl=80)
	    442 
	    443       open (16, file=OUT16, err=816, iostat=i_var16, status = 'REPLACE', recl=80)
	    444 
	    445       open (18, file=OUT18, err=816, iostat=i_var18, status = 'REPLACE', recl=8)
	    446 
	    447  
	    448    10 continue
	    449 
	    450 	  call date_and_time(clk1, clk2, clk3, date_time)    
	    451 	  yr = clk1(1:4)
	    452 	  mo = clk1(5:6)

CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 9
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    453 	  day = clk1(7:8)
	    454 	  h = clk2(1:2)
	    455 	  m = clk2(3:4)                                                           
	    456       write (msgout,9009) VDATE, mo, day, yr, h, m
	    457       write (fmsgout,9009) VDATE, mo, day, yr, h, m
	    458 	  write (ferrmsg, 9009) VDATE, mo, day, yr, h, m
	    459 	  write (fwarnmsg, 9009) VDATE, mo, day, yr, h, m
	    460  9009 format('Metrolina Regional Model'/'CapSpd ',a20/'Run:',a2,'-',a2,'-',a4,', ',a2,':',a2)
	    461 
	    462 
	    463 
	    464       write(msgout, NML=INFILES)
	    465       write(msgout, NML=OUTFILES)
	    466 	  write(msgout, NML=PARAM)
	    467  	  write(msgout, NML=OPTION)
	    468                                         
	    469       write(fmsgout, NML=INFILES)
	    470       write(fmsgout, NML=OUTFILES)
	    471 	  write(fmsgout, NML=PARAM)
	    472  	  write(fmsgout, NML=OPTION)
	    473 
	    474       write (fmsgout,9010) BASEYEAR
	    475  9010 format('Base year for model:', i5/)
	    476 
	    477       write (fmsgout,9012) RUNYEAR
	    478  9012 format('CAPSPD run for year:', i5/)
	    479 
	    480       write (fmsgout,9015) SPDCAP, CAPYEAR 
	    481  9015 format('Maximum speed limit for freeways: ', i3,' if RUNYEAR > ',i4/)
	    482 
	    483 
	    484       if (RTNSPD) then 
	    485 	    write (fmsgout,9020)
	    486 	  else
	    487 	    write (fmsgout,9025)
	    488 	  end if
	    489  9020 format('Run RETAINS PREVIOUSLY LOADED PEAK HIGHWAY AND TRANSIT TIMES')
	    490  9025 format('All Peak Travel times are estimated')
	    491                                                                        
	    492   300 CONTINUE                                                          
	    493 
	    494       go to 900	 	 
	    495 
	    496 ! File error section
	    497 
	    498   805 fid = 5
	    499       fatal = .true.
	    500       print 9801,  fid, in05, i_var05
	    501 	  go to 890
	    502 
	    503   806 fid = 6
	    504       fatal = .true.
	    505       print 9801,  fid, OUT06, i_var06
	    506 	  go to 890
	    507 
	    508   807 fid = 7
	    509       fatal = .true.

CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 10
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    510       print 9801,  fid, OUT07, i_var07
	    511 	  go to 890
	    512 
	    513   808 fid = 8
	    514       fatal = .true.
	    515       print 9801,  fid, OUT08, i_var08
	    516 	  go to 890
	    517 
	    518   809 fid = 9
	    519       fatal = .true.
	    520       print 9801,  fid, IN09, i_var09
	    521 	  go to 890
	    522 
	    523   810 fid = 10
	    524       fatal = .true.
	    525       print 9801,  fid, IN10, i_var10
	    526 	  go to 890
	    527 
	    528   811 fid = 11
	    529       fatal = .true.
	    530       print 9801,  fid, IN11, i_var11
	    531 	  go to 890
	    532 
	    533   812 fid = 12
	    534       fatal = .true.
	    535       print 9801,  fid, IN12, i_var12
	    536 	  go to 890
	    537 
	    538   813 fid = 13
	    539       fatal = .true.
	    540       print 9801,  fid, IN13, i_var13
	    541 	  go to 890
	    542 
	    543   814 fid = 14
	    544       fatal = .true.
	    545       print 9801,  fid, OUT14, i_var14
	    546       go to 890
	    547 
	    548   815 fid = 15
	    549       fatal = .true.
	    550       print 9801,  fid, OUT15, i_var15
	    551 	  go to 890	
	    552 
	    553   816 fid = 16
	    554       fatal = .true.
	    555       print 9801,  fid, OUT16, i_var16
	    556 	  go to 890
	    557 
	    558   818 fid = 18
	    559       fatal = .true.
	    560       print 9801,  fid, OUT18, i_var18
	    561 	  go to 890
	    562 
	    563  9801 format('Fatal Error - cannot read file ',i3,' ', a80,/':  iostat=', i5, ' ****')
	    564   
	    565 !  fatal close
	    566 	  

CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 11
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    567   890 continue
	    568 
	    569       close	(5, disp='keep') 
	    570       close	(6, disp='keep') 
	    571       close	(7, disp='keep') 
	    572       close	(8, disp='keep') 
	    573       close	(9, disp='keep') 
	    574       close	(10, disp='keep') 
	    575       close	(11, disp='keep') 
	    576       close	(12, disp='keep') 
	    577       close	(13, disp='keep') 
	    578       close	(14, disp='keep') 
	    579       close	(15, disp='keep') 
	    580       close	(16, disp='keep') 
	    581       close	(18, disp='keep') 
	    582       RETURN 
	    583 
	    584 !  clean return
	    585 
	    586  900 continue 
	    587      RETURN                                                           
	    588 
	    589      END subroutine CntrlIn


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 _OPT                                    13 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  7 _PARAM                                  17 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  8 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated               132060


ENTRY POINTS

 Address      Name   
                     
  4-00000000  CNTRLIN



CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 12
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

VARIABLES

 Address      Type  Name         Address      Type  Name         Address      Type  Name         Address      Type  Name       
                                                                                                                               
  7-0000000C  I*4   BASEYEAR      5-00000008  I*4   FLOOKUP       2-0000956C  I*4   I_VAR05       1-00000714  CHAR  MO         
  7-00000008  I*4   CAPYEAR       5-00000018  I*4   FMSGOUT       2-00009568  I*4   I_VAR06       1-00000944  CHAR  OUT06      
  1-00000738  CHAR  CLK1          5-0000001C  I*4   FNERR         2-00009564  I*4   I_VAR07       1-000008F4  CHAR  OUT07      
  1-0000072C  CHAR  CLK2          5-00000004  I*4   FNETIN        2-00009560  I*4   I_VAR08       1-000008A4  CHAR  OUT08      
  1-00000720  CHAR  CLK3          5-0000000C  I*4   FNETOUT       2-00009544  I*4   I_VAR09       1-00000854  CHAR  OUT14      
  1-00000710  CHAR  DAY           5-00000030  I*4   FRTNCD        2-0000955C  I*4   I_VAR10       1-00000804  CHAR  OUT15      
      **      L*1   FATAL         5-00000014  I*4   FWARNMSG      2-00009558  I*4   I_VAR11       1-000007B4  CHAR  OUT16      
  5-00000028  I*4   FATYPEIN      1-0000070C  CHAR  H             2-00009554  I*4   I_VAR12       1-00000764  CHAR  OUT18      
  5-00000020  I*4   FCNTLOUT      2-00009584  CHAR  IN05          2-00009540  I*4   I_VAR13       2-0000953C  I*4   RC         
  5-00000000  I*4   FCNTRLIN      1-000009E4  CHAR  IN09          2-00009550  I*4   I_VAR14       7-00000010  L*1   RTNSPD     
  5-00000024  I*4   FDCTOUT       1-00000AD4  CHAR  IN10          2-0000954C  I*4   I_VAR15       7-00000000  I*4   RUNYEAR    
  5-00000010  I*4   FERRMSG       1-00000A84  CHAR  IN11          2-00009548  I*4   I_VAR16       7-00000004  I*4   SPDCAP     
  5-0000002C  I*4   FGUIDEWAYIN   1-00000A34  CHAR  IN12          1-0000071C  I*4   I_VAR18       2-00009570  CHAR  VDATE      
  1-00000704  I*4   FID           1-00000994  CHAR  IN13          1-00000708  CHAR  M             1-00000718  CHAR  YR         


ARRAYS

 Address      Type  Name             Bytes  Dimensions

  1-00000744  I*4   DATE_TIME           32  (8)
  6-0000000A  L*1   LIST                 3  (3)
  6-00000000  L*1   TRACE               10  (10)


LABELS

 Address      Label  Address      Label  Address      Label  Address      Label  Address      Label  Address      Label
                                                                                                                       
      **      10          **      806         **      809         **      812         **      815         **      890  
      **      300         **      807         **      810         **      813         **      816         **      900  
      **      805         **      808         **      811         **      814         **      818                      

CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 13
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    590 
	    591 !***********************************************************************************************
	    592  
	    593        SUBROUTINE emsg_i(eunit,enum,elev,ID,County, evar,emsg)
	    594 
	    595 !  eunit is ID for calling subroutine (see Units below
	    596 !  enum is the numerical error ID generally related to line number
	    597 !  elev is error level F)atal, S)evere, W)arning
	    598 !  evar is the value of error
	    599 !  emsg is the message printed
	    600 
	    601 !  arguments
	    602 
	    603        integer*4 eunit,enum, ID, County
	    604 	   integer*4 evar
	    605        character*1 elev
	    606 	   character*40 emsg
	    607 
	    608 !  local
	    609 
	    610        integer*4  fout
	    611 	   character*10 units(7) /'NetPass1', 'CheckN', 'zbr', 'lookupin', 'capspd','AreaType', 'GuideWay'/
	    612 	   character*10 lev
	    613 
	    614       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	    615 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	    616 				   fcntlout, fdctout, fatypein, fguidewayin, frtncd
	    617       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	    618 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout ,       &  
	    619 				   fatypein, fguidewayin, frtncd
	    620 
	    621        if (elev .eq. 'F') then 
	    622 	     lev = 'FATAL  '
	    623          fout = ferrmsg
	    624         else if (elev .eq. 'S') then
	    625 	     lev = 'Severe '
	    626          fout = ferrmsg
	    627        else 
	    628 	     lev = 'Warning'
	    629          fout = fwarnmsg
	    630 	   endif
	    631 
	    632 	   write(fout,100) lev, ID, County, evar, emsg, units(eunit), enum
	    633    100 format(a7,1x,i10,i4,' var=',i8,2x,a40,1x,a10,i4)
	    634 
	    635        return
	    636 	   end subroutine emsg_i

EMSG_I                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 14
                                                                 9-Dec-2011 10:07:43  source\capspd.F90



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated               132030


ENTRY POINTS

 Address      Name  
                    
  4-00001DDA  EMSG_I


VARIABLES

 Address      Type  Name         Address      Type  Name         Address      Type  Name         Address      Type  Name       
                                                                                                                               
      **      I*4   COUNTY        5-00000028  I*4   FATYPEIN      5-00000008  I*4   FLOOKUP       5-00000030  I*4   FRTNCD     
      **      CHAR  ELEV          5-00000020  I*4   FCNTLOUT      5-00000018  I*4   FMSGOUT       5-00000014  I*4   FWARNMSG   
      **      CHAR  EMSG          5-00000000  I*4   FCNTRLIN      5-0000001C  I*4   FNERR             **      I*4   ID         
      **      I*4   ENUM          5-00000024  I*4   FDCTOUT       5-00000004  I*4   FNETIN        1-00000088  CHAR  LEV        
      **      I*4   EUNIT         5-00000010  I*4   FERRMSG       5-0000000C  I*4   FNETOUT                                    
      **      I*4   EVAR          5-0000002C  I*4   FGUIDEWAYIN       **      I*4   FOUT                                       


ARRAYS

 Address      Type  Name         Bytes  Dimensions

  2-00005D68  CHAR  UNITS           70  (7)

EMSG_I                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 15
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    637 !***********************************************************************************************
	    638 
	    639        SUBROUTINE emsg_r(eunit,enum,elev,ID,County, evar,emsg)
	    640 
	    641 !  eunit is ID for calling subroutine (see Units below
	    642 !  enum is the numerical error ID generally related to line number
	    643 !  elev is error level F)atal, S)evere, W)arning
	    644 !  evar is the value of error
	    645 !  emsg is the message printed
	    646 
	    647 !  arguments
	    648 
	    649        integer*4 eunit,enum, ID, County
	    650 	   real*4 evar
	    651        character*1 elev
	    652 	   character*40 emsg
	    653 
	    654 !  local
	    655 
	    656        integer*4  fout
	    657 	   character*10 units(7) /'NetPass1', 'CheckN', 'zbr', 'lookupin', 'capspd','AreaType', 'GuideWay'/
	    658 	   character*10 lev
	    659 
	    660       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	    661 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	    662 				   fcntlout,fdctout, fatypein, fguidewayin, frtncd 
	    663       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	    664 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        &
	    665 				   fatypein, fguidewayin, frtncd 
	    666 
	    667        if (elev .eq. 'F') then 
	    668 	     lev = 'FATAL  '
	    669          fout = ferrmsg
	    670         else if (elev .eq. 'S') then
	    671 	     lev = 'Severe '
	    672          fout = ferrmsg
	    673        else 
	    674 	     lev = 'Warning'
	    675          fout = fwarnmsg
	    676 	   endif
	    677 
	    678 	   write(fout,100) lev, ID, County, evar, emsg, units(eunit), enum
	    679    100 format(a7,1x,i10,i4,' var=',f8.2,2x,a40,1x,a10,i4)
	    680 
	    681 !Errlevl ID3456780 cty var=12345678  Message890123456789012345678901234567890 Unit567890 err
	    682 
	    683        return
	    684 	   end subroutine emsg_r

EMSG_R                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 16
                                                                 9-Dec-2011 10:07:43  source\capspd.F90



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated               132030


ENTRY POINTS

 Address      Name  
                    
  4-00001F99  EMSG_R


VARIABLES

 Address      Type  Name         Address      Type  Name         Address      Type  Name         Address      Type  Name       
                                                                                                                               
      **      I*4   COUNTY        5-00000028  I*4   FATYPEIN      5-00000008  I*4   FLOOKUP       5-00000030  I*4   FRTNCD     
      **      CHAR  ELEV          5-00000020  I*4   FCNTLOUT      5-00000018  I*4   FMSGOUT       5-00000014  I*4   FWARNMSG   
      **      CHAR  EMSG          5-00000000  I*4   FCNTRLIN      5-0000001C  I*4   FNERR             **      I*4   ID         
      **      I*4   ENUM          5-00000024  I*4   FDCTOUT       5-00000004  I*4   FNETIN        1-0000007C  CHAR  LEV        
      **      I*4   EUNIT         5-00000010  I*4   FERRMSG       5-0000000C  I*4   FNETOUT                                    
      **      R*4   EVAR          5-0000002C  I*4   FGUIDEWAYIN       **      I*4   FOUT                                       


ARRAYS

 Address      Type  Name         Bytes  Dimensions

  2-00005D20  CHAR  UNITS           70  (7)

EMSG_R                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 17
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    685 
	    686 !***********************************************************************************************
	    687 
	    688        SUBROUTINE emsg_c(eunit,enum,elev,ID,County, evar,emsg)
	    689 
	    690 !  eunit is ID for calling subroutine (see Units below
	    691 !  enum is the numerical error ID generally related to line number
	    692 !  elev is error level F)atal, S)evere, W)arning
	    693 !  evar is the value of error
	    694 !  emsg is the message printed
	    695 
	    696 !  arguments
	    697 
	    698        integer*4 eunit,enum, ID, County
	    699 	   character*1 evar
	    700        character*1 elev
	    701 	   character*40 emsg
	    702 
	    703 !  local
	    704 
	    705        integer*4  fout
	    706 	   character*10 units(7) /'NetPass1', 'CheckN', 'zbr', 'lookupin', 'capspd','AreaType', 'GuideWay'/
	    707 	   character*10 lev
	    708 
	    709       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	    710 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	    711 				   fcntlout, fdctout, fatypein, fguidewayin, frtncd 
	    712       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	    713 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        &
	    714 				   fatypein, fguidewayin, frtncd 
	    715 
	    716 
	    717        if (elev .eq. 'F') then 
	    718 	     lev = 'FATAL  '
	    719          fout = ferrmsg
	    720         else if (elev .eq. 'S') then
	    721 	     lev = 'Severe '
	    722          fout = ferrmsg
	    723        else 
	    724 	     lev = 'Warning'
	    725          fout = fwarnmsg
	    726 	   endif
	    727 
	    728 	   write(fout,100) lev, ID, County, evar, emsg, units(eunit), enum
	    729    100 format(a7,1x,i10,i4,' var=',a1,9x,a40,1x,a10,i4)
	    730 
	    731        return
	    732 	   end subroutine emsg_c

EMSG_C                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 18
                                                                 9-Dec-2011 10:07:43  source\capspd.F90



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated               132030


ENTRY POINTS

 Address      Name  
                    
  4-00002158  EMSG_C


VARIABLES

 Address      Type  Name         Address      Type  Name         Address      Type  Name         Address      Type  Name       
                                                                                                                               
      **      I*4   COUNTY        5-00000028  I*4   FATYPEIN      5-00000008  I*4   FLOOKUP       5-00000030  I*4   FRTNCD     
      **      CHAR  ELEV          5-00000020  I*4   FCNTLOUT      5-00000018  I*4   FMSGOUT       5-00000014  I*4   FWARNMSG   
      **      CHAR  EMSG          5-00000000  I*4   FCNTRLIN      5-0000001C  I*4   FNERR             **      I*4   ID         
      **      I*4   ENUM          5-00000024  I*4   FDCTOUT       5-00000004  I*4   FNETIN        1-00000094  CHAR  LEV        
      **      I*4   EUNIT         5-00000010  I*4   FERRMSG       5-0000000C  I*4   FNETOUT                                    
      **      CHAR  EVAR          5-0000002C  I*4   FGUIDEWAYIN       **      I*4   FOUT                                       


ARRAYS

 Address      Type  Name         Bytes  Dimensions

  2-00005DB0  CHAR  UNITS           70  (7)

EMSG_C                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 19
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    733 !***********************************************************************************************
	    734 
	    735        SUBROUTINE emsg_c2(eunit,enum,elev,ID,County, evar,emsg)
	    736 
	    737 !  eunit is ID for calling subroutine (see Units below
	    738 !  enum is the numerical error ID generally related to line number
	    739 !  elev is error level F)atal, S)evere, W)arning
	    740 !  evar is the value of error
	    741 !  emsg is the message printed
	    742 
	    743 !  arguments
	    744 
	    745        integer*4 eunit,enum, ID, County
	    746 	   character*2 evar
	    747        character*1 elev
	    748 	   character*40 emsg
	    749 
	    750 !  local
	    751 
	    752        integer*4  fout
	    753 	   character*10 units(7) /'NetPass1', 'CheckN', 'zbr', 'lookupin', 'capspd','AreaType', 'GuideWay'/
	    754 	   character*10 lev
	    755 
	    756       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	    757 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	    758 				   fcntlout, fdctout, fatypein, fguidewayin, frtncd
	    759       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	    760 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        & 
	    761 				   fatypein, fguidewayin, frtncd
	    762 
	    763        if (elev .eq. 'F') then 
	    764 	     lev = 'FATAL  '
	    765          fout = ferrmsg
	    766         else if (elev .eq. 'S') then
	    767 	     lev = 'Severe '
	    768          fout = ferrmsg
	    769        else 
	    770 	     lev = 'Warning'
	    771          fout = fwarnmsg
	    772 	   endif
	    773 
	    774 	   write(fout,100) lev, ID, County, evar, emsg, units(eunit), enum
	    775    100 format(a7,1x,i10,i4,' var=',a2,8x,a40,1x,a10,i4)
	    776 
	    777        return
	    778 	   end subroutine emsg_c2

EMSG_C2                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 20
                                                                 9-Dec-2011 10:07:43  source\capspd.F90



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated               132030


ENTRY POINTS

 Address      Name   
                     
  4-0000231C  EMSG_C2


VARIABLES

 Address      Type  Name         Address      Type  Name         Address      Type  Name         Address      Type  Name       
                                                                                                                               
      **      I*4   COUNTY        5-00000028  I*4   FATYPEIN      5-00000008  I*4   FLOOKUP       5-00000030  I*4   FRTNCD     
      **      CHAR  ELEV          5-00000020  I*4   FCNTLOUT      5-00000018  I*4   FMSGOUT       5-00000014  I*4   FWARNMSG   
      **      CHAR  EMSG          5-00000000  I*4   FCNTRLIN      5-0000001C  I*4   FNERR             **      I*4   ID         
      **      I*4   ENUM          5-00000024  I*4   FDCTOUT       5-00000004  I*4   FNETIN        1-00000578  CHAR  LEV        
      **      I*4   EUNIT         5-00000010  I*4   FERRMSG       5-0000000C  I*4   FNETOUT                                    
      **      CHAR  EVAR          5-0000002C  I*4   FGUIDEWAYIN       **      I*4   FOUT                                       


ARRAYS

 Address      Type  Name         Bytes  Dimensions

  2-00009458  CHAR  UNITS           70  (7)

EMSG_C2                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 21
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    779 
	    780 
	    781 !**********************************************************************************
	    782 
	    783 	 SUBROUTINE AreaType(severe)                                                               
	    784 
	    785 !     Read area type by TAZ file 
	    786 
	    787 ! arguments
	    788 
	    789       logical*1    severe
	    790 
	    791 ! files
	    792       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	    793 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	    794 				   fcntlout, fdctout, fatypein, fguidewayin, frtncd
	    795       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	    796 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        &
	    797 				   fatypein, fguidewayin, frtncd
	    798 
	    799       LOGICAL*1    TRACE(10), LIST(3)                                      
	    800       COMMON /OPT/ TRACE,LIST                                          
	    801 
	    802 	  INTEGER*4    RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR    
	    803 	  LOGICAL*1    RTNSPD 
	    804 	  COMMON /PARAM/ RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR, RTNSPD             
	    805 	                                           
	    806 
	    807 ! TAZ areatype array
	    808 
	    809 	  integer*4       tazat(30000) 
	    810       COMMON /at/     tazat
	    811 
	    812 
	    813 ! local variables 
	    814 
	    815       integer*4     atin /0/, aterr /0/, taz, atype, dummy /0/
	    816 	  character*1   W /'W'/, S /'S'/
	    817 
	    818 
	    819       IF (TRACE(7)) print 9001                                                      
	    820  9001 format('Trace(7):  Subroutine AreaType entered')             
	    821 
	    822  
	    823   100 continue
	    824       read(fatypein,9100,end=800) taz, atype
	    825  9100 format(i10,i1)
	    826 
	    827      atin = atin + 1
	    828 
	    829 !  check ranges 
	    830 
	    831   105 continue
	    832       if (taz .gt. 0 .and. taz .lt. 30001) go to 110
	    833 	  aterr = aterr + 1
	    834 	  call emsg_i(6,105,S, dummy, taz, atype,'Illegal TAZ no.                         ') 
	    835       go to 100

AREATYPE                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 22
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    836 	  		  
	    837   110 continue
	    838       if (atype .gt. 0 .and. atype .lt. 6) go to 115
	    839 	  aterr = aterr + 1
	    840 	  call emsg_i(6,110,S,dummy, taz, atype,'Illegal area type                       ') 
	    841       go to 100
	    842 
	    843   115 continue
	    844       tazat(taz) = atype
	    845       go to 100
	    846 
	    847 !  all done, write messages and return to main 
	    848 
	    849   800 continue
	    850       write (msgout, 9800) atin, aterr 
	    851 	  write (fmsgout, 9800) atin, aterr 
	    852  9800 format(' Subroutine AreaType completed',/                       &
	    853              '     TAZ records read:          ', i6,/,                & 
	    854 			 '     Severe errors              ', i6)
	    855 
	    856       if (aterr .gt.0) severe = .true. 
	    857 
	    858 	  RETURN
	    859       END subroutine AreaType


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 _OPT                                    13 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  7 _PARAM                                  17 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  8 _AT                                 120000 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  9 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated               252060


ENTRY POINTS

 Address      Name    
                      
  4-00000000  AREATYPE



AREATYPE                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 23
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

VARIABLES

 Address      Type  Name         Address      Type  Name         Address      Type  Name         Address      Type  Name       
                                                                                                                               
  2-00005D00  I*4   ATERR         5-00000020  I*4   FCNTLOUT      5-0000001C  I*4   FNERR         2-00005CF4  CHAR  S          
  2-00005D04  I*4   ATIN          5-00000000  I*4   FCNTRLIN      5-00000004  I*4   FNETIN            **      L*1   SEVERE     
  1-00000004  I*4   ATYPE         5-00000024  I*4   FDCTOUT       5-0000000C  I*4   FNETOUT       7-00000004  I*4   SPDCAP     
  7-0000000C  I*4   BASEYEAR      5-00000010  I*4   FERRMSG       5-00000030  I*4   FRTNCD        1-00000008  I*4   TAZ        
  7-00000008  I*4   CAPYEAR       5-0000002C  I*4   FGUIDEWAYIN   5-00000014  I*4   FWARNMSG      2-00005CF8  CHAR  W          
  2-00005CFC  I*4   DUMMY         5-00000008  I*4   FLOOKUP       7-00000010  L*1   RTNSPD                                     
  5-00000028  I*4   FATYPEIN      5-00000018  I*4   FMSGOUT       7-00000000  I*4   RUNYEAR                                    


ARRAYS

 Address      Type  Name         Bytes  Dimensions

  6-0000000A  L*1   LIST             3  (3)
  8-00000000  I*4   TAZAT       120000  (30000)
  6-00000000  L*1   TRACE           10  (10)


LABELS

 Address      Label  Address      Label  Address      Label  Address      Label  Address      Label
                                                                                                   
      **      100         **      105         **      110         **      115         **      800  

AREATYPE                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 24
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    860 
	    861 
	    862 !**********************************************************************************
	    863 
	    864 	 SUBROUTINE GuideWay                                                              
	    865 
	    866 !     Read guideway travel times from guideway file 
	    867 
	    868 
	    869 ! files
	    870       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	    871 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	    872 				   fcntlout, fdctout, fatypein, fguidewayin, frtncd
	    873       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	    874 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        &
	    875 				   fatypein, fguidewayin, frtncd
	    876 
	    877 
	    878       LOGICAL*1    TRACE(10), LIST(3)                                      
	    879       COMMON /OPT/ TRACE,LIST                                          
	    880          
	    881 	  INTEGER*4    RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR    
	    882 	  LOGICAL*1    RTNSPD 
	    883 	  COMMON /PARAM/ RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR, RTNSPD             
	    884 
	    885 ! Guideway speeds 
	    886 
	    887 	  real*4       gdwytt(300,4)
	    888 	  integer*4    gdwyid(300), gwcnt 
	    889       COMMON /gw/  gdwyid, gdwytt, gwcnt
	    890 
	    891 
	    892 ! local variables 
	    893 
	    894       integer*4     gwin /0/, gwerr /0/, seq, id, dummy /0/
	    895 	  real*4        ab_time, ba_time, ab_nst, ba_nst 
	    896 	  character*1   W /'W'/
	    897 	  character*25  stnam, stnama, stnamb
	    898 
	    899 
	    900       IF (TRACE(8)) print 9001                                                      
	    901  9001 format('Trace(8):  Subroutine Guideway entered')             
	    902 
	    903 
	    904       write(fmsgout, 9000)
	    905  9000 format(///'Guideway speed overrides'/                                          & 
	    906              '     ID Guideway',18x,'From',22x,'To',24x,'   Seq AB time BA time  ABnstp  BAnstp')
	    907 
	    908  
	    909   100 continue
	    910       read(fguidewayin,9100,end=800) id, stnam, stnama, stnamb, seq, ab_time, ba_time, ab_nst, ba_nst
	    911  9100 format(i10,2x,3a25,i10,4f10.2)
	    912 
	    913      gwin = gwin + 1
	    914 
	    915 !  check ranges 
	    916 

GUIDEWAY                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 25
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    917   105 continue
	    918       if (ab_time .gt. 0.0 .or. ab_time .lt. 60.) go to 110
	    919 	  gwerr = gwerr + 1
	    920 	  call emsg_r(7,105,W, ID, dummy, ab_time, 'Illegal guideway trav time (AB), ignored') 
	    921       go to 100
	    922 	  		  
	    923   110 continue
	    924       if (ba_time .gt. 0.0 .or. ba_time .lt. 60.) go to 115
	    925 	  gwerr = gwerr + 1
	    926 	  call emsg_r(7,110,W, ID, dummy, ba_time, 'Illegal guideway trav time (BA), ignored') 
	    927        go to 100
	    928 	  		  
	    929   115 continue
	    930       if (gwcnt .lt. 300) go to 120
	    931 	  gwerr = gwerr + 1
	    932 	  call emsg_i(7,115,W, ID, dummy, gwcnt, 'Max guideway links exceeded, ignored    ') 
	    933       go to 100
	    934 
	    935   120 continue
	    936       gwcnt = gwcnt + 1 
	    937       gdwyid(gwcnt) = id
	    938 	  gdwytt(gwcnt,1) = ab_time
	    939 	  gdwytt(gwcnt,2) = ba_time
	    940 	  gdwytt(gwcnt,3) = ab_nst
	    941 	  gdwytt(gwcnt,4) = ba_nst
	    942 
	    943       write(fmsgout, 9120) gdwyid(gwcnt), stnam, stnama, stnamb, seq, gdwytt(gwcnt,1), gdwytt(gwcnt,2), gdwytt(gwcnt
	    943 ,3), gdwytt(gwcnt,4)
	    944  9120 format(i8,3(1x,a25),i6,4f8.2)
	    945       
	    946 	  go to 100
	    947 
	    948 !  all done, write messages and return to main 
	    949 
	    950   800 continue
	    951       write (msgout, 9800) gwin, gwerr 
	    952       write (fmsgout, 9800) gwin, gwerr 
	    953  9800 format(' Subroutine GuideWay completed',/                       &
	    954              '     Guideway records read:     ', i6,/,                & 
	    955 			 '     Warnings                   ', i6)
	    956 
	    957 
	    958 	  RETURN
	    959       END subroutine GuideWay

GUIDEWAY                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 26
                                                                 9-Dec-2011 10:07:43  source\capspd.F90



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 _OPT                                    13 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  7 _PARAM                                  17 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  8 _GW                                   6004 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  9 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated               138064


ENTRY POINTS

 Address      Name    
                      
  4-00000000  GUIDEWAY


VARIABLES

 Address      Type  Name         Address      Type  Name         Address      Type  Name         Address      Type  Name       
                                                                                                                               
  1-00000010  R*4   AB_NST        5-00000020  I*4   FCNTLOUT      5-00000004  I*4   FNETIN        7-00000010  L*1   RTNSPD     
  1-00000018  R*4   AB_TIME       5-00000000  I*4   FCNTRLIN      5-0000000C  I*4   FNETOUT       7-00000000  I*4   RUNYEAR    
  7-0000000C  I*4   BASEYEAR      5-00000024  I*4   FDCTOUT       5-00000030  I*4   FRTNCD        1-0000001C  I*4   SEQ        
  1-0000000C  R*4   BA_NST        5-00000010  I*4   FERRMSG       5-00000014  I*4   FWARNMSG      7-00000004  I*4   SPDCAP     
  1-00000014  R*4   BA_TIME       5-0000002C  I*4   FGUIDEWAYIN   8-00001770  I*4   GWCNT         1-0000005C  CHAR  STNAM      
  7-00000008  I*4   CAPYEAR       5-00000008  I*4   FLOOKUP       2-00005D08  I*4   GWERR         1-00000040  CHAR  STNAMA     
  2-00005D14  I*4   DUMMY         5-00000018  I*4   FMSGOUT       2-00005D0C  I*4   GWIN          1-00000024  CHAR  STNAMB     
  5-00000028  I*4   FATYPEIN      5-0000001C  I*4   FNERR         1-00000020  I*4   ID            2-00005D10  CHAR  W          


ARRAYS

 Address      Type  Name          Bytes  Dimensions

  8-00000000  I*4   GDWYID         1200  (300)
  8-000004B0  R*4   GDWYTT         4800  (300, 4)
  6-0000000A  L*1   LIST              3  (3)
  6-00000000  L*1   TRACE            10  (10)



GUIDEWAY                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 27
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

LABELS

 Address      Label  Address      Label  Address      Label  Address      Label  Address      Label  Address      Label
                                                                                                                       
      **      100         **      105         **      110         **      115         **      120         **      800  

GUIDEWAY                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 28
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	    960 
	    961 
	    962 !**********************************************************************************
	    963 
	    964 	 SUBROUTINE NetPass1(fatal, severe)                                                               
	    965 
	    966 !     Read network first time, perform checks on valid ranges of variables
	    967 
	    968 
	    969 ! parameters
	    970 
	    971 	  logical*1      fatal, severe
	    972 
	    973 ! files
	    974       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	    975 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	    976 				   fcntlout, fdctout, fatypein, fguidewayin, frtncd
	    977       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	    978 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        &
	    979 				   fatypein, fguidewayin, frtncd 
	    980 
	    981       LOGICAL*1    TRACE(10), LIST(3)                                      
	    982       COMMON /OPT/ TRACE,LIST                                          
	    983          
	    984 	  INTEGER*4    RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR   
	    985 	  LOGICAL*1    RTNSPD 
	    986 	  COMMON /PARAM/ RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR, RTNSPD             
	    987                                                  
	    988 ! node arrays
	    989 
	    990 	  integer*4       zbrin(30000), zbrout(30000)
	    991 	  logical*1       nfun(30000,21), ncntl(30000,6)
	    992       
	    993 	  COMMON /narray/ zbrin, zbrout, nfun, ncntl
	    994 
	    995 
	    996 !  characteristics variable values
	    997 
	    998 
	    999 	  integer*4    maxfuncl, maxat, maxfac, legalfun(21)
	   1000 	  character*1  legalfac(9), legalcntl(7),  legalprk(5),                      &
	   1001 	               legalhml(4), legallu(6), legalprhb(6)
	   1002 
	   1003 	  character*2  legalffn(14)
	   1004 
	   1005 	  character*10 funname(21), atname(5), parkname(5),                         & 
	   1006 	               facname(9), prhbname(4), cntlname(6), hmlname(4) 
	   1007 	
	   1008 	  COMMON /legalval/ maxfuncl, maxat, maxfac,                                &
	   1009 	                    legalfun, legalfac, legalcntl,                          & 
	   1010 	                    legalffn,  legalprk, legalhml,                          &
	   1011 						legallu, legalprhb,                                     &
	   1012 						funname, atname, parkname,                              &
	   1013 						facname, prhbname,cntlname,hmlname                               
	   1014 
	   1015 
	   1016 

NETPASS1                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 29
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1017 
	   1018 
	   1019 ! link record variables
	   1020 
	   1021 !******************************************************************************
	   1022 
	   1023      integer*4     ID, Anode, Bnode, funcl,                               &
	   1024 	                locclass1, locclass2, A_oppfuncl, B_oppfuncl,         & 
	   1025 	                dir, lanesAB, lanesBA, spdlimit,                      &
	   1026 	                A_LeftLns, A_ThruLns, A_RightLns,                     &  
	   1027 					B_LeftLns, B_ThruLns, B_RightLns,                     &
	   1028 					county, state, revln, taz                                          
	   1029 	
	   1030 
	   1031       REAL*4	    length
	   1032 
	   1033 	  character*1   factype, parking, pedactivty, developden,               &
	   1034 	                drivewyden, landuse, A_Control, A_prohibit,             &
	   1035 					B_Control, B_Prohibit,  revtime                       
	   1036 
	   1037 	  character*2   fedfunc
	   1038       character*5   fedfunc_AQ
	   1039 
	   1040 ! added for version 2.1
	   1041       real*4      O_cap1AB, O_cap1BA, O_TTPkEstAB, O_TTPkEstBA,           &
	   1042 				  O_TTPkPrevAB, O_TTPkPrevBA, O_TTPkAssnAB, O_TTPkAssnBA, &                         
	   1042          
	   1043 				  O_TTPkLocAB, O_TTPkLocBA, O_TTPkXprAB, O_TTPkXprBA,     &                         
	   1043          
	   1044 				  O_TTPkNStAB, O_TTPkNStBA, O_TTPkSkSAB, O_TTPkSkSBA,     &                         
	   1044          
	   1045 				  O_PkLocLUAB, O_PkLocLUBA, O_PkXprLUAB, O_PkXprLUBA
	   1046  
	   1047 
	   1048 
	   1049 ! counters and indexes
	   1050 
	   1051       integer*4     i,j, funndx, Actlndx, Bctlndx,                              &  
	   1052 	                lin1 /0/, lerr /0/, lwarn /0/, nerr /0/, nwarn /0/, ferr /0/
	   1053 
	   1054 ! local variables
	   1055      
	   1056 	  integer*4   Aintlns, Bintlns
	   1057 	  logical*1   warn /.false./
	   1058 	  character*1 F /'F'/, S /'S'/, W /'W'/
	   1059 
	   1060 
	   1061 ! NetPass1 entry
	   1062 
	   1063 
	   1064       IF (TRACE(1)) print 9001                                                      
	   1065  9001 format('Trace(1):  Subroutine NetPass1 entered')             
	   1066 
	   1067  
	   1068   100 continue
	   1069       read(fnetin,9100,end=800) ID, length, dir, Anode, Bnode,              &
	   1070  	                        funcl, fedfunc, fedfunc_AQ,                             &

NETPASS1                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 30
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1071 							lanesAB, lanesBA,                                       &
	   1072 							factype, spdlimit, parking, pedactivty,                 &
	   1073 							developden, drivewyden, landuse,                        &
	   1074 							A_LeftLns,A_ThruLns, A_RightLns,                        &	
	   1074 	
	   1075 							A_Control, A_Prohibit,                                  &
	   1076 							B_LeftLns, B_ThruLns, B_RightLns,                       &
	   1077 							B_Control, B_prohibit,                                  & 
	   1078 							State, County, locclass1, locclass2,                    &
	   1079 							revln, revtime, taz,                                    &
	   1080 							O_cap1AB, O_cap1BA, O_TTPkEstAB, O_TTPkEstBA,           &
	   1081 							O_TTPkPrevAB, O_TTPkPrevBA, O_TTPkAssnAB, O_TTPkAssnBA, &   
	   1081                                
	   1082 							O_TTPkLocAB, O_TTPkLocBA, O_TTPkXprAB, O_TTPkXprBA,     &   
	   1082                                
	   1083 							O_TTPkNStAB, O_TTPkNStBA, O_TTPkSkSAB, O_TTPkSkSBA,     &   
	   1083                                
	   1084 							O_PkLocLUAB, O_PkLocLUBA, O_PkXprLUAB, O_PkXprLUBA      
	   1085 							                                 
	   1086 
	   1087  9100 format               (i10,   f10.0, i2,    i6,   i6,                & ! 1 ID
	   1088                             i8,    a2,    a5,                             & ! 2 funcl
	   1089 							i8,    i8,                                    & ! 3 lanes
	   1090 							a1,    i8,    a1,    a1,                      & ! 4 factyp
	   1091 							a1,    a1,    a1,                             & ! 5 developd
	   1091 en 
	   1092 							i8,    i8,    i8,                             & ! 6 A_LeftLn
	   1092 s
	   1093 							a1,    a1,                                    & ! 7 A_Contro
	   1093 l
	   1094 							i8,    i8,    i8,                             & ! 8 B_LeftLn
	   1094 s
	   1095 							a1,    a1,                                    & ! 9 B_Contro
	   1095 l
	   1096                             i8,    i8,    i8,    i8,                      & !State 
	   1097 			     			i8,    a1,    i10,                            & !revln
	   1098 							f10.0, f10.0, f10.0, f10.0,                   & !cap1AB (old
	   1098  stuff)
	   1099 							f10.0, f10.0, f10.0, f10.0,                   & !TTPkPrevAB 
	   1099 (all old)
	   1100 							f10.0, f10.0, f10.0, f10.0,                   & !TTPkLocAB (
	   1100 all old)
	   1101 							f10.0, f10.0, f10.0, f10.0,                   & !TTPkNStAB (
	   1101 all old)
	   1102 							f10.0, f10.0, f10.0, f10.0)                     !PkLocLUAB (
	   1102 all old)
	   1103 
	   1104 
	   1105      lin1 = lin1 + 1
	   1106 
	   1107 
	   1108 !  check ranges for input variables, some severe, some warnings
	   1109 
	   1110 !  length - severe
	   1111 
	   1112   105 continue
	   1113       if (length .gt. 0.001) go to 110

NETPASS1                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 31
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1114 	  severe = .true.
	   1115 	  lerr = lerr + 1
	   1116 	  call emsg_r(1,105,S,ID,County,length,'Zero length link                        ')
	   1117 		  
	   1118 !  dir - fatal
	   1119 
	   1120   110 continue
	   1121       if (dir .eq. -1 .or. dir .eq. 0 .or. dir .eq. 1) go to 115
	   1122 	  fatal = .true.
	   1123 	  ferr = ferr + 1
	   1124 	  call emsg_i(1,110,F,ID,County,dir,'Illegal direction code                  ') 
	   1125 
	   1126 !  anode - max (30000) is current array max - fatal 
	   1127  
	   1128   115 continue
	   1129       if (anode .gt.0 .and. anode .lt. 30001) go to 120
	   1130 	  fatal = .true.
	   1131 	  ferr = ferr + 1
	   1132 	  call emsg_i(1,115,F,ID,County,Anode,'Anode out of range (0-30000)            ') 
	   1133 
	   1134 !                 (efile,eunit,enum,elev,ID,County, evar,ename,emsg)
	   1135 
	   1136 !  bnode - max (30000) is current array max - fatal
	   1137 
	   1138   120 continue
	   1139       if (bnode .gt.0 .and. bnode .lt. 30001) go to 125
	   1140 	  fatal = .true.
	   1141 	  ferr = ferr + 1
	   1142 	  call emsg_i(1,120,F,ID,County,Bnode,'Bnode out of range (0-30000)            ') 
	   1143 
	   1144 
	   1145 !  funcl - fatal  - uses funndx to locate funcl (count 1-21) - use default for node arrays
	   1146 
	   1147   125 continue
	   1148       do 127 funndx = 1, maxfuncl
	   1149 	    if (funcl .eq. legalfun(funndx)) go to 130
	   1150   127 continue
	   1151       severe = .true.
	   1152 	  lerr = lerr + 1
	   1153 	  call emsg_i(1,125,S,ID,County,funcl,'Illegal funtional class (default = 6)   ') 
	   1154       funndx = 6
	   1155 
	   1156 !  federal funcl - severe
	   1157 
	   1158   130 continue
	   1159       do 132 i = 1, 14
	   1160 	    if (fedfunc .eq. legalffn(i)) go to 135
	   1161   132 continue
	   1162       severe = .true.
	   1163 	  lerr = lerr + 1
	   1164 	  call emsg_c2(1,130,S,ID,County,fedfunc,'Illegal federal funtional class         ') 
	   1165   
	   1166 		 
	   1167 !  lanes ab - severe / warning
	   1168  
	   1169   135 continue
	   1170       if (dir .eq. -1 .and. lanesAB .gt. 0) then

NETPASS1                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 32
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1171         severe = .true.
	   1172   	    lerr = lerr + 1
	   1173  	    call emsg_i(1,135,S,ID,County,lanesAB,'Dir = -1 (B->A) and lanesAB > 0         ') 
	   1174       endif
	   1175 
	   1176       if (dir .ne. -1 .and. lanesAB .gt. 6) then
	   1177         warn = .true.
	   1178   	    lwarn = lwarn + 1
	   1179  	    call emsg_i(1,136,W,ID,County,lanesAB,'LanesAB > 6                             ') 
	   1180 	  endif	   	    
	   1181 
	   1182       if (dir .ne. -1 .and. lanesAB .le. 0) then 
	   1183 	    severe = .true.
	   1184 	    lerr = lerr + 1
	   1185  	    call emsg_i(1,137,S,ID,County,lanesAB,'Dir <> -1 and lanesAB = 0               ') 
	   1186       endif
	   1187 
	   1188 !  lanes ba - severe / warning
	   1189  
	   1190   140 continue
	   1191       if (dir .eq. 1 .and. lanesBA .gt. 0) then
	   1192         severe = .true.
	   1193   	    lerr = lerr + 1
	   1194 		call emsg_i(1,140,S,ID,County,lanesBA,'Dir = 1 (A->B) and lanesBA > 0          ') 
	   1195       endif
	   1196 
	   1197       if (dir .ne. 1 .and. lanesBA .gt. 6) then
	   1198         warn = .true.
	   1199   	    lwarn = lwarn + 1
	   1200  	    call emsg_i(1,141,W,ID,County,lanesBA,'LanesBA > 6                             ') 
	   1201 	  endif	   	    
	   1202 
	   1203       if (dir .ne. 1 .and. lanesBA .le. 0) then 
	   1204 	    severe = .true.
	   1205 	    lerr = lerr + 1
	   1206  	    call emsg_i(1,142,S,ID,County,lanesAB,'Dir <> 1 and lanesBA = 0                ') 
	   1207       endif
	   1208 
	   1209 !  facility type - severe
	   1210 
	   1211   145 continue
	   1212       do 147 i = 1, maxfac
	   1213 	    if (factype .eq. legalfac(i)) go to 150
	   1214   147 continue
	   1215       severe = .true.
	   1216 	  lerr = lerr + 1
	   1217       call emsg_c(1,145,S,ID,County,factype,'Illegal facility type                   ') 
	   1218 
	   1219 
	   1220 !  speed limit - warning
	   1221 !  freeway, ramps, HOV - spl between 45 and 70
	   1222 
	   1223   150 continue
	   1224       if ((funcl.eq.1.or.funcl.eq.2.or.funcl.eq.8.or.funcl.eq.22.or.funcl.eq.23.or.funcl.eq.82.or.funcl.eq.83) &
	   1225 	       .and.(spdlimit.lt.45.or.spdlimit.gt.70)) then
	   1226         warn = .true.
	   1227   	    lwarn = lwarn + 1

NETPASS1                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 33
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1228  	    call emsg_i(1,150,W,ID,County,spdlimit,'High speed facility speed limit warning ') 
	   1229       endif
	   1230 
	   1231 !  thoroughfare - spl between 20 and 55
	   1232 
	   1233 
	   1234       if ((funcl.eq.3.or.funcl.eq.4.or.funcl.eq.5.or.funcl.eq.6.or.funcl.eq.9).and.   &
	   1235 	      (spdlimit.lt.20.or.spdlimit.gt.55)) then
	   1236         warn = .true.
	   1237   	    lwarn = lwarn + 1
	   1238  	    call emsg_i(1,151,W,ID,County,spdlimit,'Thoroughfare speed limit warning        ') 
	   1239       endif
	   1240  
	   1241 !  local - spl between 20 and 55
	   1242 
	   1243       if (funcl.eq.7.and.(spdlimit.lt.20.or.spdlimit.gt.55)) then
	   1244         warn = .true.
	   1245   	    lwarn = lwarn + 1
	   1246 	    call emsg_i(1,152,W,ID,County,spdlimit,'Local street speed limit warning        ') 
	   1247       endif
	   1248 
	   1249 !  transit guideway - spl between 15 and 60
	   1250 
	   1251       if ((funcl.eq.30.or.funcl.eq.40).and.(spdlimit.lt.15.or.spdlimit.gt.60)) then
	   1252         warn = .true.
	   1253   	    lwarn = lwarn + 1
	   1254 	    call emsg_i(1,153,W,ID,County,spdlimit,'Transit guideway speed limit warning    ') 
	   1255       endif
	   1256   
	   1257 !  connector link spl between 10 and 20 
	   1258 
	   1259       if ((funcl.eq.90.or.funcl.eq.92).and.   &
	   1260 	      (spdlimit.lt.10.or.spdlimit.gt.30)) then
	   1261         warn = .true.
	   1262   	    lwarn = lwarn + 1
	   1263 	    call emsg_i(1,154,W,ID,County,spdlimit,'Connector link speed limit warning      ') 
	   1264       endif
	   1265 
	   1266 !  parking - warning - will default to "N"
	   1267 
	   1268   155 continue
	   1269       do 157 i = 1, 5
	   1270 	    if (parking .eq. legalprk(i)) go to 160
	   1271   157 continue
	   1272       warn = .true.
	   1273 	  lwarn = lwarn + 1
	   1274       call emsg_c(1,155,W,ID,County,parking,'Bad on-street parking code              ') 
	   1275 
	   1276 
	   1277 !  pedestrian activity - warning
	   1278 
	   1279   160 continue
	   1280       do 162 i = 1, 4
	   1281 	    if (pedactivty .eq. legalhml(i)) go to 165
	   1282   162 continue
	   1283       warn = .true.
	   1284 	  lwarn = lwarn + 1

NETPASS1                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 34
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1285       call emsg_c(1,160,W,ID,County,pedactivty,'Bad pedestrian activity code            ') 
	   1286 	
	   1287 !  development density - warning
	   1288 
	   1289   165 continue
	   1290       do 167 i = 1, 4
	   1291 	    if (developden .eq. legalhml(i)) go to 170
	   1292   167 continue
	   1293       warn = .true.
	   1294 	  lwarn = lwarn + 1
	   1295       call emsg_c(1,165,W,ID,County,developden,'Bad development density code            ') 
	   1296 
	   1297 !  driveway density - warning
	   1298 
	   1299   170 continue
	   1300       do 172 i = 1, 4
	   1301 	    if (drivewyden .eq. legalhml(i)) go to 175
	   1302   172 continue
	   1303       warn = .true.
	   1304 	  lwarn = lwarn + 1
	   1305       call emsg_c(1,170,W,ID,County,drivewyden,'Bad driveway density code               ') 
	   1306 
	   1307 !  land use code - warning
	   1308 
	   1309   175 continue
	   1310 !      do 177 i = 1, 6
	   1311 !	    if (landuse .eq. legallu(i)) go to 180
	   1312 !  177 continue
	   1313 !      warn = .true.
	   1314 !	  lwarn = lwarn + 1
	   1315 !      call emsg_c(1,175,W,ID,County,landuse,'Bad land use code                       ') 
	   1316 
	   1317 
	   1318 !  lanes at A intersection - fewer than incoming or > 4 more than incoming warning  
	   1319 
	   1320   185 continue
	   1321       if (dir .eq. 1) go to 190
	   1322       Aintlns = A_LeftLns + A_ThruLns + A_RightLns
	   1323       if (Aintlns - lanesBA .ge. 0 .and. Aintlns - lanesBA .le. 4) go to 190
	   1324       warn = .true.
	   1325 	  lwarn = lwarn + 1
	   1326 	  write(fwarnmsg,9185) ID, county, lanesBA, A_LeftLns, A_ThruLns, A_RightLns
	   1327  9185 format('Warning ',i10,i4,' var=',i8,'  Anode IntX/lanesBA mismatch. L/T/R=',3i1,'   NetPass1   185')
	   1328 
	   1329 !  Acontrol  - severe  - uses Actlndx to keep track of control, use default for n arrays
	   1330 
	   1331 
	   1332   190 continue
	   1333       if (dir .eq. 1) go to 195
	   1334       do 192 Actlndx = 1, 6
	   1335 	    if (A_Control .eq. legalcntl(Actlndx)) go to 195
	   1336   192 continue
	   1337       severe = .true.
	   1338 	  lerr = lerr + 1
	   1339       call emsg_c(1,190,S,ID,County,A_Control,'Bad Anode control (default=S (stop))    ') 
	   1340 	  Actlndx = 3
	   1341 

NETPASS1                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 35
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1342 !  A node prohibitions - warning
	   1343 
	   1344   195 continue
	   1345       if (dir .eq. 1) go to 200
	   1346       do 197 i = 1, 6
	   1347 	    if (A_Prohibit .eq. legalprhb(i)) go to 200
	   1348   197 continue
	   1349       warn = .true.
	   1350 	  lwarn = lwarn + 1
	   1351       call emsg_c(1,195,W,ID,County,A_Prohibit,'Bad Anode prohibitions                  ') 
	   1352 
	   1353 
	   1354 !  lanes at B intersection - fewer than incoming or > 4 more than incoming warning  
	   1355 
	   1356   200 continue
	   1357       if (dir .eq. -1) go to 205
	   1358       Bintlns = B_LeftLns + B_ThruLns + B_RightLns
	   1359       if (Bintlns - lanesAB .ge. 0 .and. Bintlns - lanesAB .le. 4) go to 205
	   1360       warn = .true.
	   1361 	  lwarn = lwarn + 1
	   1362 	  write(fwarnmsg,9200) ID, county, lanesAB, B_LeftLns, B_ThruLns, B_RightLns
	   1363  9200 format('Warning ',i10,i4,' var=',i8,'  Bnode IntX/lanesAB mismatch. L/T/R=',3i1,'   NetPass1   200')
	   1364 
	   1365 !  Bcontrol  - severe - uses Bctlndx to keep track of control  - use default for node arrays 
	   1366 
	   1367   205 continue
	   1368       if (dir .eq. -1) go to 210
	   1369       do 207 Bctlndx = 1, 6
	   1370 	    if (B_Control .eq. legalcntl(Bctlndx)) go to 210
	   1371   207 continue
	   1372       severe = .true.
	   1373 	  lerr = lerr + 1
	   1374       call emsg_c(1,205,S,ID,County,B_Control,'Bad Bnode control (default=S (stop))    ') 
	   1375 	  Bctlndx = 3
	   1376 
	   1377 !  B node prohibitions - warning
	   1378 
	   1379   210 continue
	   1380       if (dir .eq. -1) go to 215
	   1381       do 212 i = 1, 6
	   1382 	    if (B_Prohibit .eq. legalprhb(i)) go to 215
	   1383   212 continue
	   1384       warn = .true.
	   1385 	  lwarn = lwarn + 1
	   1386       call emsg_c(1,210,W,ID,County,B_Prohibit,'Bad Bnode prohibitions                  ') 
	   1387 
	   1388 !  Local class 1 - nothing here yet
	   1389 
	   1390   215 continue
	   1391 
	   1392 !  Local class 2 - nothing here yet 
	   1393 
	   1394   220 continue
	   1395 
	   1396 !  Reversible lanes - nothing here yet
	   1397 
	   1398   225 continue

NETPASS1                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 36
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1399 
	   1400 !  Reversible time - nothing here yet 
	   1401 
	   1402   230 continue
	   1403 
	   1404 !  IF no fatal errors yet, add info to nodes arrays 
	   1405 !
	   1406   300 continue
	   1407       if (fatal) go to 400
	   1408 
	   1409 !  nfun - functional class - add regardless of link direction
	   1410 
	   1411       nfun(anode,funndx) = .true.
	   1412 	  nfun(bnode,funndx) = .true.
	   1413 
	   1414 !  control array - fill only if link approaches
	   1415 !  v 2.4 - CENTROID CONNECTORS (funcl 90, 92 (funndx = 20,21)) NOT INCLUDED
	   1416 
	   1417 
	   1418 !  zbr array - count ins and outs for zero balance test
	   1419   
	   1420       if (funndx .eq. 20 .or. funndx .eq. 21) go to 400
	   1421 
	   1422       if (trace(3)) write(fmsgout,9300) Anode, Bnode, Actlndx, Bctlndx, funndx
	   1423  9300 format('Trace(3) Fill node arrays: Nodes: ', 2i6, ' Controls: ',2i6,' fun:',i6)   
	   1424       if (dir .eq. 1) then
	   1425 	    ncntl(Bnode,Bctlndx) = .true.
	   1426 		zbrin(Bnode) = zbrin(Bnode) + 1
	   1427 		zbrout(Anode) = zbrout(Anode) + 1
	   1428  
	   1429 	  else if (dir .eq. -1) then
	   1430 	    ncntl(Anode,Actlndx) = .true.
	   1431 		zbrin(Anode) = zbrin(Anode) + 1
	   1432 		zbrout(Bnode) = zbrout(Bnode) + 1
	   1433  
	   1434  	  else
	   1435 	    ncntl(Bnode,Bctlndx) = .true.
	   1436 		zbrin(Bnode) = zbrin(Bnode) + 1
	   1437 		zbrout(Anode) = zbrout(Anode) + 1
	   1438 	    ncntl(Anode,Actlndx) = .true.
	   1439 		zbrin(Anode) = zbrin(Anode) + 1
	   1440 		zbrout(Bnode) = zbrout(Bnode) + 1      
	   1441 	  endif
	   1442           
	   1443   400 continue
	   1444 
	   1445 !  Get next link record
	   1446 
	   1447       go to 100
	   1448 
	   1449 !  all done, write messages and return to main 
	   1450 
	   1451   800 continue
	   1452       write (msgout, 9800) lin1, ferr, lerr, lwarn 
	   1453       write (fmsgout, 9800) lin1, ferr, lerr, lwarn 
	   1454  9800 format(' Subroutine NetPass1 completed',/                       &
	   1455              '     link records read:         ', i6,/,                & 

NETPASS1                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 37
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1456 			 '     FATAL ERRORS on link file: ', i6,/,                &
	   1457 			 '     SEVERE ERRORS on link file:', i6,/,                &
	   1458 			 '     Warnings on link file      ', i6)
	   1459 
	   1460 
	   1461 
	   1462 	  RETURN
	   1463       END subroutine NetPass1


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 _OPT                                    13 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  7 _PARAM                                  17 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  8 _NARRAY                            1050000 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  9 _LEGALVAL                              701 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
 10 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated              1182761


ENTRY POINTS

 Address      Name    
                      
  4-000024E0  NETPASS1


VARIABLES

 Address      Type  Name          Address      Type  Name          Address      Type  Name          Address      Type  Name        
                                                                                                                                   
  1-00000588  I*4   ACTLNDX        1-00000628  I*4   B_THRULNS      5-00000008  I*4   FLOOKUP        1-00000658  I*4   LOCCLASS1   
      **      I*4   AINTLNS        7-00000008  I*4   CAPYEAR        5-00000018  I*4   FMSGOUT        1-00000654  I*4   LOCCLASS2   
  1-00000664  I*4   ANODE          1-0000066C  I*4   COUNTY         5-0000001C  I*4   FNERR          2-000094B4  I*4   LWARN       
  1-000005FC  CHAR  A_CONTROL      1-00000608  CHAR  DEVELOPDEN     5-00000004  I*4   FNETIN         9-00000004  I*4   MAXAT       
  1-00000638  I*4   A_LEFTLNS      1-00000648  I*4   DIR            5-0000000C  I*4   FNETOUT        9-00000008  I*4   MAXFAC      
  1-00000650  I*4   A_OPPFUNCL     1-00000604  CHAR  DRIVEWYDEN     5-00000030  I*4   FRTNCD         9-00000000  I*4   MAXFUNCL    
  1-000005F8  CHAR  A_PROHIBIT     2-000094A0  CHAR  F              1-0000065C  I*4   FUNCL          2-000094B0  I*4   NERR        
  1-00000630  I*4   A_RIGHTLNS     1-00000614  CHAR  FACTYPE            **      I*4   FUNNDX         2-000094AC  I*4   NWARN       
  1-00000634  I*4   A_THRULNS          **      L*1   FATAL          5-00000014  I*4   FWARNMSG       1-000005DC  R*4   O_CAP1AB    
  7-0000000C  I*4   BASEYEAR       5-00000028  I*4   FATYPEIN           **      I*4   I              1-000005D8  R*4   O_CAP1BA    
  1-00000584  I*4   BCTLNDX        5-00000020  I*4   FCNTLOUT       1-00000670  I*4   ID             1-0000059C  R*4   O_PKLOCLUAB 
      **      I*4   BINTLNS        5-00000000  I*4   FCNTRLIN       1-0000058C  I*4   J              1-00000598  R*4   O_PKLOCLUBA 
  1-00000660  I*4   BNODE          5-00000024  I*4   FDCTOUT        1-00000600  CHAR  LANDUSE        1-00000594  R*4   O_PKXPRLUAB 
  1-000005F4  CHAR  B_CONTROL      1-000005E8  CHAR  FEDFUNC        1-00000644  I*4   LANESAB        1-00000590  R*4   O_PKXPRLUBA 
  1-0000062C  I*4   B_LEFTLNS      1-000005E0  CHAR  FEDFUNC_AQ     1-00000640  I*4   LANESBA        1-000005C4  R*4   O_TTPKASSNAB
  1-0000064C  I*4   B_OPPFUNCL     2-000094A8  I*4   FERR           1-00000618  R*4   LENGTH         1-000005C0  R*4   O_TTPKASSNBA
  1-000005F0  CHAR  B_PROHIBIT     5-00000010  I*4   FERRMSG        2-000094B8  I*4   LERR           1-000005D4  R*4   O_TTPKESTAB 
  1-00000624  I*4   B_RIGHTLNS     5-0000002C  I*4   FGUIDEWAYIN    2-000094BC  I*4   LIN1           1-000005D0  R*4   O_TTPKESTBA 

NETPASS1                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 38
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

 Address      Type  Name          Address      Type  Name          Address      Type  Name          Address      Type  Name        
                                                                                                                                   
  1-000005BC  R*4   O_TTPKLOCAB    1-000005A4  R*4   O_TTPKSKSAB    1-0000061C  I*4   REVLN          7-00000004  I*4   SPDCAP      
  1-000005B8  R*4   O_TTPKLOCBA    1-000005A0  R*4   O_TTPKSKSBA    1-000005EC  CHAR  REVTIME        1-0000063C  I*4   SPDLIMIT    
  1-000005AC  R*4   O_TTPKNSTAB    1-000005B4  R*4   O_TTPKXPRAB    7-00000010  L*1   RTNSPD         1-00000620  I*4   STATE       
  1-000005A8  R*4   O_TTPKNSTBA    1-000005B0  R*4   O_TTPKXPRBA    7-00000000  I*4   RUNYEAR        1-00000668  I*4   TAZ         
  1-000005CC  R*4   O_TTPKPREVAB   1-00000610  CHAR  PARKING        2-000094C0  CHAR  S              2-000094C4  CHAR  W           
  1-000005C8  R*4   O_TTPKPREVBA   1-0000060C  CHAR  PEDACTIVTY         **      L*1   SEVERE         2-000094A4  L*1   WARN        


ARRAYS

 Address      Type  Name             Bytes  Dimensions

  9-00000173  CHAR  ATNAME              50  (5)
  9-00000259  CHAR  CNTLNAME            60  (6)
  9-000001D7  CHAR  FACNAME             90  (9)
  9-000000A1  CHAR  FUNNAME            210  (21)
  9-00000295  CHAR  HMLNAME             40  (4)
  9-00000069  CHAR  LEGALCNTL            7  (7)
  9-00000060  CHAR  LEGALFAC             9  (9)
  9-00000070  CHAR  LEGALFFN            28  (14)
  9-0000000C  I*4   LEGALFUN            84  (21)
  9-00000091  CHAR  LEGALHML             4  (4)
  9-00000095  CHAR  LEGALLU              6  (6)
  9-0000009B  CHAR  LEGALPRHB            6  (6)
  9-0000008C  CHAR  LEGALPRK             5  (5)
  6-0000000A  L*1   LIST                 3  (3)
  8-000D4670  L*1   NCNTL           180000  (30000, 6)
  8-0003A980  L*1   NFUN            630000  (30000, 21)
  9-000001A5  CHAR  PARKNAME            50  (5)
  9-00000231  CHAR  PRHBNAME            40  (4)
  6-00000000  L*1   TRACE               10  (10)
  8-00000000  I*4   ZBRIN           120000  (30000)
  8-0001D4C0  I*4   ZBROUT          120000  (30000)


LABELS

 Address      Label  Address      Label  Address      Label  Address      Label  Address      Label  Address      Label
                                                                                                                       
      **      100     4-000031F4  130     4-000038DF  155         **      172     4-00003D26  200         **      225  
      **      105         **      132         **      157         **      175     4-00003E38  205         **      230  
  4-00002F8A  110     4-000032B7  135     4-00003963  160     4-00003ACE  185         **      207     4-00003F7E  300  
  4-0000300D  115     4-000033FD  140         **      162     4-00003BE0  190     4-00003EFF  210         **      400  
  4-00003074  120     4-00003543  145     4-000039DC  165         **      192         **      212         **      800  
  4-000030DB  125         **      147         **      167     4-00003CA7  195         **      215                      
      **      127     4-0000362B  150     4-00003A55  170         **      197         **      220                      

NETPASS1                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 39
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1464 
	   1465 
	   1466 
	   1467 !  ************************************************************************************
	   1468 
	   1469       subroutine checkN(fatal)   
	   1470 
	   1471 !  Check for illegal combinations in node array 
	   1472 !  Max can be changed by altering size of arrays                                                                    
	   1472  
	   1473 
	   1474 ! files
	   1475                                                                      
	   1476       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	   1477 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	   1478 				   fcntlout, fdctout, fatypein, fguidewayin, frtncd
	   1479       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	   1480 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        &
	   1481 				   fatypein, fguidewayin, frtncd 
	   1482 
	   1483       LOGICAL*1    TRACE(10), LIST(3)                                      
	   1484       COMMON /OPT/ TRACE,LIST                                          
	   1485          
	   1486 	  INTEGER*4    RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR   
	   1487 	  LOGICAL*1    RTNSPD 
	   1488 	  COMMON /PARAM/ RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR, RTNSPD             
	   1489                          
	   1490 ! node arrays
	   1491 
	   1492 	  integer*4       zbrin(30000), zbrout(30000)
	   1493 	  logical*1       nfun(30000,21), ncntl(30000,6)
	   1494 
	   1495       COMMON /narray/ zbrin, zbrout, nfun, ncntl
	   1496 
	   1497 !  characteristics variable values
	   1498 
	   1499 
	   1500 	  integer*4    maxfuncl, maxat, maxfac, legalfun(21)
	   1501 	  character*1  legalfac(9), legalcntl(7),  legalprk(5),                      &
	   1502 	               legalhml(4), legallu(6), legalprhb(6)
	   1503 
	   1504 	  character*2  legalffn(14)
	   1505 
	   1506 	  character*10 funname(21), atname(5), parkname(5),                         & 
	   1507 	               facname(9), prhbname(4), cntlname(6), hmlname(4) 
	   1508 	
	   1509 	  COMMON /legalval/ maxfuncl, maxat, maxfac,                                &
	   1510 	                    legalfun, legalfac, legalcntl,                          & 
	   1511 	                    legalffn,  legalprk, legalhml,                          &
	   1512 						legallu, legalprhb,                                     &
	   1513 						funname, atname, parkname,                              &
	   1514 						facname, prhbname,cntlname,hmlname                               
	   1515 
	   1516 
	   1517 
	   1518 
	   1519 !  Arguments

CHECKN                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 40
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1520 
	   1521 	  logical*1			fatal 
	   1522 
	   1523 !  Nodeerrors file
	   1524 
	   1525       integer*4			nendx1, nendx2, nefun1, nefun2
	   1526 	  character*30		nedesc
	   1527  
	   1528 !  Local variables
	   1529 
	   1530       integer*4			inerr(100,4) /400*0/, pfun(21) 
	   1531 	  integer*4			maxcntl /6/
	   1532 	  integer*4			ncnt1 /0/, ncnt2 /0/,  necnt /0/,                     & 
	   1533 						errcnt /0/, warncnt /0/,                              &
	   1534 						i,j, ei, ej, n, nc
	   1535       character*1       pcntl(6), blank /' '/
	   1536 	  character*30		cnerr(100) /100*''/
	   1537 	  logical*1			othcntl, totcntl
	   1538       logical*1			countit /.false./
	   1539 	  logical*1         severe /.false./, warn /.false./
	   1540       
	   1541 
	   1542 !			 Functional class
	   1543 !			funndx	 funcl
	   1544 !				 1	  1:	Freeway
	   1545 !				 2	  2:	Expressway
	   1546 !				 3	  3:	Class II major
	   1547 !				 4	  4:	Major tfare
	   1548 !				 5	  5:	Minor tfare
	   1549 !				 6	  6:	Collector str
	   1550 !				 7	  7:	Local Street
	   1551 !				 8	  8:	Ramp
	   1552 !				 9	  9:	Frontage Road
	   1553 !				10	 22:	HOV 2+ freeway
	   1554 !				11	 23:	HOV 3+ freeway
	   1555 !               12   24:    HOV 2+ arterial
	   1556 !               13   25:    HOV 3+ arterial
	   1557 !				14	 30:	Rail (Tran Only)
	   1558 !				15	 40:	Busway(TranOnly)
	   1559 !				16	 82:	Hwy to HOV2+
	   1560 !				17	 83:	Hwy to HOV3+
	   1561 !				18	 84:	Hwy to Transit 
	   1562 !               19   85:    Station walk
	   1563 !				20	 90:	Centroid connect
	   1564 !				21	 92:	Cenconn Transit
	   1565 !                                                                       
	   1566 !  CheckN Entry point                                                   
	   1567 
	   1568       IF (TRACE(1)) print 9001                                                      
	   1569  9001 format('Trace(1):  Subroutine CheckN entered')             
	   1570 
	   1571 
	   1572 !  Read noderrors file, put into array.  Current max 100 errors
	   1573 
	   1574   300 continue
	   1575       read(fnerr,9300,end=400) nendx1, nendx2, nefun1, nefun2, nedesc
	   1576  9300 format(4i8,a30)

CHECKN                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 41
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1577       if (necnt .gt. 100) go to 380
	   1578 	  necnt = necnt + 1
	   1579 	  inerr(necnt,1) = nendx1
	   1580 	  inerr(necnt,2) = nendx2
	   1581 	  inerr(necnt,3) = nefun1
	   1582 	  inerr(necnt,4) = nefun2
	   1583 	  cnerr(necnt) = nedesc
	   1584       go to 300
	   1585 
	   1586 !  Too many error conditions - cut off at 100.  Keep reading
	   1587 
	   1588   380 continue
	   1589       write (fwarnmsg,9380) nefun1, nefun2, nedesc 
	   1590  9380 format(' Warning  Max error cards exceeded(100), card ignored', 2i4,1x,a30)
	   1591     go to 300
	   1592 
	   1593 
	   1594 !  Nodeerrors file in, print array
	   1595 
	   1596   400 continue
	   1597       write(fmsgout,9400) necnt
	   1598  9400 format(' ',////,'Node Errors input file complete, records=',i4,/  &
	   1599              '    Funcl indices     Funcl nos.    Description')
	   1600 
	   1601       do 410 ei = 1, necnt
	   1602 	    write(fmsgout,9410) ei, (inerr(ei,ej),ej=1,4), cnerr(ei)
	   1603  9410   format(i3,1x,2i6,4x,2i6,4x,a30)
	   1604   410 continue
	   1605 	   
	   1606 !  Big loop through node arrays. 
	   1607 !  First (500s) - go through nfun array and check for illegal pairs
	   1608 
	   1609   500 continue
	   1610       do 690 n = 1, 30000
	   1611 
	   1612 		frst = 1
	   1613 		countit = .false.
	   1614 
	   1615 ! get first node in nfun
	   1616    
	   1617   510    continue
	   1618          if (.not.(nfun(n,frst))) go to 570
	   1619        
	   1620 ! found first node	
	   1621 
	   1622          countit = .true.
	   1623          if (frst .eq. maxfuncl) go to 580 
	   1624          scnd = frst + 1
	   1625 		 
	   1626 ! look for second node
	   1627 		 		  
	   1628   520    continue
	   1629 		 if (.not.(nfun(n,scnd))) go to 560
	   1630 
	   1631 ! got two nodes - test against node error arrays.  
	   1632 ! pgm does not require nodeerror to be sorted, so test against both
	   1633 ! keep checking rest of file even if error found

CHECKN                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 42
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1634 
	   1635     
	   1636   530   continue
	   1637         do 540 ei = 1, necnt
	   1638 		  if ((frst .eq. inerr(ei,1) .and. scnd .eq. inerr(ei,2)) .or.       &
	   1639 		      (scnd .eq. inerr(ei,1) .and. frst .eq. inerr(ei,2))) then
	   1640 			warn = .true.
	   1641 			warncnt = warncnt + 1
	   1642 			write (fwarnmsg,9530) n, inerr(ei,3), inerr(ei,4), cnerr(ei)
	   1643  9530       format('Warning',i10, 2i4,1x, a30, ' Illegal funcl pair   CheckN     530')
	   1644 
	   1645             go to 560
	   1646           endif
	   1647   540   continue
	   1648 
	   1649 
	   1650 ! advance scnd counter - go back to 520
	   1651 
	   1652   560   continue
	   1653         scnd = scnd + 1
	   1654 		if (scnd .gt. maxfuncl) go to 570
	   1655 		go to 520
	   1656  
	   1657 ! advance frst counter - go back to top
	   1658 
	   1659   570   continue
	   1660         frst = frst + 1
	   1661 		if (frst .gt. maxfuncl) go to 580
	   1662 	    go to 510
	   1663 
	   1664 ! done, advance counter if any node found
	   1665 	    
	   1666   580   continue
	   1667         if (countit) ncnt1 = ncnt1 + 1
	   1668 
	   1669 ! end of loop through nfun array
	   1670 		   
	   1671   590 continue                                                                              
	   1672 
	   1673 ! check compatability of controls, issue warnings
	   1674 ! Controls
	   1675 ! 1 T  Through
	   1676 ! 2 L  Signal
	   1677 ! 3 S  Stop
	   1678 ! 4 F  4 way
	   1679 ! 5 Y  Yield
	   1680 ! 6 R  Round about
	   1681 !
	   1682 !  stop with no through
	   1683 
	   1684       if (ncntl(n,3) .and. .not.ncntl(n,1)) then
	   1685 	    warncnt = warncnt + 1
	   1686         write (fwarnmsg, 9610) n
	   1687  9610   format('Warning Node',i10,' Stop sign and no through',24x,'CheckN     610')
	   1688 
	   1689       endif
	   1690 	  

CHECKN                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 43
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1691 !  yield with no through
	   1692 
	   1693       if (ncntl(n,5) .and. .not.ncntl(n,1)) then
	   1694 	    warncnt = warncnt + 1
	   1695         write (fwarnmsg, 9620) n
	   1696  9620   format('Warning Node',i10,' Yield and no through',28x,'CheckN     620')
	   1697 
	   1698       endif
	   1699 
	   1700 ! signal - all should be signal
	   1701 
	   1702       othcntl = ncntl(n,1) .and. ncntl(n,3) .and. ncntl(n,4) .and. ncntl(n,5) .and. ncntl(n,6)
	   1703       if (ncntl(n,2) .and. othcntl) then
	   1704 	    warncnt = warncnt + 1
	   1705         write (fwarnmsg, 9630) n, (ncntl(n,i),i=1,6)
	   1706  9630   format('Warning Node',i10,' Signal AND other controls ',6(a1,1x),10x,'CheckN     630')
	   1707 
	   1708 	  endif
	   1709 
	   1710 ! 4 way - all should be 4 way 
	   1711 
	   1712       othcntl = ncntl(n,1) .and. ncntl(n,2) .and. ncntl(n,3) .and. ncntl(n,5) .and. ncntl(n,6)
	   1713       if (ncntl(n,4) .and. othcntl) then
	   1714 	    warncnt = warncnt + 1
	   1715         write (fwarnmsg, 9640) n, (ncntl(n,i),i=1,6)
	   1716  9640   format('Warning Node',i10,'  4way stop AND other controls ',6(a1,1x),7x,'CheckN     640')
	   1717  
	   1718 	  endif
	   1719 
	   1720 ! round about - all should be round about
	   1721 
	   1722       othcntl = ncntl(n,1) .and. ncntl(n,2) .and. ncntl(n,3) .and. ncntl(n,4) .and. ncntl(n,5)
	   1723       if (ncntl(n,6) .and. othcntl) then
	   1724 	    warncnt = warncnt + 1
	   1725         write (fwarnmsg, 9650) n, (ncntl(n,i),i=1,6)
	   1726  9650   format(' Warning Node',i10,'  Roundabout AND other controls ',6(a1,1x),6x,'CheckN     650')
	   1727 	  endif
	   1728 
	   1729 !  counter
	   1730 
	   1731       othcntl = ncntl(n,1) .and. ncntl(n,2) .and. ncntl(n,3) .and. ncntl(n,4) .and. &
	   1732 	            ncntl(n,5) .and. ncntl(n,6)
	   1733       if (othcntl) ncnt2 = ncnt2 + 1 
	   1734 
	   1735 !  write node control file
	   1736 
	   1737   660 continue	
	   1738       if (.not.countit) go to 690
	   1739       do 670 i = 1, maxcntl
	   1740 	    if (ncntl(n,i)) then
	   1741 		  pcntl(i) = legalcntl(i)
	   1742 		else
	   1743           pcntl(i) = blank
	   1744         endif
	   1745   670 continue
	   1746       do 680 i = 1, maxfuncl
	   1747         if (nfun(n,i)) then

CHECKN                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 44
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1748 		  pfun(i) = legalfun(i)
	   1749         else
	   1750           pfun(i) = 0
	   1751         endif
	   1752   680 continue
	   1753       write(fcntlout,9680) n, (pcntl(i),i=1,maxcntl), (pfun(i),i=1,maxfuncl)
	   1754  9680 format(i8,6(1x,a1),20i3)
	   1755 
	   1756   
	   1757    	    	    
	   1758 !  end of big loop
	   1759 
	   1760   690 continue
	   1761 
	   1762 
	   1763 
	   1764 
	   1765 !  write messages and return
	   1766 
	   1767       write(msgout,9500) ncnt1, ncnt2, errcnt, warncnt
	   1768       write(fmsgout,9500) ncnt1, ncnt2, errcnt, warncnt
	   1769  9500 format('CheckN complete',/                                                 & 
	   1770              '  Nodes in nfun (regardeless of direction): ',i6,/                 &
	   1771 			 '  Nodes in ncntl (approach required):       ',i6,/                 &
	   1772 			 '  Severe errors in functional class check:  ',i6,/                 & 
	   1773 			 '  Warnings in control check                 ',i6)	              
	   1774                                 
	   1775 !                                                                       
	   1776        
	   1777       RETURN                                                            
	   1778       END Subroutine CheckN                                                               

CHECKN                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 45
                                                                 9-Dec-2011 10:07:43  source\capspd.F90



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 _OPT                                    13 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  7 _PARAM                                  17 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  8 _NARRAY                            1050000 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  9 _LEGALVAL                              701 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
 10 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated              1182761


ENTRY POINTS

 Address      Name  
                    
  4-00004348  CHECKN


VARIABLES

 Address      Type  Name         Address      Type  Name         Address      Type  Name         Address      Type  Name       
                                                                                                                               
  7-0000000C  I*4   BASEYEAR      5-00000010  I*4   FERRMSG       9-00000004  I*4   MAXAT         1-000004F8  I*4   NENDX1     
  2-0000823C  CHAR  BLANK         5-0000002C  I*4   FGUIDEWAYIN   2-00008254  I*4   MAXCNTL       1-000004F4  I*4   NENDX2     
  7-00000008  I*4   CAPYEAR       5-00000008  I*4   FLOOKUP       9-00000008  I*4   MAXFAC        1-000004D8  L*1   OTHCNTL    
      **      L*1   COUNTIT       5-00000018  I*4   FMSGOUT       9-00000000  I*4   MAXFUNCL      7-00000010  L*1   RTNSPD     
      **      I*4   EI            5-0000001C  I*4   FNERR             **      I*4   N             7-00000000  I*4   RUNYEAR    
  1-000004E8  I*4   EJ            5-00000004  I*4   FNETIN        1-000004E4  I*4   NC                **      I*4   SCND       
  2-00008244  I*4   ERRCNT        5-0000000C  I*4   FNETOUT       2-00008250  I*4   NCNT1         2-0000825C  L*1   SEVERE     
      **      L*1   FATAL             **      I*4   FRST          2-0000824C  I*4   NCNT2         7-00000004  I*4   SPDCAP     
  5-00000028  I*4   FATYPEIN      5-00000030  I*4   FRTNCD        2-00008248  I*4   NECNT         1-000004D4  L*1   TOTCNTL    
  5-00000020  I*4   FCNTLOUT      5-00000014  I*4   FWARNMSG      1-00000500  CHAR  NEDESC        2-00008258  L*1   WARN       
  5-00000000  I*4   FCNTRLIN          **      I*4   I             1-000004F0  I*4   NEFUN1        2-00008240  I*4   WARNCNT    
  5-00000024  I*4   FDCTOUT       1-000004FC  I*4   J             1-000004EC  I*4   NEFUN2                                     


ARRAYS

 Address      Type  Name             Bytes  Dimensions

  9-00000173  CHAR  ATNAME              50  (5)
  2-00008260  CHAR  CNERR             3000  (100)
  9-00000259  CHAR  CNTLNAME            60  (6)
  9-000001D7  CHAR  FACNAME             90  (9)
  9-000000A1  CHAR  FUNNAME            210  (21)
  9-00000295  CHAR  HMLNAME             40  (4)
  2-00008E18  I*4   INERR             1600  (100, 4)
  9-00000069  CHAR  LEGALCNTL            7  (7)

CHECKN                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 46
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

  9-00000060  CHAR  LEGALFAC             9  (9)
  9-00000070  CHAR  LEGALFFN            28  (14)
  9-0000000C  I*4   LEGALFUN            84  (21)
  9-00000091  CHAR  LEGALHML             4  (4)
  9-00000095  CHAR  LEGALLU              6  (6)
  9-0000009B  CHAR  LEGALPRHB            6  (6)
  9-0000008C  CHAR  LEGALPRK             5  (5)
  6-0000000A  L*1   LIST                 3  (3)
  8-000D4670  L*1   NCNTL           180000  (30000, 6)
  8-0003A980  L*1   NFUN            630000  (30000, 21)
  9-000001A5  CHAR  PARKNAME            50  (5)
  1-000004DC  CHAR  PCNTL                6  (6)
  1-00000520  I*4   PFUN                84  (21)
  9-00000231  CHAR  PRHBNAME            40  (4)
  6-00000000  L*1   TRACE               10  (10)
  8-00000000  I*4   ZBRIN           120000  (30000)
  8-0001D4C0  I*4   ZBROUT          120000  (30000)


LABELS

 Address      Label  Address      Label  Address      Label  Address      Label  Address      Label  Address      Label
                                                                                                                       
      **      300         **      410     4-00004723  520     4-0000496B  560         **      590     4-00004DA7  680  
      **      380     4-0000469F  500         **      530     4-00004984  570         **      660     4-00004E8A  690  
      **      400     4-000046EB  510         **      540     4-000049AC  580     4-00004D67  670                      

CHECKN                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 47
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1779 
	   1780 !***************************************************************************************                            
	   1780                                            
	   1781                                                                                                              
	   1782       SUBROUTINE ZBR(fatal, severe)                                                 
	   1783 !                                                                       
	   1784 !     SUBROUTINE TO REPORT ZERO BALANCE ERRORS FROM N ARRAY             
	   1785 
	   1786 ! parameters
	   1787 
	   1788 	  logical*1      fatal, severe
	   1789 
	   1790 ! files
	   1791                                                                      
	   1792       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	   1793 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	   1794 				   fcntlout, fdctout, fatypein, fguidewayin, frtncd
	   1795       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	   1796 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        &
	   1797 				   fatypein, fguidewayin, frtncd
	   1798 
	   1799       LOGICAL*1    TRACE(10), LIST(3)                                      
	   1800       COMMON /OPT/ TRACE,LIST                                          
	   1801          
	   1802 	  INTEGER*4    RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR    
	   1803 	  LOGICAL*1    RTNSPD 
	   1804 	  COMMON /PARAM/ RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR, RTNSPD             
	   1805                                                  
	   1806 ! node arrays
	   1807 
	   1808       common /narray/ zbrin, zbrout, nfun, ncntl
	   1809 	  integer*4       zbrin(30000), zbrout(30000)
	   1810 	  logical*1       nfun(30000,21), ncntl(30000,6)
	   1811 
	   1812                                                                        
	   1813 !  local variables                                       
	   1814                                                                        
	   1815       INTEGER n,ncnt /0/, zbrerr /0/                                   
	   1816                                                                        
	   1817 !  Entry
	   1818 
	   1819       IF (TRACE(1)) print 9001                                                      
	   1820  9001 format('Trace(1):  Subroutine ZBR entered')             
	   1821 
	   1822                                                                         
	   1823 !  LOOP THROUGH ALL NODES                                               
	   1824                                                                        
	   1825       DO 790 n=1,30000                                                   
	   1826                                                                        
	   1827 !   check counts of ins and outs if both zero, node is not in network                     
	   1828                                                                        
	   1829         if (zbrin(n) .eq. 0 .and. zbrout(n) .eq. 0) go to 790
	   1830 
	   1831 !   node is in network, if both counts > 0, node is OK
	   1832 
	   1833         ncnt = ncnt + 1 
	   1834         if (zbrin(n) .gt. 0 .and. zbrout(n) .gt. 0) go to 790

ZBR                             Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 48
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1835 
	   1836 !   ins and no outs or other way around - error
	   1837 
	   1838         zbrerr = zbrerr + 1
	   1839  		fatal = .true.  
	   1840         write (ferrmsg, 9700) n, zbrin(n), zbrout(n) 
	   1841  9700   format('FATAL ',i10,8x, ' Node ins-outs dont balance, ins:',i2,   &
	   1842                ' outs:',i2,10x,'ZBR        700')
	   1843 
	   1844   790 continue    
	   1845 !  write messages and return
	   1846 
	   1847       write(msgout,9790) ncnt, zbrerr
	   1848       write(fmsgout,9790) ncnt, zbrerr
	   1849  9790 format('ZBR complete',/                                          & 
	   1850              '  Nodes in arrays: (directional): ',i6,/                 &
	   1851 			 '  Zero balance errors:            ',i6)	              
	   1852 
	   1853       RETURN                                                            
	   1854       END Subroutine                                                    


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 _OPT                                    13 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  7 _PARAM                                  17 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  8 _NARRAY                            1050000 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  9 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated              1182060


ENTRY POINTS

 Address      Name
                  
  4-00000000  ZBR 


VARIABLES

 Address      Type  Name         Address      Type  Name         Address      Type  Name         Address      Type  Name       
                                                                                                                               
  7-0000000C  I*4   BASEYEAR      5-00000024  I*4   FDCTOUT       5-00000004  I*4   FNETIN        7-00000010  L*1   RTNSPD     
  7-00000008  I*4   CAPYEAR       5-00000010  I*4   FERRMSG       5-0000000C  I*4   FNETOUT       7-00000000  I*4   RUNYEAR    
      **      L*1   FATAL         5-0000002C  I*4   FGUIDEWAYIN   5-00000030  I*4   FRTNCD            **      L*1   SEVERE     
  5-00000028  I*4   FATYPEIN      5-00000008  I*4   FLOOKUP       5-00000014  I*4   FWARNMSG      7-00000004  I*4   SPDCAP     
  5-00000020  I*4   FCNTLOUT      5-00000018  I*4   FMSGOUT       1-00000078  I*4   N             2-00005D18  I*4   ZBRERR     
  5-00000000  I*4   FCNTRLIN      5-0000001C  I*4   FNERR         2-00005D1C  I*4   NCNT                                       


ZBR                             Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 49
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

ARRAYS

 Address      Type  Name          Bytes  Dimensions

  6-0000000A  L*1   LIST              3  (3)
  8-000D4670  L*1   NCNTL        180000  (30000, 6)
  8-0003A980  L*1   NFUN         630000  (30000, 21)
  6-00000000  L*1   TRACE            10  (10)
  8-00000000  I*4   ZBRIN        120000  (30000)
  8-0001D4C0  I*4   ZBROUT       120000  (30000)


LABELS

 Address      Label
                   
      **      790  

ZBR                             Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 50
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1855 
	   1856 !****************************************************************************************
	   1857 
	   1858       SUBROUTINE lookupin(fatal, severe) 
	   1859 
	   1860 ! Subroutine to read lookup tables, build arrays 
	   1861 
	   1862 ! files
	   1863                                                                      
	   1864       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	   1865 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	   1866 				   fcntlout , fdctout,fatypein, fguidewayin, frtncd
	   1867       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	   1868 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        &
	   1869 				   fatypein, fguidewayin, frtncd
	   1870 
	   1871       LOGICAL*1    TRACE(10), LIST(3)                                      
	   1872       COMMON /OPT/ TRACE,LIST                                          
	   1873          
	   1874 	  INTEGER*4    RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR    
	   1875 	  LOGICAL*1    RTNSPD 
	   1876 	  COMMON /PARAM/ RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR, RTNSPD             
	   1877 
	   1878 ! lookup arrays
	   1879 
	   1880 
	   1881       Real*4     LnCap1hr(21,5), Speederfac(21,5), CycLen(21,5),       & 
	   1882 	             PkSpFac(21,5), LocTrnSpFr(21,5), XprTrnSpFr(21,5),    & 
	   1883 				 LocTrnSpPk(21,5), XprTrnSpPk(21,5), GrnPctFr(21,21),  &
	   1884 				 Cap_Park(5), Cap_Ped(4), SpFr_Ped(4),                 &
	   1885 				 Cap_DevDn(4), SpFr_DevDn(4), Cap_Drvwy(4),            &
	   1886 				 SpFr_Drvwy(4), Cap_FacLn(9,3), ZVD_cntl(6),           &
	   1887 				 Delay_prhb(6), Delay_fac(9), Delay_TLns(6),           &
	   1888 				 Delay_Prg(2), Cap_Cntl(6),                            &
	   1889 				 cappkfac, capmidfac, capnitefac,                      &
	   1890 				 impwttime, impwtdist, minspeed,                       &
	   1891 				 alpha(21,5,2), beta(21,5,2)
	   1892 				 
	   1893       COMMON /LOOKUP/ LnCap1hr, Speederfac, CycLen,                    &
	   1894 	  			 PkSpFac, LocTrnSpFr, XprTrnSpFr,                      &
	   1895 				 LocTrnSpPk, XprTrnSpPk, GrnPctFr,                     &
	   1896 				 Cap_Park, Cap_Ped, SpFr_Ped,                          &
	   1897 				 Cap_DevDn,SpFr_DevDn, Cap_Drvwy,                      &
	   1898 				 SpFr_Drvwy, Cap_FacLn, ZVD_cntl,                      &  
	   1899 				 Delay_prhb, Delay_fac, Delay_TLns,                    & 
	   1900 				 Delay_Prg, Cap_Cntl,                                  &
	   1901 				 cappkfac, capmidfac, capnitefac,                      &
	   1902 				 impwttime, impwtdist, minspeed, alpha, beta
	   1903 
	   1904 !  characteristics variable values
	   1905 
	   1906 
	   1907 	  integer*4    maxfuncl, maxat, maxfac, legalfun(21)
	   1908 	  character*1  legalfac(9), legalcntl(7),  legalprk(5),                      &
	   1909 	               legalhml(4), legallu(6), legalprhb(6)
	   1910 
	   1911 	  character*2  legalffn(14)

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 51
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1912 
	   1913 	  character*10 funname(21), atname(5), parkname(5),                         & 
	   1914 	               facname(9), prhbname(4), cntlname(6), hmlname(4) 
	   1915 	
	   1916 	  COMMON /legalval/ maxfuncl, maxat, maxfac,                                &
	   1917 	                    legalfun, legalfac, legalcntl,                          & 
	   1918 	                    legalffn,  legalprk, legalhml,                          &
	   1919 						legallu, legalprhb,                                     &
	   1920 						funname, atname, parkname,                              &
	   1921 						facname, prhbname,cntlname,hmlname                               
	   1922 
	   1923 
	   1924 
	   1925 ! arguments
	   1926 
	   1927       logical*1 fatal, severe
	   1928 
	   1929 	   
	   1930 ! local variables
	   1931      
	   1932 	  integer*4   i, j, fin, ain, ivar1, ivar2 
	   1933       real*4  rin(21) /21*0./, fac1, fac2
	   1934       character*10  cin, varname, eos /'      9999'/, linkid /'      link'/
	   1935 	  character*1 var1, var2
	   1936 
	   1937 	  integer*4 wcnt /0/ 
	   1938 
	   1939 	  integer*4  funndx, atndx, facndx
	   1940 
	   1941 	  logical*1  warn /.false./
	   1942       
	   1943       character*80 lkupdate
	   1944 
	   1945       IF (TRACE(1)) print 9001                                                      
	   1946  9001 format('Trace(1):  Subroutine LookupIn entered')             
	   1947 
	   1948  
	   1949 !  Look up file contains several tables listed sequentially separated by 9999
	   1950 !  Read a record - if first value looks OK, back up and read rest of record
	   1951 !  Start with funcl * area type (8 variables)
	   1952 
	   1953 	  read(flookup,9010) lkupdate
	   1954  9010 format(a80)
	   1955 
	   1956       write (msgout, 9020) lkupdate 
	   1957       write (fmsgout, 9020) lkupdate 
	   1958  9020 format(/'CAPSPD Look-up tables : version'/a80//)
	   1959 
	   1960 
	   1961   100 continue
	   1962       do 150 i = 1, maxfuncl * maxat
	   1963 
	   1964 	    read(flookup,9110) fin, ain, (rin(j),j=1,8)
	   1965  9110   format(2i10,f10.0,f10.3,f10.3,5f10.3)
	   1966 
	   1967         if (trace(5)) write(fmsgout,9111) fin, ain, (rin(j),j=1,8)
	   1968  9111   format('Trace(5) 111: funcl x areatp: ', 2i4, f10.0, f10.3, f10.0, 5f10.3)

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 52
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   1969 
	   1970         do 115 funndx = 1, maxfuncl
	   1971 	      if (fin .eq. legalfun(funndx)) go to 120
	   1972   115   continue
	   1973         warn = .true.
	   1974 	    wcnt = wcnt + 1
	   1975 	    write(fwarnmsg,9115) fin, ain, (rin(j), j= 1,8)
	   1976  9115   format('Warning Lookup 115: bad funcl lookup  ', 2f6.0, 8f8.2)
	   1977         go to 150
	   1978 
	   1979   120   continue
	   1980         do 125 atndx = 1, maxat
	   1981 	      if (ain .eq. atndx) go to 130
	   1982   125   continue
	   1983         warn = .true.
	   1984 	    wcnt = wcnt + 1
	   1985 	    write(fmsgout,9125) fin, ain, (rin(j), j= 1,8)
	   1986  9125   format('Warning Lookup 125: BAD areatype lookup' ,2f6.0, 8f8.2)
	   1987         go to 150
	   1988  
	   1989   130   continue
	   1990         LnCap1hr(funndx,atndx) = rin(1)     
	   1991 		Speederfac(funndx,atndx) = rin(2)
	   1992         CycLen(funndx, atndx) = rin(3)
	   1993         PkSpFac(funndx, atndx)  = rin(4)
	   1994 	    LocTrnSpFr(funndx, atndx) = rin(5)
	   1995 	    XprTrnSpFr(funndx, atndx) = rin(6)
	   1996 	    LocTrnSpPk(funndx, atndx) = rin(7)
	   1997 	    XprTrnSpPk(funndx, atndx) = rin(8)
	   1998 
	   1999         if (trace(5)) write(fmsgout,9131) funndx, atndx,                          &
	   2000 		                    LnCap1hr(funndx,atndx), Speederfac(funndx,atndx),     &  
	   2001 							CycLen(funndx, atndx),PkSpFac(funndx, atndx),         &
	   2002 							LocTrnSpFr(funndx, atndx), XprTrnSpFr(funndx, atndx), &
	   2003 							LocTrnSpPk(funndx, atndx),XprTrnSpPk(funndx, atndx) 
	   2004 							 
	   2005  9131   format('Trace(5) 130: fun x at ndx:', 2i4, ' Cap:',f8.0,' Spdfac: ',f8.3, & 
	   2006                             ' Cyclen: 'f8.0,' PkSpfac:', f8.3,                     &  
	   2007 							' Tran: LocFr/XprFr/LocPk/XprPk: ',4f8.0)           
	   2008 
	   2009 
	   2010   150 continue
	   2011 
	   2012       read(flookup,9150) cin
	   2013  9150 format(a10)
	   2014 
	   2015 ! opposing funcl
	   2016 
	   2017       do 190 i = 1, maxfuncl
	   2018 	    read(flookup,9160) fin,(rin(j),j=1,21)
	   2019  9160   format(i10,21f10.2)
	   2020 
	   2021         if (trace(5)) write(fmsgout,9161) fin, (rin(j),j=1,21)
	   2022  9161   format('Trace(5) 161: funcl x oppfunc: ', i4, 21f5.2)
	   2023 
	   2024         do 165 funndx = 1, maxfuncl
	   2025 	      if (fin .eq. legalfun(funndx)) go to 170

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 53
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2026   165   continue
	   2027         warn = .true.
	   2028 	    wcnt = wcnt + 1
	   2029         funndx = 5
	   2030 	    write(fmsgout,9115) fin, ain, (rin(j), j= 1,7)
	   2031  9165   format('Warning Lookup 165: bad funcl in oppfuncl lookup', &
	   2032                2f6.0, 21f8.2)
	   2033   170   continue
	   2034         do 180 j = 1, maxfuncl
	   2035 		  GrnPctFr(funndx,j)= rin(j)
	   2036 
	   2037   180   continue
	   2038 
	   2039           if (trace(5))                                                       &
	   2040 		    write(fmsgout,9180) funndx, (GrnPctFr(funndx,j),j=1,maxfuncl)
	   2041  9180       format('Trace(5) 180: fun: ',i4,' grnpct: ',21f5.2)           
	   2042 
	   2043 
	   2044   190 continue
	   2045 
	   2046       read(flookup,9150) cin
	   2047  
	   2048 ! read the link variable factors
	   2049 
	   2050   200 continue
	   2051       read(flookup,9200, end=500) varname
	   2052  9200 format(a10)
	   2053 	  if (varname .eq. eos) go to 500
	   2054 	  backspace flookup
	   2055 	  read(flookup,9210) varname, var1, var2, fac1, fac2
	   2056  9210 format(a10,t20,a1,t40,a1,2f10.3)
	   2057 
	   2058       if (trace(5)) write(fmsgout,9211) varname, var1, var2, fac1, fac2
	   2059  9211 format('Trace(5) 211: varname:',a10,' vars:', 2(1x,a1), ' facs:',2f8.3)
	   2060 !
	   2061       if (varname .eq. 'parking') then
	   2062 	    go to 220
	   2063       else if (varname .eq. 'pedactivit') then
	   2064 	    go to 230
	   2065       else if (varname .eq. 'developden') then
	   2066 	    go to 240
	   2067       else if (varname .eq. 'drivewyden') then
	   2068 	    go to 250
	   2069       else if (varname .eq. 'control') then
	   2070 	    go to 260
	   2071       else if (varname .eq. 'prohibit') then
	   2072 	    go to 270
	   2073       else if (varname .eq. 'LeftLns') then
	   2074 	    go to 280
	   2075       else if (varname .eq. 'RightLns') then
	   2076 	    go to 290
	   2077       else if (varname .eq. 'progressiv') then
	   2078 	    go to 300
	   2079       else if (varname .eq. 'factype') then
	   2080 	    go to 310
	   2081       else if (varname .eq. 'cappkfac') then
	   2082 	    go to 350

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 54
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2083       else if (varname .eq. 'capmidfac') then
	   2084 	    go to 355
	   2085       else if (varname .eq. 'capnitefac') then
	   2086 	    go to 360
	   2087       else if (varname .eq. 'impwttime') then
	   2088 	    go to 365
	   2089       else if (varname .eq. 'impwtdist') then
	   2090 	    go to 370
	   2091       else if (varname .eq. 'minspeed') then
	   2092 	    go to 380
	   2093        else 
	   2094 	    go to 390
	   2095 	  end if
	   2096 
	   2097 ! Parking
	   2098 
	   2099   220 continue
	   2100       do 225 i = 1, 5
	   2101 	      if (var1 .eq. legalprk(i)) go to 228
	   2102   225   continue
	   2103         warn = .true.
	   2104 	    wcnt = wcnt + 1
	   2105 	    write(fmsgout,9225) varname, var1, fac2
	   2106  9225   format('WARNING Lookup 225: bad parking lookup', a10, 2x, a1, 2x, f10.3)
	   2107         go to 400
	   2108   
	   2109   228   continue
	   2110         Cap_Park(i)= fac2
	   2111 
	   2112         if (trace(5)) write(fmsgout,9228) var1, i, Cap_Park(i) 
	   2113  9228   format('Trace(5) 228: parking: var1=',a1,' index:',i4,' Cap_Park:',f8.3) 
	   2114 
	   2115         go to 400
	   2116 		
	   2117 ! Pedestrian activity
	   2118   
	   2119   230 continue
	   2120 
	   2121        do 235 i = 1, 4
	   2122 	      if (var1 .eq. legalhml(i)) go to 238
	   2123   235   continue
	   2124         warn = .true.
	   2125 	    wcnt = wcnt + 1
	   2126 	    write(fmsgout,9235) varname, var1, fac1, fac2
	   2127  9235   format('WARNING Lookup 235: bad ped activity lookup', a10, 2x, a1, 2x, 2f10.3)
	   2128         go to 400
	   2129   
	   2130   238   continue
	   2131         SpFr_Ped(i)= fac1
	   2132         Cap_Ped(i)= fac2
	   2133 
	   2134         if (trace(5)) write(fmsgout,9238) var1, i, SpFr_Ped(i), Cap_Ped(i) 
	   2135  9238   format('Trace(5) 238: ped activity: var1=',a1,' index: ',i4,    &
	   2136                ' SpFr_Ped:',f8.3,' Cap_Ped:',f8.3)           
	   2137  
	   2138 
	   2139         go to 400

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 55
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2140 
	   2141 	
	   2142 ! Development density
	   2143   
	   2144   240 continue
	   2145       do 245 i = 1, 4
	   2146 	      if (var1 .eq. legalhml(i)) go to 248
	   2147   245   continue
	   2148         warn = .true.
	   2149 	    wcnt = wcnt + 1
	   2150 	    write(fmsgout,9245) varname, var1, fac1, fac2
	   2151  9245   format('WARNING Lookup 245: bad development density lookup', a10, 2x, a1, 2x, 2f10.3)
	   2152         go to 400
	   2153   
	   2154   248   continue
	   2155         SpFr_DevDn(i)= fac1
	   2156         Cap_DevDn(i)= fac2
	   2157 
	   2158         if (trace(5)) write(fmsgout,9248) var1, i, SpFr_DevDn(i), Cap_DevDn(i) 
	   2159  9248   format('Trace(5) 248: develop den: var1=',a1,' index: ',i4,    &
	   2160                ' SpFr_DevDn:',f8.3,' Cap_DevDn:',f8.3)           
	   2161  
	   2162 
	   2163         go to 400
	   2164 ! Driveway density
	   2165   
	   2166   250 continue
	   2167       do 255 i = 1, 4
	   2168 	      if (var1 .eq. legalhml(i)) go to 258
	   2169   255   continue
	   2170         warn = .true.
	   2171 	    wcnt = wcnt + 1
	   2172 	    write(fmsgout,9255) varname, var1, fac1, fac2
	   2173  9255   format('WARNING Lookup 255: bad driveway density lookup', a10, 2x, a1, 2x, 2f10.3)
	   2174         go to 400
	   2175   
	   2176   258   continue
	   2177         SpFr_Drvwy(i)= fac1
	   2178         Cap_Drvwy(i)= fac2
	   2179 
	   2180         if (trace(5)) write(fmsgout,9258) var1, i, SpFr_Drvwy(i), Cap_Drvwy(i) 
	   2181  9258   format('Trace(5) 258: drive den: var1=',a1,' index: ',i4,    &
	   2182                ' SpFr_Drvwy:',f8.3,' Cap_Drvwy:',f8.3)           
	   2183  
	   2184         go to 400
	   2185 		
	   2186 ! Control ZVD & control capacity factor
	   2187   
	   2188   260 continue
	   2189       if (var2 .eq. linkid) go to 265
	   2190       do 262 i = 1, 6
	   2191 	      if (var1 .eq. legalcntl(i)) go to 264
	   2192   262   continue
	   2193         warn = .true.
	   2194 	    wcnt = wcnt + 1
	   2195 	    write(fmsgout,9260) varname, var1, fac1
	   2196  9260   format('WARNING Lookup 260: bad control lookup', a10, 2x, a1, 2x, f10.3)

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 56
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2197         go to 400
	   2198   
	   2199   264   continue
	   2200         ZVD_cntl(i)	= fac1
	   2201 
	   2202         if (trace(5)) write(fmsgout,9264) var1, i, ZVD_cntl(i) 
	   2203  9264   format('Trace(5) 264: ZVD control: var1=',a1,' index: ',i4,    &
	   2204                ' ZVD_cntl:',f8.3)           
	   2205 
	   2206         go to 400
	   2207 
	   2208 ! Link factor for non-signalized intersections
	   2209 
	   2210   265 continue
	   2211       do 267 i = 1, 6
	   2212 	      if (var1 .eq. legalcntl(i)) go to 269
	   2213   267   continue
	   2214         warn = .true.
	   2215 	    wcnt = wcnt + 1
	   2216 	    write(fmsgout,9265) varname, var1, fac2
	   2217  9265   format('WARNING Lookup 265: bad control lookup', a10, 2x, a1, 2x, f10.3)
	   2218         go to 400
	   2219   
	   2220   269   continue
	   2221         Cap_cntl(i)	= fac2
	   2222 
	   2223         if (trace(5)) write(fmsgout,9269) var1, i, Cap_cntl(i) 
	   2224  9269   format('Trace(5) 269: cap_control: var1=',a1,' index: ',i4,    &
	   2225                ' Cap_cntl:',f8.3)           
	   2226 
	   2227         go to 400
	   2228 		
	   2229 		
	   2230 ! Turn prohibitions
	   2231   
	   2232   270 continue
	   2233       do 275 i = 1, 5
	   2234 	      if (var1 .eq. legalprhb(i)) go to 278
	   2235   275   continue
	   2236         warn = .true.
	   2237 	    wcnt = wcnt + 1
	   2238 	    write(fmsgout,9275) varname, var1, fac2
	   2239  9275   format('WARNING Lookup 275: bad turn prohibitions lookup', a10, 2x, a1, 2x, f10.3)
	   2240         go to 400
	   2241   
	   2242   278   continue
	   2243         Delay_prhb (i) = fac2
	   2244 
	   2245         if (trace(5)) write(fmsgout,9278) var1, i, Delay_prhb(i) 
	   2246  9278   format('Trace(5) 278: Delay for prohib: var1=',a1,' index: ',i4,    &
	   2247                ' Delay_prhb:',f8.3)           
	   2248 
	   2249         go to 400
	   2250 		     
	   2251 ! Left turn lanes
	   2252 ! Turn lanes array  Delay_TLns(i(3),j(2)) 
	   2253 !      i=1  One left turn lane signalized

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 57
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2254 !        2  One left turn lane unsignalized
	   2255 !        3  2+ left turn lanes signalized
	   2256 !        4  2+ left turn lanes unsignalized
	   2257 !        5  1+ right turn lns signalized
	   2258 !        6  1+ right turn lns unsignalized             
	   2259    
	   2260   280 continue
	   2261       if (var1 .ne. '1') go to 285
	   2262 	  if (var2 .eq. 'S') then
	   2263 		  Delay_TLns(1) = fac2 
	   2264 	  else 
	   2265 	      Delay_TLns(2) = fac2
	   2266       endif
	   2267 	  go to 400
	   2268   285 if (var1 .ne. '2') go to 288
	   2269 	  if (var2 .eq. 'S') then
	   2270 		  Delay_TLns(3) = fac2 
	   2271 	  else 
	   2272 	      Delay_TLns(4) = fac2
	   2273       endif
	   2274 	  go to 400
	   2275 
	   2276   288 continue
	   2277       warn = .true.
	   2278 	  wcnt = wcnt + 1
	   2279 	  write(fmsgout,9288) varname, var1, var2, fac2
	   2280  9288 format('WARNING Lookup 288: bad left turn lookup', a10, 2(2x, a1), 2x, f10.3)
	   2281 
	   2282       go to 400
	   2283   
	   2284 ! Right turn lanes - see note on left lanes above
	   2285   
	   2286   290 continue
	   2287       if (var2 .eq. 'S') then
	   2288 	    Delay_TLns(5) = fac2 
	   2289 	  else 
	   2290 	    Delay_TLns(6) = fac2
	   2291       endif
	   2292 	  go to 400
	   2293 
	   2294       warn = .true.
	   2295 	  wcnt = wcnt + 1
	   2296 	  write(fmsgout,9290) varname, var1, var2, fac2
	   2297  9290 format('WARNING Lookup 290: bad right turn lookup', a10, 2(2x, a1), 2x, f10.3)
	   2298 
	   2299        go to 400
	   2300   
	   2301 ! Progressive signals - don't have these coded yet
	   2302   
	   2303   300 continue
	   2304       if (var1 .eq. 'Y') then
	   2305 	    Delay_Prg(1) = fac2 
	   2306       else if (var1 .eq. 'N') then 
	   2307 	    Delay_Prg(2) = fac2
	   2308       else
	   2309         warn = .true.
	   2310  	    wcnt = wcnt + 1

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 58
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2311 	    write(fmsgout,9305) varname, var1, fac2
	   2312  9305   format('WARNING Lookup 305: bad progressive signals lookup', a10, 2x, a1, 2x,f10.3)
	   2313       endif
	   2314 
	   2315    	  go to 400
	   2316   
	   2317 	
	   2318 ! Facility type - 3 capacity factors (based on lanes)  One signalized intersection delay factor
	   2319   
	   2320   310 continue
	   2321       do 315 i = 1, maxfac
	   2322 	      if (var1 .eq. legalfac(i)) go to 318
	   2323   315 continue
	   2324       warn = .true.
	   2325 	  wcnt = wcnt + 1
	   2326 	  write(fmsgout,9315) varname, var1, var2, fac2
	   2327  9315 format('WARNING Lookup 315: bad facility type lookup', a10, 2(2x, a1), 2x,f10.3)
	   2328       go to 400
	   2329 
	   2330   318 continue
	   2331  
	   2332 
	   2333 !  factype x "L" - signalized intersection delay
	   2334 
	   2335       if (var2 .eq. 'L') then
	   2336         Delay_fac(i) = fac2
	   2337         go to 400
	   2338 
	   2339 !  factype x '1', '2', or '3' - lane capacity factors
	   2340 
	   2341 	  else if (var2 .eq. '1') then
	   2342 	    Cap_FacLn(i,1) = fac2
	   2343         j = 1
	   2344 	  else if (var2 .eq. '2') then
	   2345 	    Cap_FacLn(i,2) = fac2
	   2346         j = 2
	   2347 	  else if (var2 .eq. '3') then
	   2348 	    Cap_FacLn(i,3) = fac2
	   2349         j = 3
	   2350       else
	   2351         warn = .true.
	   2352   	    wcnt = wcnt + 1
	   2353 	    write(fmsgout,9320) varname, var1, var2, fac2
	   2354  9320   format('WARNING Lookup 320: bad VAR2 for facility type lookup', a10, 2(2x, a1), 2x,f10.3)
	   2355       endif
	   2356 
	   2357       if (trace(5)) write(fmsgout,9321) var1, var2, i, Delay_fac(i), j, Cap_FacLn(i,j) 
	   2358  9321 format('Trace(5) 321: Delay funcl: var1=',a1,' var2=',a1,' index: ',i4,    &
	   2359                ' Delay_prhb:',f8.3,' By # lns: index=',i2,'  Cap_FacLn:',f8.3)           
	   2360 
	   2361       go to 400
	   2362 
	   2363 !  Capacity factors - peak
	   2364 
	   2365   350 continue
	   2366 	  if (fac2 .ge. 1. .and. fac2 .le. 5.) then
	   2367 	    cappkfac = fac2

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 59
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2368       else
	   2369         warn = .true.
	   2370   	    wcnt = wcnt + 1
	   2371 	    write(fmsgout,9350) varname, fac2
	   2372  9350   format('WARNING Lookup 350: bad peak capacity', a10, f10.1,' default=2.0')
	   2373       endif
	   2374 	  go to 400
	   2375 
	   2376 
	   2377 !  Capacity factors - midday
	   2378 
	   2379   355 continue
	   2380 	  if (fac2 .ge. 1. .and. fac2 .le. 10.) then
	   2381 	    capmidfac = fac2
	   2382       else
	   2383         warn = .true.
	   2384   	    wcnt = wcnt + 1
	   2385 	    write(fmsgout,9355) varname, fac2
	   2386  9355   format('WARNING Lookup 355: bad midday cap factor', a10, f10.1,' default=7.0')
	   2387       endif
	   2388 	  go to 400
	   2389 
	   2390 !  Capacity factors - night
	   2391 
	   2392   360 continue
	   2393 	  if (fac2 .ge. 1. .and. fac2 .le. 15.) then
	   2394 	    capnitefac = fac2
	   2395       else
	   2396         warn = .true.
	   2397   	    wcnt = wcnt + 1
	   2398 	    write(fmsgout,9360) varname, fac2
	   2399  9360   format('WARNING Lookup 360: bad night capacity', a10, f10.1,' default=9.0')
	   2400       endif
	   2401 	  go to 400
	   2402 
	   2403 !  Impedance weight - time
	   2404 
	   2405   365 continue
	   2406 	  if (fac2 .ge. 0. .and. fac2 .le. 10.) then
	   2407 	    impwttime = fac2
	   2408       else
	   2409         warn = .true.
	   2410   	    wcnt = wcnt + 1
	   2411 	    write(fmsgout,9365) varname, fac2
	   2412  9365   format('WARNING Lookup 365: bad time impedance weight (0-10)',           & 
	   2413               a10, f10.1,' default=0.6')
	   2414       endif
	   2415 	  go to 400
	   2416 
	   2417 !  Impedance weight - distance
	   2418 
	   2419   370 continue
	   2420 	  if (fac2 .ge. 0. .and. fac2 .le. 10.) then
	   2421 	    impwtdist = fac2
	   2422       else
	   2423         warn = .true.
	   2424   	    wcnt = wcnt + 1

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 60
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2425 	    write(fmsgout,9370) varname, fac2
	   2426  9370   format('WARNING Lookup 370: bad distance impedance weight (0-10)',       & 
	   2427              a10, f10.1,' default=0.4')
	   2428       endif
	   2429 	  go to 400
	   2430 
	   2431 !  Minimum speed 
	   2432 
	   2433   380 continue
	   2434 	  if (fac1 .ge. 0. .and. fac1 .le. 25.) then
	   2435 	    minspeed = fac1
	   2436       else
	   2437         warn = .true.
	   2438   	    wcnt = wcnt + 1
	   2439 	    write(fmsgout,9380) varname, fac1
	   2440  9380   format('WARNING Lookup 380: bad minimum speed',       & 
	   2441              a10, f10.1,' default=10.0')
	   2442       endif
	   2443 	  go to 400
	   2444 
	   2445 
	   2446 ! Missed on varname
	   2447 
	   2448   390 continue
	   2449       warn = .true.
	   2450 	  wcnt = wcnt + 1
	   2451 	  write(fmsgout,9390) varname, var1, var2, fac2
	   2452  9390 format('WARNING Lookup 390: bad varname: ', a10, 2(2x, a1), 2x, f10.3)
	   2453 
	   2454 ! End of section on link variable factors
	   2455 		
	   2456   400 continue
	   2457       go to 200
	   2458 
	   2459 ! Highway delay coefficients - funcl x factype
	   2460 !    - not all factype's are necessarily included - if left blank on worksheet,
	   2461 !    (zero on input file), all of those funcl's are assessed same alpha / beta
	   2462  
	   2463   500 continue
	   2464 
	   2465       read(flookup,9500, end=700) varname  
	   2466  9500 format(a10)
	   2467 	  if (varname .eq. eos) go to 700
	   2468 	  backspace flookup
	   2469 	  read(flookup,9510) fin, ivar1, ivar2, fac1, fac2
	   2470  9510 format(3i10,2f10.2)
	   2471 
	   2472       if (trace(5)) write(fmsgout,9511) fin, ivar1, ivar2, fac1, fac2
	   2473  9511 format('Trace(5) 511: highway delay coef: funcl:',i2,' atype: ', i2, ' lanes: ',i2, ' alpha / beta:',2f10.2)
	   2474 
	   2475 ! set funcl index
	   2476 
	   2477       do 515 funndx = 1, maxfuncl
	   2478 	    if (fin .eq. legalfun(funndx)) go to 520
	   2479   515 continue
	   2480       warn = .true.
	   2481 	  wcnt = wcnt + 1

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 61
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2482 	  write(fmsgout,9515) fin, ivar1, ivar2, fac1, fac2 
	   2483  9515 format('Warning Lookup 515: bad funcl in highway delay lookup  ', 3i4, 3x,  2f10.2, ' use defaults')
	   2484       go to 500
	   2485 
	   2486 ! ivar1 is area type, if 0 - fill all, 
	   2487 
	   2488   520 continue
	   2489       if (ivar1 .ge. 0 .and. ivar1 .le.5) go to 525
	   2490       warn = .true.
	   2491 	  wcnt = wcnt + 1
	   2492 	  write(fmsgout,9520) fin, ivar1, ivar2, fac1, fac2 
	   2493  9520 format('Warning Lookup 520: bad atype in highway delay lookup  ', 3i4, 3x,  2f10.2, ' use defaults')
	   2494       go to 500
	   2495 
	   2496 ! ivar2 is minimum no. of lanes (e.g. 3 is a multi-lane facility)  type, if 0 - fill all, 
	   2497 
	   2498   525 continue
	   2499       if (ivar2 .ge. 0 .and. ivar2 .le.10) go to 528
	   2500       warn = .true.
	   2501 	  wcnt = wcnt + 1
	   2502 	  write(fmsgout,9525) fin, ivar1, ivar2, fac1, fac2 
	   2503  9525 format('Warning Lookup 520: bad #lanes in highway delay lookup  ', 3i4, 3x,  2f10.2, ' use defaults')
	   2504       go to 500
	   2505 
	   2506 ! fill all area types with coefs
	   2507 
	   2508   528 continue
	   2509       if (ivar1 .gt. 0) go to 535
	   2510         do 530 i = 1, 5
	   2511 	      if (ivar2 .lt. 3) then
	   2512 		    alpha(funndx,i,1) = fac1
	   2513 			beta(funndx,i,1) = fac2
	   2514 			alpha(funndx,i,2) = fac1
	   2515 			beta(funndx,i,2) = fac2
	   2516             j = 0       
	   2517 	        if (trace(5)) write(fmsgout,9530) funndx,i, j, alpha(funndx,i,1), beta(funndx, i, 1)
	   2518             j = 3       
	   2519 	        if (trace(5)) write(fmsgout,9530) funndx,i, j, alpha(funndx,i,2), beta(funndx, i, 2)
	   2520 		  else
	   2521 		    alpha(funndx,i,2) = fac1
	   2522 			beta(funndx,i,2) = fac2
	   2523 	        if (trace(5)) write(fmsgout,9530) funndx,i, ivar2, alpha(funndx,i,1), beta(funndx, i, 1)
	   2524 		  endif
	   2525 
	   2526 
	   2527   530   continue 
	   2528  9530     format('Trace(5) 530: highway delay: funcl:', i3, ' atype:',i3,' lanes: ',i3, ' alpha/beta:',2(f10.2,2x))
	   2529 
	   2530         go to 500
	   2531 
	   2532 ! fill areatype specific  values
	   2533 
	   2534   535   continue
	   2535 	      if (ivar2 .lt. 3) then
	   2536 		    alpha(funndx,ivar1,1) = fac1
	   2537 			beta(funndx,ivar1,1) = fac2
	   2538 			alpha(funndx,ivar1,2) = fac1

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 62
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2539 			beta(funndx,ivar1,2) = fac2
	   2540             j = 0       
	   2541 	        if (trace(5)) write(fmsgout,9530) funndx,ivar1, j, alpha(funndx,ivar1,1), beta(funndx, ivar1, 1)
	   2542             j = 3       
	   2543 	        if (trace(5)) write(fmsgout,9530) funndx,ivar1, j, alpha(funndx,ivar1,2), beta(funndx, ivar1, 2)
	   2544 		  else
	   2545 		    alpha(funndx,ivar1,2) = fac1
	   2546 			beta(funndx,ivar1,2) = fac2
	   2547 	        if (trace(5)) write(fmsgout,9530) funndx,ivar1, ivar2, alpha(funndx,ivar1,2), beta(funndx, ivar1, 2)
	   2548 		  endif
	   2549 
	   2550       go to 500
	   2551 
	   2552  
	   2553 ! Write reports
	   2554 
	   2555   700 continue
	   2556       if (.not.list(1)) go to 990
	   2557 
	   2558 ! Link variables first
	   2559 ! Lane capacity
	   2560 
	   2561       write(fmsgout,9700)
	   2562  9700 format(/////'Link Capacity lookup tables'//        &
	   2563              'Default Capacity per lane per hour'/)
	   2564       write(fmsgout,9702) (atname(j), j=1,maxat)
	   2565  9702 format('Funcl                          Area Type',/,16x,5a10)
	   2566       do 705 i = 1, maxfuncl
	   2567         write(fmsgout,9705), legalfun(i), funname(i), (LnCap1hr(i,j),j=1,maxat) 
	   2568   705 continue
	   2569  9705 format(i3,1x,a10,2x,5f10.0)
	   2570 
	   2571 ! Facility type x lanes capacity factor
	   2572 
	   2573       write(fmsgout,9710)
	   2574  9710 format(///'Facility type x no. of lanes capacity factor'/)
	   2575       write(fmsgout,9712) 
	   2576  9712 format('FacType                No. of lanes',/,                    &
	   2577              20x,'1 lane',3x,'2 lanes', 2x,'3+ lanes')
	   2578       do 715 i = 1, maxfac
	   2579         write(fmsgout,9715), facname(i), (Cap_FacLn(i,j),j=1,3) 
	   2580   715 continue
	   2581  9715 format(a10, 6x, 3f10.3)
	   2582 
	   2583 ! Parking capacity lookup factor
	   2584 
	   2585       write(fmsgout,9720)
	   2586  9720 format(///'On-street parking capacity factor',/,'Parking')
	   2587       write(fmsgout,9725), (parkname(i), Cap_Park(i), I=1,5) 
	   2588  9725 format(a10, 6x, f10.3)
	   2589 
	   2590 
	   2591 ! Pedestrian Activity lookup factor
	   2592 
	   2593       write(fmsgout,9730)
	   2594  9730 format(///'Pedestrian activity capacity factor',/,'Pedestrian Activity')
	   2595       write(fmsgout,9725), (hmlname(i), Cap_Ped(i), I=1,4) 

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 63
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2596 
	   2597 ! Development density lookup factor
	   2598 
	   2599       write(fmsgout,9735)
	   2600  9735 format(///'Development density capacity factor',/,'Development density')
	   2601       write(fmsgout,9725), (hmlname(i), Cap_DevDn(i), I=1,4) 
	   2602 
	   2603 ! Driveway density lookup factor
	   2604 
	   2605       write(fmsgout,9740)
	   2606  9740 format(///'Driveway density capacity factor',/,'Driveway density')
	   2607       write(fmsgout,9725), (hmlname(i), Cap_Drvwy(i), I=1,4) 
	   2608 
	   2609 
	   2610 ! Link speed lookup tables
	   2611 ! Speeder fac
	   2612 
	   2613       write(fmsgout,9750)
	   2614  9750 format(/////'Link Speed lookup tables',//        &
	   2615              'Factor for average speed greater than speed limit')
	   2616       write(fmsgout,9702) (atname(j), j=1,maxat)
	   2617       do 752 i = 1, maxfuncl
	   2618         write(fmsgout,9752), legalfun(i), funname(i), (Speederfac(i,j),j=1,maxat) 
	   2619   752 continue
	   2620  9752 format(i3,1x,a10,2x,5f10.2)
	   2621 
	   2622 ! Pedestrian activity speed lookup factor
	   2623 
	   2624       write(fmsgout,9755)
	   2625  9755 format(///'Pedestrian Activity Speed lookup factor',/,'Pedestrian Activity')
	   2626       write(fmsgout,9725), (hmlname(i), SpFr_Ped(i), I=1,4) 
	   2627  
	   2628 ! Development density speed lookup factor
	   2629 
	   2630       write(fmsgout,9760)
	   2631  9760 format(///'Development Density Speed lookup factor',/,'Development Density')
	   2632       write(fmsgout,9725), (hmlname(i), SpFr_DevDn(i), I=1,4) 
	   2633  
	   2634 ! Driveway density speed lookup factor
	   2635 
	   2636       write(fmsgout,9765)
	   2637  9765 format(///'Driveway Density Speed lookup factor',/,'Driveway Density')
	   2638       write(fmsgout,9725), (hmlname(i), SpFr_Drvwy(i), I=1,4) 
	   2639  
	   2640   
	   2641 ! Peak speed factor
	   2642 
	   2643       write(fmsgout,9770)
	   2644  9770 format(///'Factor to estimate loaded (peak) speed ')
	   2645       write(fmsgout,9702) (atname(j), j=1,maxat)
	   2646       do 772 i = 1, maxfuncl
	   2647         write(fmsgout,9772), legalfun(i), funname(i), (PkSpFac(i,j),j=1,maxat) 
	   2648   772 continue
	   2649  9772 format(i3,1x,a10,2x,5f10.3)
	   2650   
	   2651   
	   2652 ! Local bus free speed

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 64
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2653 
	   2654       write(fmsgout,9775)
	   2655  9775 format(///'Default local bus free speed (MPH): Speed capped at 90% mixed traffic speed')
	   2656       write(fmsgout,9702) (atname(j), j=1,maxat)
	   2657       do 777 i = 1, maxfuncl
	   2658         write(fmsgout,9752), legalfun(i), funname(i), (LocTrnSpFr(i,j),j=1,maxat) 
	   2659   777 continue
	   2660   
	   2661   
	   2662 ! Express bus free speed
	   2663 
	   2664       write(fmsgout,9780)
	   2665  9780 format(///'Default express bus free speed (MPH): Speed capped at 90% mixed traffic speed')
	   2666       write(fmsgout,9702) (atname(j), j=1,maxat)
	   2667       do 782 i = 1, maxfuncl
	   2668         write(fmsgout,9752), legalfun(i), funname(i), (XprTrnSpFr(i,j),j=1,maxat) 
	   2669   782 continue
	   2670   
	   2671   
	   2672 ! Local bus peak speed
	   2673 
	   2674       write(fmsgout,9785)
	   2675  9785 format(///'Default local bus peak speed (MPH): Speed capped at 90% mixed traffic speed')
	   2676       write(fmsgout,9702) (atname(j), j=1,maxat)
	   2677       do 787 i = 1, maxfuncl
	   2678         write(fmsgout,9752), legalfun(i), funname(i), (LocTrnSpPk(i,j),j=1,maxat) 
	   2679   787 continue
	   2680   
	   2681   
	   2682 ! Express bus peak speed
	   2683 
	   2684       write(fmsgout,9790)
	   2685  9790 format(///'Default express bus peak speed (MPH): Speed capped at 90% mixed traffic speed')
	   2686       write(fmsgout,9702) (atname(j), j=1,maxat)
	   2687       do 792 i = 1, maxfuncl
	   2688         write(fmsgout,9752), legalfun(i), funname(i), (XprTrnSpPk(i,j),j=1,maxat) 
	   2689   792 continue
	   2690   
	   2691  
	   2692 ! Intersection delay 
	   2693 ! Control ZVD 
	   2694 
	   2695       write(fmsgout,9800)
	   2696  9800 format(/////'Intersection Delay lookup tables',//        &
	   2697              'Default delay (seconds) by control'/)
	   2698       write(fmsgout,9805), (cntlname(i), ZVD_cntl(i), I=1,6) 
	   2699  9805 format(a10, 6x, f10.2,/)
	   2700 
	   2701   
	   2702 ! Default Cycle length
	   2703 
	   2704       write(fmsgout,9810)
	   2705  9810 format(///'Default cycle length (seconds)')
	   2706       write(fmsgout,9702) (atname(j), j=1,maxat)
	   2707       do 815 i = 1, maxfuncl
	   2708         write(fmsgout,9752), legalfun(i), funname(i), (CycLen(i,j),j=1,maxat) 
	   2709   815 continue

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 65
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2710   
	   2711  
	   2712 ! Green percentage 
	   2713 
	   2714       write(fmsgout,9820)
	   2715  9820 format(///'Default green percentage of cycle - funcl x opposing funcl')
	   2716       write(fmsgout,9822) (j, j=1,maxfuncl)
	   2717  9822 format('Funcl                  Opposing functional class',/,16x,21i10)
	   2718       do 825 i = 1, maxfuncl
	   2719         write(fmsgout,9825), legalfun(i), funname(i), (GrnPctFr(i,j),j=1,maxfuncl) 
	   2720   825 continue
	   2721  9825 format(i3,1x,a10,2x,21f10.2)
	   2722   
	   2723 ! Intersection Delay factor - facility type for signalized intersections
	   2724 
	   2725       write(fmsgout,9830)
	   2726  9830 format(///'Intersection delay factor : Facility type factor @ signalized intersections',/,'FacType')
	   2727       write(fmsgout,9835), (facname(i), Delay_fac(i), I=1,9) 
	   2728  9835 format(a10, 6x, f10.2)
	   2729 
	   2730   
	   2731 ! Intersection delay factor - turn prohibitions at intersection
	   2732 
	   2733       write(fmsgout,9840)
	   2734  9840 format(///'Intersection delay factor: Turn prohibitions',/,'*_Prohibit')
	   2735       write(fmsgout,9835), (prhbname(i), Delay_prhb(i), I=1,4) 
	   2736 
	   2737   
	   2738 ! Intersection delay factor - turn lanes at intersections
	   2739 
	   2740       write(fmsgout,9850)
	   2741  9850 format(///'Intersection delay factor:  Turn lanes at intersection')    
	   2742   	  write(fmsgout,9855) (Delay_Tlns(i),i=1,6)
	   2743  9855 format('1 left turn lane,   signalized  ', f10.3,/,                      &
	   2744              '1 left turn lane,   unsignalized', f10.3,/,                      &
	   2745              '2+ left turn lanes, signalized  ', f10.3,/,                      & 
	   2746 			 '2+ left turn lanes, unsignalized', f10.3,/,                      & 
	   2747 			 '1+ right turn lane, signalized  ', f10.3,/,                      &
	   2748 			 '1+ right turn lane, unsignalized', f10.3)
	   2749 
	   2750 
	   2751 ! Intersection delay factor - progressive signals
	   2752 
	   2753       write(fmsgout,9860)
	   2754  9860 format(///'Intersection delay factor:  progressive signals')
	   2755 	  write(fmsgout,9865)  Delay_Prg(1), Delay_Prg(2)
	   2756  9865 format('On progression    ',f15.3,/,                                  &
	   2757              'Not on progression' f15.3)              
	   2758   
	   2759   
	   2760 ! Highway Assignment Delay Coefficients: funcl x area type * 2 / 3+ lanes 
	   2761 ! List everything for funcl 1-9, then only 2 and 5 for rest of funcls
	   2762 
	   2763       write(fmsgout,9870)
	   2764  9870 format(///'Highway Assignment Delay Coefficients : functional class * area type * 2/3+ lane facility')
	   2765 
	   2766       do 875 i = 1, 9

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 66
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2767 	    do 875 j = 1, maxat
	   2768           write(fmsgout,9875), legalfun(i), funname(i), j, atname(j), alpha(i,j,1), beta(i,j,1)  
	   2769           write(fmsgout,9876), legalfun(i), funname(i), j, atname(j), alpha(i,j,2), beta(i,j,2)  
	   2770   875 continue
	   2771       do 876 i = 10, maxfuncl
	   2772 	    j = 2
	   2773         write(fmsgout,9875), legalfun(i), funname(i), j, atname(j), alpha(i,j,1), beta(i,j,1)  
	   2774         write(fmsgout,9876), legalfun(i), funname(i), j, atname(j), alpha(i,j,2), beta(i,j,2)  
	   2775 	    j = 5
	   2776         write(fmsgout,9875), legalfun(i), funname(i), j, atname(j), alpha(i,j,1), beta(i,j,1)  
	   2777         write(fmsgout,9876), legalfun(i), funname(i), j, atname(j), alpha(i,j,2), beta(i,j,2)  
	   2778   876 continue
	   2779 
	   2780 
	   2781  9875 format(i3,1x,a10,i3,2x,a10,' 1-2 lane facility: alpha: ',f5.2,' beta: ',f5.2)
	   2782  9876 format(i3,1x,a10,i3,2x,a10,' 3+  lane facility: alpha: ',f5.2,' beta: ',f5.2)
	   2783 
	   2784    	                                                                         
	   2785   990 continue                                                           
	   2786  
	   2787       return
	   2788 
	   2789 	  end subroutine lookupin 


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 _OPT                                    13 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  7 _PARAM                                  17 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  8 _LOOKUP                               7192 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  9 _LEGALVAL                              701 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
 10 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated               139953


ENTRY POINTS

 Address      Name    
                      
  4-00004FE8  LOOKUPIN



LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 67
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

VARIABLES

 Address      Type  Name         Address      Type  Name         Address      Type  Name         Address      Type  Name       
                                                                                                                               
  1-00000690  I*4   AIN           5-00000028  I*4   FATYPEIN          **      I*4   FUNNDX        8-00001584  R*4   MINSPEED   
      **      I*4   ATNDX         5-00000020  I*4   FCNTLOUT      5-00000014  I*4   FWARNMSG      7-00000010  L*1   RTNSPD     
  7-0000000C  I*4   BASEYEAR      5-00000000  I*4   FCNTRLIN          **      I*4   I             7-00000000  I*4   RUNYEAR    
  8-00001574  R*4   CAPMIDFAC     5-00000024  I*4   FDCTOUT       8-00001580  R*4   IMPWTDIST         **      L*1   SEVERE     
  8-00001578  R*4   CAPNITEFAC    5-00000010  I*4   FERRMSG       8-0000157C  R*4   IMPWTTIME     7-00000004  I*4   SPDCAP     
  8-00001570  R*4   CAPPKFAC      5-0000002C  I*4   FGUIDEWAYIN   1-0000068C  I*4   IVAR1         1-0000067C  CHAR  VAR1       
  7-00000008  I*4   CAPYEAR       1-00000694  I*4   FIN           1-00000688  I*4   IVAR2         1-00000678  CHAR  VAR2       
  1-000006A8  CHAR  CIN           5-00000008  I*4   FLOOKUP       1-00000698  I*4   J             1-0000069C  CHAR  VARNAME    
  2-000094DC  CHAR  EOS           5-00000018  I*4   FMSGOUT       2-000094D0  CHAR  LINKID        2-000094CC  L*1   WARN       
  1-00000684  R*4   FAC1          5-0000001C  I*4   FNERR         1-000006B4  CHAR  LKUPDATE      2-000094C8  I*4   WCNT       
  1-00000680  R*4   FAC2          5-00000004  I*4   FNETIN        9-00000004  I*4   MAXAT                                      
  1-00000674  I*4   FACNDX        5-0000000C  I*4   FNETOUT       9-00000008  I*4   MAXFAC                                     
      **      L*1   FATAL         5-00000030  I*4   FRTNCD        9-00000000  I*4   MAXFUNCL                                   


ARRAYS

 Address      Type  Name              Bytes  Dimensions

  8-00001588  R*4   ALPHA               840  (21, 5, 2)
  9-00000173  CHAR  ATNAME               50  (5)
  8-000018D0  R*4   BETA                840  (21, 5, 2)
  8-00001558  R*4   CAP_CNTL             24  (6)
  8-00001438  R*4   CAP_DEVDN            16  (4)
  8-00001458  R*4   CAP_DRVWY            16  (4)
  8-00001478  R*4   CAP_FACLN           108  (9, 3)
  8-00001404  R*4   CAP_PARK             20  (5)
  8-00001418  R*4   CAP_PED              16  (4)
  9-00000259  CHAR  CNTLNAME             60  (6)
  8-00000348  R*4   CYCLEN              420  (21, 5)
  8-00001514  R*4   DELAY_FAC            36  (9)
  8-00001550  R*4   DELAY_PRG             8  (2)
  8-000014FC  R*4   DELAY_PRHB           24  (6)
  8-00001538  R*4   DELAY_TLNS           24  (6)
  9-000001D7  CHAR  FACNAME              90  (9)
  9-000000A1  CHAR  FUNNAME             210  (21)
  8-00000D20  R*4   GRNPCTFR           1764  (21, 21)
  9-00000295  CHAR  HMLNAME              40  (4)
  9-00000069  CHAR  LEGALCNTL             7  (7)
  9-00000060  CHAR  LEGALFAC              9  (9)
  9-00000070  CHAR  LEGALFFN             28  (14)
  9-0000000C  I*4   LEGALFUN             84  (21)
  9-00000091  CHAR  LEGALHML              4  (4)
  9-00000095  CHAR  LEGALLU               6  (6)
  9-0000009B  CHAR  LEGALPRHB             6  (6)
  9-0000008C  CHAR  LEGALPRK              5  (5)
  6-0000000A  L*1   LIST                  3  (3)
  8-00000000  R*4   LNCAP1HR            420  (21, 5)
  8-00000690  R*4   LOCTRNSPFR          420  (21, 5)
  8-000009D8  R*4   LOCTRNSPPK          420  (21, 5)
  9-000001A5  CHAR  PARKNAME             50  (5)
  8-000004EC  R*4   PKSPFAC             420  (21, 5)
  9-00000231  CHAR  PRHBNAME             40  (4)

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 68
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

  2-000094E8  R*4   RIN                  84  (21)
  8-000001A4  R*4   SPEEDERFAC          420  (21, 5)
  8-00001448  R*4   SPFR_DEVDN           16  (4)
  8-00001468  R*4   SPFR_DRVWY           16  (4)
  8-00001428  R*4   SPFR_PED             16  (4)
  6-00000000  L*1   TRACE                10  (10)
  8-00000834  R*4   XPRTRNSPFR          420  (21, 5)
  8-00000B7C  R*4   XPRTRNSPPK          420  (21, 5)
  8-000014E4  R*4   ZVD_CNTL             24  (6)


LABELS

 Address      Label  Address      Label  Address      Label  Address      Label  Address      Label  Address      Label
                                                                                                                       
      **      100         **      225         **      262         **      300         **      500         **      777  
      **      115         **      228         **      264         **      310         **      515         **      782  
      **      120         **      230         **      265         **      315         **      520         **      787  
      **      125         **      235         **      267         **      318         **      525         **      792  
      **      130         **      238         **      269         **      350         **      528         **      815  
  4-000056A5  150         **      240         **      270         **      355     4-000077FB  530         **      825  
      **      165         **      245         **      275         **      360         **      535         **      875  
  4-00005912  170         **      248         **      278         **      365     4-00007BE5  700         **      876  
      **      180         **      250         **      280         **      370         **      705         **      990  
  4-00005A58  190         **      255         **      285         **      380         **      715                      
      **      200         **      258         **      288         **      390         **      752                      
      **      220         **      260         **      290         **      400         **      772                      

LOOKUPIN                        Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 69
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2790                                                                       
	   2791 !************************************************************************************
	   2792 
	   2793       SUBROUTINE CAPSPD(fatal, severe)                                           
	   2794                                                                        
	   2795 !     CAPSPD:                                                           
	   2796 !     VERSION 2004.1                                                       
	   2797 !     ORIGINAL CAPSPD MODULE WRITTEN BY RICHARD L. MERRICK              
	   2798                                                                        
	   2799       IMPLICIT INTEGER (A-Z)                                            
	   2800 
	   2801 ! parameters
	   2802 
	   2803 	  logical*1      fatal, severe
	   2804 
	   2805 ! files
	   2806                                                                      
	   2807       integer*4    fcntrlin,  fnetin, flookup, fnetout,                        &
	   2808 	               ferrmsg, fwarnmsg, fmsgout, fnerr,                          &
	   2809 				   fcntlout,fdctout, fatypein, fguidewayin, frtncd
	   2810       COMMON /FIL/ fcntrlin, fnetin, flookup, fnetout,                         &
	   2811 	               ferrmsg, fwarnmsg,fmsgout, fnerr, fcntlout, fdctout,        &
	   2812 				   fatypein, fguidewayin, frtncd
	   2813 
	   2814       LOGICAL*1    TRACE(10), LIST(3)                                      
	   2815       COMMON /OPT/ TRACE,LIST                                          
	   2816          
	   2817 	  INTEGER*4    RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR   
	   2818 	  LOGICAL*1    RTNSPD 
	   2819 	  COMMON /PARAM/ RUNYEAR, SPDCAP, CAPYEAR, BASEYEAR, RTNSPD             
	   2820                                                   
	   2821 ! node arrays
	   2822 
	   2823 	  integer*4       zbrin(30000), zbrout(30000)
	   2824 	  logical*1       nfun(30000,21), ncntl(30000,6)
	   2825 
	   2826       COMMON /narray/ zbrin, zbrout, nfun, ncntl
	   2827 
	   2828 
	   2829 ! lookup arrays
	   2830 
	   2831       Real*4     LnCap1hr(21,5), Speederfac(21,5), CycLen(21,5),       & 
	   2832 	             PkSpFac(21,5), LocTrnSpFr(21,5), XprTrnSpFr(21,5),    & 
	   2833 				 LocTrnSpPk(21,5), XprTrnSpPk(21,5), GrnPctFr(21,21),  &
	   2834 				 Cap_Park(5), Cap_Ped(4), SpFr_Ped(4),                 &
	   2835 				 Cap_DevDn(4), SpFr_DevDn(4), Cap_Drvwy(4),            &
	   2836 				 SpFr_Drvwy(4), Cap_FacLn(9,3), ZVD_cntl(6),           &
	   2837 				 Delay_prhb(6), Delay_fac(9), Delay_TLns(6),           &
	   2838 				 Delay_Prg(2), Cap_Cntl(6),                            &
	   2839 				 cappkfac, capmidfac, capnitefac,                      &
	   2840 				 impwttime, impwtdist, minspeed,                       &
	   2841 				 alpha(21,5,2), beta(21,5,2)
	   2842 
	   2843 
	   2844       COMMON /LOOKUP/ LnCap1hr, Speederfac, CycLen,                    &
	   2845 	  			 PkSpFac, LocTrnSpFr, XprTrnSpFr,                      &
	   2846 				 LocTrnSpPk, XprTrnSpPk, GrnPctFr,                     &

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 70
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2847 				 Cap_Park, Cap_Ped, SpFr_Ped,                          &
	   2848 				 Cap_DevDn,SpFr_DevDn, Cap_Drvwy,                      &
	   2849 				 SpFr_Drvwy, Cap_FacLn, ZVD_cntl,                      &  
	   2850 				 Delay_prhb, Delay_fac, Delay_TLns,                    & 
	   2851 				 Delay_Prg, Cap_cntl,                                  &
	   2852 				 cappkfac, capmidfac, capnitefac,                      &
	   2853 				 impwttime, impwtdist, minspeed, alpha, beta
	   2854 
	   2855 !  characteristics variable values
	   2856 
	   2857 	  integer*4    maxfuncl, maxat, maxfac, legalfun(21)
	   2858       real*4       minalpha /0.0/, maxalpha /20.0/,                    &          
	   2859 	               minbeta /0.0/,  maxbeta /20.0/
	   2860 	  character*1  legalfac(9), legalcntl(7),  legalprk(5),            &
	   2861 	               legalhml(4), legallu(6), legalprhb(6)
	   2862 
	   2863 	  character*2  legalffn(14)
	   2864 
	   2865 	  character*10 funname(21), atname(5), parkname(5),                & 
	   2866 	               facname(9), prhbname(4), cntlname(6), hmlname(4) 
	   2867 	
	   2868 	  COMMON /legalval/ maxfuncl, maxat, maxfac,                                &
	   2869 	                    legalfun, legalfac, legalcntl,                          & 
	   2870 	                    legalffn,  legalprk, legalhml,                          &
	   2871 						legallu, legalprhb,                                     &
	   2872 						funname, atname, parkname,                              &
	   2873 						facname, prhbname,cntlname,hmlname                               
	   2874 
	   2875 
	   2876 
	   2877 ! link record variables
	   2878 
	   2879       integer*4     ID, Anode, Bnode, funcl,                              &
	   2880 	                locclass1, locclass2,  A_oppfunc, B_oppfunc,          & 
	   2881 					projnum, count1, count1yr, count2, count2yr,          &
	   2882 			        dir, lanesAB, lanesBA, spdlimit,                      &
	   2883 	                A_LeftLns, A_ThruLns, A_RightLns,                     &  
	   2884 					B_LeftLns, B_ThruLns, B_RightLns,                     &
	   2885 					state, revln, County, lanes, taz, walkmode,           &
	   2886 					SpdLimRun           
	   2887 
	   2888 
	   2889       REAL*4	    length,  AAWT, count1fac, count2fac,                  &
	   2890 	                SPfreeAB, SPfreeBA, SPpeakAB, SPpeakBA,               &
	   2891 					TTfreeAB, TTfreeBA, TTpeakAB, TTpeakBA,               &
	   2892    					TTLinkFrAB, TTLinkFrBA, TTLinkPkAB, TTLinkPkBA,       &  
	   2893 					IntDelFr_A, IntDelFr_B, IntDelPk_A, IntDelPk_B,       &
	   2894 					CapPk3hrAB, CapPk3hrBA, CapMidAB, CapMidBA,           &
	   2895 					CapNightAB, CapNightBA, Cap1hrAB, Cap1hrBA,           &
	   2896 					TTPkEstAB, TTPkEstBA, TTPkPrevAB, TTPkPrevBA,         &
	   2897 					TTPkAssnAB, TTPkAssnBA, TTPkLocAB, TTPkLocBA,         &
	   2898 					TTPkXprAB, TTPkXprBA, TTFrLocAB, TTFrLocBA,           &
	   2899 					TTFrXprAB, TTFrXprBA, TTwalkAB, TTwalkBA,             & 
	   2900 					netalpha, netbeta, TTbikeAB, TTbikeBA,                &
	   2901 					PkLocLUAB, PkLocLUBA, PkXprLUAB, PkXprLUBA,           &
	   2902 					TTPkNStAB, TTPkNStBA, TTFrNStAB, TTFrNStBA,           &
	   2903 					TTPkSkSAB, TTPkSkSBA, TTFrSkSAB, TTFrSkSBA   

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 71
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2904 
	   2905 
	   2906 	  character*1   factype, parking, pedactivty, developden,               &
	   2907 	                drivewyden, landuse, A_Control, A_prohibit,             &
	   2908 					B_Control, B_Prohibit,  revtime                       
	   2909 
	   2910 	  character*2   fedfunc
	   2911 	  character*4   count1type, count2type 
	   2912       character*5   fedfunc_AQ
	   2913 	  character*20  Strname, A_CrossStr, B_CrossStr, SecondNam
	   2914       character*172 endofrec 
	   2915 
	   2916 
	   2917 ! TAZ areatype array
	   2918 
	   2919 	  integer*4       tazat(30000) 
	   2920       COMMON /at/     tazat
	   2921 
	   2922 ! Guideway speeds 
	   2923 
	   2924 	  real*4       gdwytt(300,4)
	   2925 	  integer*4    gdwyid(300), gwcnt 
	   2926       COMMON /gw/  gdwyid, gdwytt, gwcnt
	   2927 
	   2928 
	   2929 
	   2930 ! counters and indices
	   2931    
	   2932       integer*4   i, j, ii, jj, k, ifun, ifac, iat, ipark, idevden, idrvwy,        & 
	   2933 	              ipedact, icntrl, iprhb, ioppfun, iprgrss /2/,                 & 
	   2934                   lin2 /0/, linAB /0/, linBA /0/, lwarn /0/ 
	   2935 
	   2936 ! local variables
	   2937 !			 Functional class
	   2938 !				rank	funndx	 funcl
	   2939 !				 1			 1	  1:	Freeway
	   2940 !				 4			 2	  2:	Expressway
	   2941 !				 5			 3	  3:	Class II major
	   2942 !				 6			 4	  4:	Major tfare
	   2943 !				 9			 5	  5:	Minor tfare
	   2944 !				14			 6	  6:	Collector str
	   2945 !				16			 7	  7:	Local Street
	   2946 !				17			 8	  8:	Ramp
	   2947 !				15			 9	  9:	Frontage Road
	   2948 !				 2			10	 22:	HOV 2+ freeway
	   2949 !				 3			11	 23:	HOV 3+ freeway
	   2950 !                7          12   24:    HOV 2+ arterial 
	   2951 !                8          13   25:    HOV 3+ arterial
	   2952 !				12			14	 30:	Rail (Tran Only)
	   2953 !				13			15	 40:	Busway(TranOnly)
	   2954 !				10			16	 82:	HOV 2+ access 
	   2955 !				11			17	 83:	Hwy 3+ access
	   2956 !				18			18	 84:	Hwy to Transit 
	   2957 !               21		    19   85:    Station walk
	   2958 !				19			20	 90:	Centroid connect
	   2959 !				20			21	 92:	Cenconn Transit
	   2960      

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 72
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   2961 	  integer*4   funclrank(21) /1,4,5,6,9,14,16,17,15,2,3,7,8,12,13,10,11,18,21,19,20/
	   2962 	  integer*4   oppfac, oppfun, lnsndx
	   2963 
	   2964 	  logical*1   warn /.false./
	   2965  
	   2966       real*4      spl, tottime, grntime, redtime, zvd, zvd1, zvd2,             &
	   2967 				  SPFrLinkAB, SPFrLinkBA, TTatspl,                             &
	   2968                   lfac, rfac, TTtran
	   2969 				   
	   2970       character*1 F /'F'/, S /'S'/, W /'W'/
	   2971  
	   2972       integer*4	  numlinks(21,6) /126*0/,    num1wT(21,6) /126*0/,             &
	   2973 	              num1w1(10,6) /60*0/,       num1w2(10,6) /60*0/,              &
	   2974 				  num1w3(10,6) /60*0/    
	   2975       real*4	  linkmiles(21,6) /126*0./,  linkmiles1(10,6) /60*0./,         &
	   2976 				  linkmiles2(10,6) /60*0./,  linkmiles3(10,6) /60*0./,         &   
	   2977 	              lanemiles(21,6) /126*0./,                                    & 
	   2978 				  capT(21,6) /126*0./,       cap1(10,6) /60*0./,               &
	   2979 				  cap2(10,6) /60*0./,        cap3(10,6) /60*0./,               &
	   2980 				  TTfrT(21,6) /126*0./,      TTfr1(10,6) /60*0./,              &
	   2981 				  TTfr2(10,6) /60*0./ ,      TTfr3(10,6) /60*0./,              & 
	   2982 				  TTpkT(21,6) /126*0./,      TTpk1(10,6) /60*0./,              &
	   2983 				  TTpk2(10,6) /60*0./,       TTpk3(10,6) /60*0./,              &
	   2984 				  TTLfrT(21,6) /126*0./,     TTLpkT(21,6) /126*0./,            & 
	   2985 				  T(21,6),                   roadmiles(21,6) /126*0./,         &
	   2986 				  splTT(21,6) /126*0./
	   2987 
	   2988 ! added for version 2.1
	   2989 	 real*4       O_cap1AB, O_cap1BA, O_TTPkEstAB, O_TTPkEstBA,           &
	   2990 				  O_TTPkPrevAB, O_TTPkPrevBA, O_TTPkAssnAB, O_TTPkAssnBA, &                         
	   2990          
	   2991 				  O_TTPkLocAB, O_TTPkLocBA, O_TTPkXprAB, O_TTPkXprBA,     &                         
	   2991          
	   2992 				  O_TTPkNStAB, O_TTPkNStBA, O_TTPkSkSAB, O_TTPkSkSBA,     &                         
	   2992          
	   2993 				  O_PkLocLUAB, O_PkLocLUBA, O_PkXprLUAB, O_PkXprLUBA
	   2994 
	   2995      integer*4    replnum /0/
	   2996 	 logical*1    repl
	   2997 	  
	   2998 
	   2999      
	   3000 !  CAPSPD ENTRY POINT                                                   
	   3001 
	   3002       IF (TRACE(1)) print 9001                                                      
	   3003  9001 format('Trace(1):  Subroutine Capspd entered')             
	   3004 
	   3005 !  Second pass through network                          
	   3006 !  Read statement includes previously assigned data - all old fields start O_   
	   3007 !        JWM 4/7/06                                     
	   3008 
	   3009   100 continue
	   3010       read(fnetin,9100,end=850) ID, length, dir, Anode, Bnode,                      &
	   3011  	                        funcl, fedfunc, fedfunc_AQ,                             &
	   3012 							lanesAB, lanesBA,                                       &
	   3013 							factype, spdlimit, parking, pedactivty,                 &
	   3014 							developden, drivewyden, landuse,                        &

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 73
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3015 							A_LeftLns,A_ThruLns, A_RightLns,                        &	
	   3015 	
	   3016 							A_Control, A_Prohibit,                                  &
	   3017 							B_LeftLns, B_ThruLns, B_RightLns,                       &
	   3018 							B_Control, B_prohibit,                                  & 
	   3019 							State, County, locclass1, locclass2,                    &
	   3020 							revln, revtime, taz,                                    &
	   3021 							O_cap1AB, O_cap1BA, O_TTPkEstAB, O_TTPkEstBA,           &
	   3022 							O_TTPkPrevAB, O_TTPkPrevBA, O_TTPkAssnAB, O_TTPkAssnBA, &   
	   3022                                
	   3023 							O_TTPkLocAB, O_TTPkLocBA, O_TTPkXprAB, O_TTPkXprBA,     &   
	   3023                                
	   3024 							O_TTPkNStAB, O_TTPkNStBA, O_TTPkSkSAB, O_TTPkSkSBA,     &   
	   3024                                
	   3025 							O_PkLocLUAB, O_PkLocLUBA, O_PkXprLUAB, O_PkXprLUBA     
	   3026 						                                 
	   3027 
	   3028  9100 format               (i10,   f10.0, i2,    i6,   i6,                & ! 1 ID
	   3029                             i8,    a2,    a5,                             & ! 2 funcl
	   3030 							i8,    i8,                                    & ! 3 lanes
	   3031 							a1,    i8,    a1,    a1,                      & ! 4 factyp
	   3032 							a1,    a1,    a1,                             & ! 5 developd
	   3032 en 
	   3033 							i8,    i8,    i8,                             & ! 6 A_LeftLn
	   3033 s
	   3034 							a1,    a1,                                    & ! 7 A_Contro
	   3034 l
	   3035 							i8,    i8,    i8,                             & ! 8 B_LeftLn
	   3035 s
	   3036 							a1,    a1,                                    & ! 9 B_Contro
	   3036 l
	   3037                             i8,    i8,    i8,    i8,                      & !State 
	   3038 			     			i8,    a1,    i10,                            & !revln
	   3039 							f10.0, f10.0, f10.0, f10.0,                   & !cap1AB (old
	   3039  stuff)
	   3040 							f10.0, f10.0, f10.0, f10.0,                   & !TTPkPrevAB 
	   3040 (all old)
	   3041 							f10.0, f10.0, f10.0, f10.0,                   & !TTPkLocAB (
	   3041 all old)
	   3042 							f10.0, f10.0, f10.0, f10.0,                   & !TTPkNStAB (
	   3042 all old)
	   3043 							f10.0, f10.0, f10.0, f10.0)                     !PkLocLUAB (
	   3043 all old)
	   3044 
	   3045 
	   3046         lin2 = lin2 + 1
	   3047          
	   3048 
	   3049 !  zero out variables
	   3050 
	   3051         SPFreeAB = 0.0                                                        
	   3052         SPFreeBA = 0.0                                                        
	   3053         SPPeakAB = 0.0                                                        
	   3054         SPPeakBA = 0.0                                                        
	   3055         TTFreeAB = 0.0                                                        
	   3056         TTFreeBA = 0.0                                                        
	   3057         TTPeakAB = 0.0                                                        

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 74
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3058         TTPeakBA = 0.0                                                        
	   3059    	  	TTLinkFrAB = 0.0
	   3060 		TTLinkFrBA = 0.0
	   3061 		TTLinkPkAB = 0.0
	   3062 		TTLinkPkBA = 0.0
	   3063 		IntDelFr_A = 0.0 
	   3064 		IntDelFr_B = 0.0 
	   3065 		IntDelPk_A = 0.0 
	   3066 		IntDelPk_B = 0.0
	   3067 		CapPk3hrAB = 0.0 
	   3068 		CapPk3hrBA = 0.0 
	   3069 		CapMidAB = 0.0 
	   3070 		CapMidBA = 0.0
	   3071 		CapNightAB = 0.0 
	   3072 		CapNightBA = 0.0 
	   3073 		Cap1hrAB = 0.0 
	   3074 		Cap1hrBA = 0.0
	   3075 		TTPkEstAB = 0.0 
	   3076 		TTPkEstBA = 0.0 
	   3077 		TTPkPrevAB = 0.0 
	   3078 		TTPkPrevBA = 0.0
	   3079 		TTPkAssnAB = 0.0 
	   3080 		TTPkAssnBA = 0.0 
	   3081 		TTPkLocAB = 0.0 
	   3082 		TTPkLocBA = 0.0     
	   3083 		TTPkXprAB = 0.0 
	   3084 		TTPkXprBA = 0.0 
	   3085 		TTFrLocAB = 0.0
	   3086 		TTFrLocBA = 0.0
	   3087 		TTFrXprAB = 0.0 
	   3088 		TTFrXprBA = 0.0 
	   3089 		TTwalkAB = 0.0 
	   3090 		TTwalkBA = 0.0							
	   3091         netalpha = 0.0
	   3092 		netbeta = 0.0
	   3093 		TTbikeAB = 999.0
	   3094 		TTbikeBA = 999.0
	   3095 		walkmode = 0
	   3096 		PkLocLUAB = 0.0
	   3097 		PkLocLUBA = 0.0
	   3098 		PkXprLUAB = 0.0
	   3099 		PkXprLUBA = 0.0
	   3100 		TTPkNStAB = 0.0 
	   3101 		TTPkNStBA = 0.0 
	   3102 		TTFrNStAB = 0.0 
	   3103 		TTFrNStBA = 0.0 
	   3104 		TTPkSkSAB = 0.0 
	   3105 		TTPkSkSBA = 0.0 
	   3106 		TTFrSkSAB = 0.0 
	   3107 		TTFrSkSBA = 0.0 
	   3108 
	   3109 
	   3110 !  Non-directional variables - set lookup array indices
	   3111 !  funcl, default =6 (collector)
	   3112 
	   3113         do 105 ifun = 1, maxfuncl
	   3114 	      if (funcl .eq. legalfun(ifun)) go to 110

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 75
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3115   105   continue
	   3116 	    ifun = 6
	   3117 	    lwarn = lwarn + 1
	   3118  	    call emsg_i(5,105,W,ID,County,funcl,'Illegal funcl, default=6(collector)     ') 
	   3119 
	   3120 
	   3121 
	   3122 !  area type - pull from tazat file.       
	   3123 !  Must be legal TAZ or fatal error (3/17/09)
	   3124 
	   3125   110   continue
	   3126         if (taz .le. 0 .or. taz .gt. 30000) go to 112
	   3127 
	   3128 		iat = tazat(taz)
	   3129         if (iat .gt. 0 .and. iat .lt. 6) go to 114
	   3130 
	   3131 !  bad taz on link record - kill 
	   3132 
	   3133   112   continue
	   3134 	    ferr = ferr + 1
	   3135 		fatal = .true.
	   3136  	    call emsg_i(5,112,F,ID,County,taz,'No match in taz/atype lookup ')
	   3137 
	   3138   114   continue
	   3139 
	   3140 !  facility type, default = U, undivided
	   3141 
	   3142 !  v.2.9 - Funcl = 85 - Station walk - accumulate counts, then on to fixed values
	   3143 
	   3144   115   continue
	   3145         if (legalfun(ifun) .eq. 85) go to 170
	   3146 
	   3147 
	   3148         do 118 ifac = 1, maxfac
	   3149 	      if (factype .eq. legalfac(ifac)) go to 120
	   3150   118   continue
	   3151 	    ifac = 9
	   3152 	    lwarn = lwarn + 1
	   3153         call emsg_c(5,115,W,ID,County,factype,'Illegal factype, default=U(undivided)   ') 
	   3154 
	   3155 !  speed limit, default, freeway, expressway = 55, all others = 35
	   3156 !  v 2.4 - Adjust base year speed limit for rural 55 MPH roads that are now suburban
	   3157 !          only for funcl 4,5,6,7
	   3158 
	   3159   120   continue
	   3160 
	   3161         if (spdlimit .ge. 10. .and. spdlimit .le. 80.) then
	   3162   	      SPL = float(spdlimit) 
	   3163           SpdLimRun = spdlimit          
	   3164         else
	   3165 	      lwarn = lwarn + 1
	   3166           call emsg_i(5,120,W,ID,County,spdlimit,'Illegal Spd limit, def(frwy=55,oth=35)  ') 
	   3167 
	   3168       if (legalfun(ifun) .eq. 1  .or. legalfun(ifun) .eq. 2) then
	   3169 	        SPL = 55.
	   3170 			SpdLimRun = 55
	   3171    	      else

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 76
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3172 	        SPL = 35.
	   3173 			SpdLimRun = 35
	   3174           endif
	   3175 		endif
	   3176 
	   3177 ! v 2.4 speed limit adjustment
	   3178 
	   3179         if (RUNYEAR .ge. BASEYEAR .and.                                  &
	   3180 	       (legalfun(ifun) .eq. 4 .or. legalfun(ifun) .eq. 5 .or.        &
	   3181 		    legalfun(ifun) .eq. 6 .or. legalfun(ifun) .eq. 7) .and.      &
	   3182 		    iat .lt. 5 .and. SpdLimit .gt. 49.0) then
	   3183   	      SPL = 45.0
	   3184 		  SpdLimRun = 45 
	   3185 	      lwarn = lwarn + 1
	   3186           call emsg_i(5,122,W,ID,County,SpdLimit,'Ex-rural speed reduced to 45.           ') 
	   3187         endif
	   3188   
	   3189 
	   3190 ! v 2.5 freeway speed limit adjustment
	   3191 
	   3192 
	   3193         if (RUNYEAR .ge. CAPYEAR .and.                                   & 
	   3194            (legalfun(ifun) .eq. 1  .or. legalfun(ifun) .eq. 2 .or.       &
	   3195             legalfun(ifun) .eq. 3  .or.                                  &
	   3196  	        legalfun(ifun) .eq. 22 .or. legalfun(ifun) .eq. 23 .or.      &
	   3197 		    legalfun(ifun) .eq. 24 .or. legalfun(ifun) .eq. 25) .and.    &
	   3198 		   (iat .lt. 5 .or. County .eq. 119) .and.                                          &
	   3199 		    SpdLimit .gt. SPDCAP) then
	   3200   	      SPL = SPDCAP
	   3201 		  SpdLimRun = SPDCAP 
	   3202 	      lwarn = lwarn + 1
	   3203           call emsg_i(5,123,W,ID,County,SpdLimit,'Urban freeway speed reduced to SPDCAP.  ') 
	   3204         endif
	   3205   
	   3206 
	   3207 
	   3208 !  parking - default "N" (no parking)
	   3209 
	   3210   125   continue
	   3211         do 128 ipark = 1, 5
	   3212 	      if (parking .eq. legalprk(ipark)) go to 130
	   3213   128   continue
	   3214 	    ipark = 2
	   3215 	    lwarn = lwarn + 1
	   3216         call emsg_c(5,125,W,ID,County,parking,'Illegal parking code, default=N (none)  ') 
	   3217 
	   3218 !  pedestrian activity - default = 'L' (low)
	   3219 
	   3220   130   continue
	   3221         do 133 ipedact = 1, 4
	   3222 	      if (pedactivty .eq. legalhml(ipedact)) go to 135
	   3223   133   continue
	   3224 	    ipedact = 3
	   3225 	    lwarn = lwarn + 1
	   3226         call emsg_c(5,130,W,ID,County,pedactivty,'Illegal ped activity code, default=L    ') 
	   3227 	
	   3228 !  development density - default = L (low)

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 77
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3229 
	   3230   135   continue
	   3231         do 138 idevden = 1, 4
	   3232 	      if (developden .eq. legalhml(idevden)) go to 140
	   3233   138   continue
	   3234 	    idevden = 3
	   3235 	    lwarn = lwarn + 1
	   3236         call emsg_c(5,135,W,ID,County,developden,'Illegal develop density code, default=L ') 
	   3237 
	   3238 !  driveway density - default = L (low)
	   3239 
	   3240   140   continue
	   3241         do 143 idrvwy = 1, 4
	   3242 	      if (drivewyden .eq. legalhml(idrvwy)) go to 145
	   3243   143   continue
	   3244 	    idrvwy = 3
	   3245 	    lwarn = lwarn + 1
	   3246         call emsg_c(5,140,W,ID,County,drivewyden,'Illegal driveway density code, default=L') 
	   3247 
	   3248 !  length - minimum 0.01
	   3249 
	   3250   145   continue
	   3251         if (length .gt. 0.01) go to 150
	   3252 		lwarn = lwarn + 1
	   3253         call emsg_r(5,145,W,ID,County,length,'Minimum length set to 0.01 mi           ') 
	   3254 	    length = 0.01
	   3255 
	   3256 !  highway delay coefficients 
	   3257 !  alpha and beta arrays are funcl * areatype * 2/3+ lane facilities (20,5,2)
	   3258 
	   3259   150   continue
	   3260         if (dir.eq.0.and.lanesAB + lanesBA .gt. 2) then
	   3261 		  k = 2
	   3262 		else if (dir .lt. 0 .and. lanesBA .gt. 1) then
	   3263 		  k = 2
	   3264 		else if (dir .gt. 0 .and. lanesAB .gt. 1) then 
	   3265 		  k = 2
	   3266 		else 
	   3267 		  k = 1
	   3268 		endif
	   3269         netalpha = alpha(ifun,iat,k)
	   3270         netbeta = beta(ifun,iat,k)
	   3271  		
	   3272 !  Accumulate statistics for reports
	   3273 
	   3274   170   continue
	   3275         numlinks(ifun, iat) = numlinks(ifun,iat) + 1
	   3276         roadmiles(ifun,iat) = roadmiles(ifun,iat) + length  
	   3277 
	   3278 !  trace
	   3279 
	   3280         if (trace(6))                                                               &
	   3281 		write(fmsgout, 9170) ID, length, ifun, funcl, iat, ifac, factype,   &
	   3282 							 ipark, parking, ipedact, pedactivty,                   &
	   3283 							 idevden, developden,idrvwy, drivewyden 
	   3284 							 
	   3285  9170   format('Trace(6) CAPSPD 170',i10,' Global inputs',                          &  

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 78
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3286                ', Length:',f5.2,', Funcl:',2i4,', Areatp:',i2,                     &
	   3287                ', Factype:',i2,1x,a1,', Parking:',i2,1x,a1,	                	    &		  
	   3288                ', Ped_act:',i2,1x,a1,', Dev_Den:',i2,1x,a1,               		    &		  
	   3289                ', Drvwy_den:',i2,1x,a1)
	   3290 
	   3291 !  v.2.9 - Funcl = 85 - Station walk - assign fixed values
	   3292 
	   3293           if (legalfun(ifun) .eq. 85) go to 830
	   3294 
	   3295 !  A->B direction first, skip if B->A link
	   3296                                                                         
	   3297           if (dir .lt. 0) go to 500       
	   3298 		  linAB = linAB + 1
	   3299 
	   3300 !         B node characteristics 
	   3301 	  		 
	   3302           if (bnode .gt. 0 .and. bnode .lt. 30001) go to 210
	   3303 
	   3304 !           bad b node node number - default stop sign and oppfun = 6
	   3305 
	   3306           B_oppfunc = 6
	   3307 		  icntrl = 3
	   3308 		  ioppfun = 6           
	   3309  	      lwarn = lwarn + 1
	   3310           call emsg_i(5,200,W,ID,County,Bnode,'Bad BNODE, set control=S, oppfunc=6     ') 
	   3311           go to 230
	   3312 
	   3313 !          get b node opposing functional class.  All funcl from approaching links in
	   3314 !          nfun array.  Find "highest" ranking funcl other than current links funcl
	   3315 !          (array funclrank).  Otherwise, use same funcl
	   3316 
	   3317   210       continue
	   3318 			oppmax = 0
	   3319             oppfun = 0
	   3320 			do 215 j = 1, maxfuncl
	   3321 			  if (.not.nfun(Bnode,j)) go to 215
	   3322 			  if (j .eq. ifun) go to 215
	   3323 			  if (funclrank(j) .gt. oppmax) then
	   3324 			    oppmax = funclrank(j)
	   3325 				ioppfun = j
	   3326               endif
	   3327   215       continue
	   3328             if (oppfun .gt. 0) then
	   3329 			  B_oppfunc = legalfun(oppfun)
	   3330 			  ioppfun = j
	   3331             else
	   3332 			  B_oppfunc = funcl
	   3333 			  ioppfun = ifun 
	   3334 			endif
	   3335 
	   3336 !           B node control - default = S
	   3337 
	   3338   220       continue
	   3339             do 223 icntrl = 1, 6
	   3340 	          if (B_Control .eq. legalcntl(icntrl)) go to 225
	   3341   223       continue
	   3342 	        icntrl = 3

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 79
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3343 	        lwarn = lwarn + 1
	   3344             call emsg_c(5,220,W,ID,County,B_Control,'Bad B_Control, default=S (stop)         ') 
	   3345 
	   3346 !           If signal (2), round about (6) or 4 way stop (4) also at node - 
	   3347 !           default to that control - in that order
	   3348 !           v 2.4 - Centroid connectors adjusted, but do not get warning
	   3349 
	   3350  
	   3351   225       continue
	   3352             if (icntrl.ne.2 .and. ncntl(Bnode,2)) then
	   3353               icntrl = 2
	   3354 
	   3355 		      if (legalfun(ifun) .lt. 90) then
	   3356 			    warn = lwarn + 1
	   3357                 call emsg_c(5,225,W,ID,County,B_Control,'but signal found at B node, default=L   ') 
	   3358               endif
	   3359 
	   3360             elseif (icntrl.ne.6 .and. ncntl(Bnode,6)) then
	   3361               icntrl = 6
	   3362 
	   3363 		      if (legalfun(ifun) .lt. 90) then
	   3364 		        lwarn = lwarn + 1
	   3365                 call emsg_c(5,226,W,ID,County,B_Control,'but roundabout found at B node,default=R') 
	   3366               endif
	   3367 
	   3368             elseif (icntrl.ne.4 .and. ncntl(Bnode,4)) then
	   3369               icntrl = 4
	   3370 
	   3371 		      if (legalfun(ifun) .lt. 90) then
	   3372 		        lwarn = lwarn + 1
	   3373                 call emsg_c(5,227,W,ID,County,B_Control,'but 4-way found at B node, default=F    ') 
	   3374               endif
	   3375             endif
	   3376 
	   3377 !           prohibitions on B node - default = N
	   3378 
	   3379   230       continue
	   3380             do 233 iprhb= 1, 6
	   3381 	          if (B_Prohibit .eq. legalprhb(iprhb)) go to 235
	   3382   233       continue
	   3383 	        iprhb = 3
	   3384 	        lwarn = lwarn + 1
	   3385             call emsg_c(5,230,W,ID,County,B_Prohibit,'Bad B prohibitions, default=N (none)    ')
	   3386 
	   3387 !           lanes ab - if zero - make it one lane
	   3388 
	   3389   235       continue
	   3390             if (lanesAB .lt. 1) then
	   3391 		      lwarn = lwarn + 1
	   3392               call emsg_i(5,235,W,ID,County,LanesAB,'Dir<>-1, LanesAB will default to 1      ')
	   3393               lanesAB = 1.0
	   3394 			endif
	   3395 
	   3396 !  lnsndx - index to cap_facln array (factype x lanes)
	   3397 
	   3398 			if (lanesAB .gt. 3) then 
	   3399 			  lnsndx = 3

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 80
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3400             else 
	   3401 			  lnsndx = lanesAB
	   3402             endif
	   3403 
	   3404            if (trace(6))                                                               &
	   3405    		   write(fmsgout, 9236) ID, ioppfun, B_oppfunc,                                &  
	   3406 		                     icntrl, B_Control,                                        &
	   3407 							 iprhb, B_Prohibit,                                        &
	   3408                              lnsndx
	   3409 
	   3410  9236   format('Trace(6) CAPSPD 236',i10,' AB inputs',                                 & 
	   3411                ', Oppfun:',2i4, ', Control:',i2,1x,a1,                               &
	   3412                ', Turn prohibit:',i2,1x,a1,', Lnsndx:',i2)
	   3413 
	   3414 !  Hourly Link capacity (units = veh / hr)
	   3415 
	   3416 		    Cap1hrAB = LnCap1hr(ifun,iat) *                             &    
	   3417 		               float(lanesAB) *                                     &
	   3418 			    	   Cap_FacLn(ifac, lnsndx) *                            & 
	   3419 	                   Cap_Cntl(icntrl) *                                   &
	   3420 				       Cap_Park(ipark) *                                    &
	   3421 				       Cap_Ped(ipedact) *                                   &
	   3422 				       Cap_DevDn(idevden) *                                 &
	   3423 				       Cap_Drvwy(idrvwy)	         
	   3424 
	   3425 !  MAX hourly lane capacity: 2200 freeway, 2000 surface
	   3426 
	   3427             if (legalfun(ifun) .eq. 1  .or. legalfun(ifun) .eq. 2 .or.      &
	   3428                 legalfun(ifun) .eq. 3  .or.                                 &
	   3429  	            legalfun(ifun) .eq. 22 .or. legalfun(ifun) .eq. 23 .or.     &
	   3430 		        legalfun(ifun) .eq. 24 .or. legalfun(ifun) .eq. 25) then    
	   3431                Cap1hrAB = min(Cap1hrAB, 2200. * float(lanesAB))
	   3432 			else
	   3433 			   CAP1hrAB = min(Cap1hrAB, 2000. * float(lanesAB))
	   3434 			endif
	   3435        
	   3436 
	   3437         if (trace(6))                                                               &
	   3438 		write(fmsgout, 9237) ID, Cap1hrAB, LnCap1hr(ifun,iat), lanesAB,             &  
	   3439 		                     Cap_FacLn(ifac, lnsndx), Cap_Cntl(icntrl),             &
	   3440 							 Cap_Park(ipark), Cap_Ped(ipedact),                     &
	   3441                              Cap_DevDn(idevden), Cap_Drvwy(idrvwy)  
	   3442 
	   3443  9237   format('Trace(6) CAPSPD 237',i10,                                           &  
	   3444                ' Cap1hrAB:', f8.1, ', LnCap:',f8.1,                                &
	   3445                ', Lanes:',i2,', Factyp/ln:',f6.3,', Control:',f6.3                  &
	   3446 			   ', Parking:', f6.3, ', PedAct:',f6.3,                                &
	   3447 			   ', DevDen:', f6.3, ', Drvwy den:',f6.3)
	   3448 
	   3449 !  Free speed - link (units = MPH)
	   3450 
	   3451             SPFrLinkAB = spl *                                              &
	   3452 			             Speederfac(ifun,iat) *                             &
	   3453 						 SpFr_Ped(ipedact) *                                &
	   3454 						 SpFr_DevDn(idevden) *                              &
	   3455 						 SpFr_Drvwy(idrvwy)
	   3456 

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 81
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3457         if (trace(6))                                                               &
	   3458 		write(fmsgout, 9238) ID, SPFrLinkAB, spl,Speederfac(ifun,iat),              &  
	   3459 		                     SpFr_Ped(ipedact), SpFr_DevDn(idevden),                 &
	   3460 							 SpFr_Drvwy(idrvwy), PkSpFac(ifun,iat)                      
	   3460                 
	   3461   
	   3462  9238   format('Trace(6) CAPSPD 238',i10,                                          &  
	   3463                ' SpFrLinkAB:', f8.1, ', spl:',f8.1,                                &
	   3464                ', Speederfac:',f6.3,', PedAct:',f6.3,', DevDen:',f6.3,             &
	   3465 			   ', Drvwy den:',f6.3,', Peakfac:',f6.3)
	   3466 
	   3467 
	   3468 !  Nonsignalized Intersection delay (units = seconds) - 
	   3469 
	   3470              if (icntrl .eq. 2) go to 300 
	   3471 
	   3472 			 IntDelFr_B = ZVD_cntl(icntrl) *                                &
	   3473 			              Delay_prhb(iprhb) 
	   3474 
	   3475 !  turn lanes
	   3476 
	   3477             lfac = 1.0
	   3478 	        if (B_LeftLns .eq. 1) then
	   3479 			    lfac = Delay_Tlns(2)
	   3480               else if (B_LeftLns .gt. 1) then
	   3481 			    lfac = Delay_TLns(4)
	   3482             endif
	   3483 
	   3484 			rfac = 1.0      
	   3485             if (B_RightLns .ge. 1) rfac = Delay_TLns(6)
	   3486 
	   3487 		    IntDelFr_B = IntDelFr_B * lfac * rfac
	   3488 
	   3489             if (trace(6))                                                          &
	   3490   		    write(fmsgout, 9239) ID, IntDelFr_B, ZVD_cntl(icntrl),                 &   
	   3491 				             Delay_prhb(iprhb), lfac, rfac                             
	   3492   
	   3493  9239   format('Trace(6) CAPSPD 239',i10,' Unsignalized IntDelFr_B:', f8.2,         &  
	   3494                ' ZVD_cntl:', f6.3, ', Delay_prhb:',f6.3,                           &
	   3495                ', lfac:',f6.3,', rfac:',f6.3)
	   3496 
	   3497 
	   3498             go to 400
	   3499 
	   3500 !  Signalized intersection
	   3501 
	   3502   300       continue
	   3503 			tottime = cyclen(ifun,iat)
	   3504 			grntime = tottime * grnpctfr(ifun,ioppfun)
	   3505 			redtime = tottime - grntime
	   3506 			zvd = (redtime / tottime) * ((redtime / 2.0) + 0.0)
	   3507 
	   3508 
	   3509 !  factors  - Progressive signals (Delay_prg) not yet coded. 
	   3510 !             iprgrss set to 2 above (not progressive), factor = 1.0
	   3511 
	   3512             IntDelFr_B = zvd *                                             &

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 82
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3513                          Delay_prhb(iprhb) *                               &
	   3514 						 Delay_fac(ifac) *                                 & 
	   3515 						 Delay_Prg(iprgrss)
	   3516 
	   3517 !  turn lanes
	   3518 
	   3519             lfac = 1.0
	   3520 	        if (B_LeftLns .eq. 1) then
	   3521 			    lfac = Delay_Tlns(1)
	   3522               else if (B_LeftLns .gt. 1) then
	   3523 			    lfac = Delay_TLns(3)
	   3524             endif
	   3525 
	   3526 			rfac = 1.0      
	   3527             if (B_RightLns .ge. 1) rfac = Delay_TLns(5)
	   3528 
	   3529 		    IntDelFr_B = IntDelFr_B * lfac * rfac
	   3530 
	   3531 !  Capacity factor
	   3532 
	   3533             Cap1hrAB = Cap1hrAB * GrnPctFr(ifun, ioppfun)
	   3534 
	   3535             if (trace(6))                                                          &
	   3536   		    write(fmsgout, 9300) ID, IntDelFr_B, tottime, grntime, redtime, zvd,   &
	   3537 			       Delay_prhb(iprhb), Delay_fac(ifac), Delay_Prg(iprgrss),         &
	   3538 				   lfac, rfac, Cap1hrAB                             
	   3539   
	   3540  9300   format('Trace(6) CAPSPD 239',i10,' Signalized IntDelFr_B:', f8.2,           &  
	   3541                ', time/red/green:', 3f6.1,', Zvd:',f6.3,                           &
	   3542 			   ', Delay_prhb:',f6.3, ', Delay_fac:',f6.3,', Delay_Prg:',f6.3,      &
	   3543                ', lfac:',f6.3,', rfac:',f6.3,', Cap1hr:',f8.1)
	   3544 
	   3545 
	   3546 
	   3547 !  calculate output variables for AB
	   3548 !  Capacity by TOD
	   3549 
	   3550   400       continue
	   3551 			CapPk3hrAB = Cap1hrAB * cappkfac
	   3552 			CapMidAB =   Cap1hrAB * capmidfac
	   3553 		    CapNightAB = Cap1hrAB * capnitefac 
	   3554 
	   3555 !  link travel time - free and peak first
	   3556 
	   3557 		    TTLinkFrAB = (length / SpFrLinkAB) * 60.
	   3558 		    TTLinkPkAB = TTLinkFrAB / PkSpFac(ifun,iat)
	   3559 
	   3560 !  Peak intersection delay - add capacity back in for no peak parking (A,P,B)
	   3561 
	   3562 			IntDelPk_B = IntDelFr_B / PkSpFac(ifun, iat)
	   3563 			if (parking .eq. 'A' .or. parking .eq. 'P' .or. parking .eq. 'B')       &
	   3564 			   IntDelPk_B = IntDelPk_B * (1 / Cap_Park(ipark))
	   3565 
	   3566 !  Composite (link & intersection) free travel time (minutes) and speed (MPH).  
	   3567 !  Check for minimum speed.  If less - factor link and intersection proportionally 
	   3568 
	   3569             TTFreeAB = TTLinkFrAB + (IntDelFr_B / 60.)

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 83
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3570             SPFreeAB = length / (TTfreeAB / 60.)
	   3571             TTatspl = length / (float(spdlimit) / 60.)
	   3572  
	   3573   
	   3574     		if (SPFreeAB .ge. minspeed) go to 420
	   3575 
	   3576 		      lwarn = lwarn + 1
	   3577               call emsg_r(5,410,W,ID,County,SPFreeAB,'AB free speed < minimum. Minimum applied')
	   3578 
	   3579               pctlink = TTLinkFrAB / TTFreeAB 
	   3580               SPFreeAB = minspeed
	   3581               TTFreeAB = length / (minspeed / 60.)                                                      
	   3582 			  TTLinkFrAB = TTFreeAB * pctlink
	   3583 			  IntDelFr_B = (TTFreeAB - TTLinkFrAB) * 60. 
	   3584 
	   3585 !  Composite (link & intersection) peak travel time (minutes) and speed (MPH).  
	   3586 !  Check for minimum speed.  If less - factor link and intersection proportionally 
	   3587 
	   3588 
	   3589   420       continue
	   3590 	        TTPkEstAB = TTLinkPkAB + (IntDelPk_B / 60.)                                                       
	   3591             SPPeakAB = length / (TTPkEstAB / 60.)
	   3592 
	   3593             if (SPPeakAB .ge. minspeed) go to 430
	   3594 
	   3595 		      lwarn = lwarn + 1
	   3596               call emsg_r(5,420,W,ID,County,SPPeakAB,'AB peak speed < minimum. Minimum applied')
	   3597 
	   3598               pctlink = TTLinkPkAB / TTPkEstAB 
	   3599               SPPeakAB = minspeed
	   3600               TTPkEstAB = length / (minspeed / 60.)                                                      
	   3601 			  TTLinkPkAB = TTPkEstAB * pctlink
	   3602 			  IntDelPk_B = (TTPkEstAB - TTLinkPkAB) * 60. 
	   3603 
	   3604  
	   3605 !  Feedback loop travel time and transit speeds.  Set initial values to estimated 
	   3606 !  Retain look-up transit speed (PkLocLUAB, PkXprLUAB) for revision to speeds in 
	   3607 !  feedback loop (McLelland, Aug 15)
	   3608 !
	   3609 !  Add Peak and offpeak Non-stop transit speed - set equal to peak or free speed
	   3610 ! 
	   3611   430       continue
	   3612 
	   3613             TTPkPrevAB = TTPkEstAB
	   3614 			TTPkAssnAB = TTPkEstAB
	   3615 			TTPeakAB = TTPkEstAB
	   3616 
	   3617             if (LocTrnSpFr(ifun, iat) .gt.0.) then     
	   3618 			  TTtran = length / (LocTrnSpFr(ifun, iat) / 60.) 
	   3619 			  TTFrLocAB = max(TTfreeAB / 0.90, TTtran)
	   3620 
	   3621 !              write(6,9431) ID, length, ifun, iat, LocTrnSpFr(ifun,iat), TTfreeAB, TTFrLocAB, TTtran
	   3622 ! 9431         format('ID:', i10,' AB len=',f8.2, ' fun/at:',2i4,' lookup:',f6.2, ' ttfr:',f8.2, 'ttfrloc:',f8.2,' t
	   3622 ttran:',f8.2)
	   3623 
	   3624             else
	   3625 			  TTFrLocAB = 0.

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 84
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3626 			endif
	   3627 			
	   3628 			if (XprTrnSpFr(ifun, iat) .gt. 0.) then  
	   3629 			  TTtran = length / (XprTrnSpFr(ifun, iat) / 60.) 
	   3630 			  TTFrXprAB = max(TTfreeAB / 0.90, TTtran)
	   3631 			else
	   3632 			  TTFrXprAB = 0.
	   3633 			endif
	   3634 
	   3635 			if (LocTrnSpPk(ifun, iat) .gt. 0.) then
	   3636 			  TTtran = length / (LocTrnSpPk(ifun, iat) / 60.) 
	   3637 			  TTPkLocAB = max(TTPkEstAB / 0.90, TTtran)
	   3638 			  PkLocLUAB = TTtran
	   3639 			else
	   3640 			  TTPkLocAB = 0.
	   3641 			  PkLocLUAB = 0.
	   3642             endif
	   3643 
	   3644 			if (XprTrnSpPk(ifun, iat) .gt. 0.) then
	   3645 			  TTtran = length / (XprTrnSpPk(ifun, iat) / 60.) 
	   3646 			  TTPkXprAB = max(TTPkEstAB / 0.90, TTtran)
	   3647 			  PkXprLUAB = TTtran
	   3648             else
	   3649 			  TTPkXprAB = 0.
	   3650 			  PkXprLUAB = 0.
	   3651 			endif
	   3652 
	   3653 !   Peak and offpeak Non-stop transit speed - set equal to peak or free speed
	   3654 !   Skip stop transit speeds - set to avg of local and express speeds 
	   3655 !   McLelland - Dec. 29, 2005
	   3656 
	   3657             TTPkNStAB = TTPkAssnAB 
	   3658 			TTFrNStAB = TTfreeAB 
	   3659 
	   3660             TTPkSkSAB = (TTPkLocAB + TTPkXprAB) / 2.0
	   3661 		    TTFrSkSAB = (TTFrLocAB + TTFrXprAB) / 2.0
	   3662 
	   3663 ! Bike travel time (7 mph) - but no faster than TTfree
	   3664 ! No bikes on freeways, HOV, or guideways
	   3665 
	   3666       if (legalfun(ifun) .eq. 1  .or.                             &
	   3667 	      legalfun(ifun) .eq. 22 .or. legalfun(ifun) .eq. 23 .or. &
	   3668 		  legalfun(ifun) .eq. 24 .or. legalfun(ifun) .eq. 25 .or. &
	   3669 		  legalfun(ifun) .eq. 30 .or. legalfun(ifun) .eq. 40) then  
	   3670 
	   3671 		TTbikeAB = 999.
	   3672       else
	   3673 		TTbikeAB = max(length * 8.57, TTfreeAB)
	   3674       endif
	   3675 
	   3676 
	   3677 
	   3678 !YOJOE
	   3679 !  GuideWay speed overrides
	   3680 !  must be legal guideway (funcl=22  HOV 2+ - transit speeds only,
	   3681 !                          funcl=23  HOV 3+ - transit speeds only,
	   3682 !                          funcl=24  HOV 3+ - transit speeds only,

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 85
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3683 !                          funcl=25  HOV 3+ - transit speeds only,
	   3684 !                          funcl=30  Rail, - all speeds 
	   3685 !                          funcl=40  BRT - all speeds
	   3686 
	   3687             if (.not.(legalfun(ifun) .eq. 22 .or. legalfun(ifun) .eq. 23 .or. &
	   3688 			          legalfun(ifun) .eq. 24 .or. legalfun(ifun) .eq. 25 .or. &
	   3689 					  legalfun(ifun) .eq. 30 .or. legalfun(ifun) .eq. 40)) go to 450 
	   3690 			do 442 j = 1, gwcnt
	   3691 			  if (ID .eq. gdwyid(j)) then
	   3692 			    TTPkLocAB = gdwytt(j,1)
	   3693 				TTPkXprAB = TTPkLocAB
	   3694 				TTFrLocAB = TTPkLocAB
	   3695 				TTFrXprAB = TTPkLocAB
	   3696 
	   3697                 TTPkNStAB = gdwytt(j,3)
	   3698 				TTFrNStAB = gdwytt(j,3)
	   3699 
	   3700                 TTPkSkSAB = (TTPkLocAB + TTPkXprAB) / 2.0
	   3701 				TTFrSkSAB = (TTFrLocAB + TTFrXprAB) / 2.0
	   3702 
	   3703 				if (legalfun(ifun) .eq. 22 .or. legalfun(ifun) .eq. 23 .or. &
	   3704 				    legalfun(ifun) .eq. 24 .or. legalfun(ifun) .eq. 25) go to 445
	   3705 				TTfreeAB   = TTPkLocAB
	   3706 				TTpeakAB   = TTPkLocAB
	   3707 				TTPkEstAB  = TTPkLocAB
	   3708 				TTPkPrevAB = TTPkLocAB
	   3709 				TTPkAssnAB = TTPkLocAB
	   3710 				SPfreeAB = length / (TTfreeAB / 60.)
	   3711 				SPpeakAB = length / (TTpeakAB / 60.)
	   3712                 go to 445
	   3713               endif
	   3714   442       continue
	   3715             go to 450
	   3716   445       continue 			  
	   3717 !            if (trace(6))                                                          &
	   3718   		    write(fmsgout, 9445) ID, legalfun(ifun), length, TTPkLocAB, TTfreeAB, SPfreeAB
	   3719  9445       format('Trace(6) CAPSPD 445',i10,' AB Guideway Speed override, funcl=', i3,   &  
	   3720               ' length', f6.2,' TT guideway / all traffic:', 2f8.2,', SPfree:',f6.2)
	   3721 
	   3722   450       continue
	   3723 
	   3724 
	   3725 
	   3726 
	   3727 
	   3728 !  Accumulate statistics for reports
	   3729 
	   3730             linkmiles(ifun,iat) = linkmiles(ifun,iat) + length 
	   3731             num1wT(ifun,iat) =    num1wT(ifun,iat) + 1
	   3732 
	   3733 			if (ifun .lt. 10) then
	   3734 			  if (lnsndx .eq. 1) then 
	   3735   		        linkmiles1(ifun,iat) = linkmiles1(ifun,iat) + length
	   3736                 num1w1(ifun,iat) =    num1w1(ifun,iat) + 1
	   3737 			  else if (lnsndx .eq. 2) then 
	   3738   		        linkmiles2(ifun,iat) = linkmiles2(ifun,iat) + length
	   3739                 num1w2(ifun,iat) =    num1w2(ifun,iat) + 1

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 86
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3740 			  else 
	   3741   		        linkmiles3(ifun,iat) = linkmiles3(ifun,iat) + length
	   3742                 num1w3(ifun,iat) =    num1w3(ifun,iat) + 1
	   3743               endif
	   3744             endif
	   3745 
	   3746 			lanemiles(ifun,iat) = lanemiles(ifun,iat) + (length * lanesAB) 
	   3747 			capT(ifun,iat) = capT(ifun,iat) + Cap1hrAB 
	   3748 			TTfrT(ifun,iat) = TTfrT(ifun,iat) + TTfreeAB 
	   3749 			TTpkT(ifun,iat) = TTpkT(ifun,iat) + TTPkEstAB 
	   3750 			TTLfrT(ifun,iat) = TTLfrT(ifun,iat) + TTLinkFrAB 
	   3751 			TTLpkT(ifun,iat) = TTLpkT(ifun,iat) + TTLinkPkAB 
	   3752             splTT(ifun,iat)  = splTT(ifun,iat) + TTatspl
	   3753 
	   3754 			if (ifun .lt. 10) then
	   3755 			  if (lnsndx .eq. 1) then 
	   3756 			    cap1(ifun,iat) = cap1(ifun,iat) + Cap1hrAB
	   3757 			    TTfr1(ifun,iat) = TTfr1(ifun,iat) + TTFreeAB
	   3758 			    TTpk1(ifun,iat) = TTpk1(ifun,iat) + TTPkEstAB
	   3759 			  
	   3760 			  else if (lnsndx .eq. 2) then 
	   3761 			    cap2(ifun,iat) = cap2(ifun,iat) + Cap1hrAB
	   3762 			    TTfr2(ifun,iat) = TTfr2(ifun,iat) + TTFreeAB
	   3763 			    TTpk2(ifun,iat) = TTpk2(ifun,iat) + TTPkEstAB
	   3764 			  
	   3765 			  else 
	   3766 			    cap3(ifun,iat) = cap3(ifun,iat) + Cap1hrAB
	   3767 				TTfr3(ifun,iat) = TTfr3(ifun,iat) + TTFreeAB
	   3768 			    TTpk3(ifun,iat) = TTpk3(ifun,iat) + TTPkEstAB
	   3769               endif
	   3770             endif
	   3771 
	   3772 
	   3773 !  AB done - repeat for BA
	   3774 
	   3775   500     continue  
	   3776 
	   3777 !  Skip if AB only link
	   3778 
	   3779           if (dir .gt. 0) go to 800
	   3780 		  linBA = linBA + 1
	   3781 
	   3782 
	   3783 !         A node characteristics 
	   3784 		 
	   3785           if (Anode .gt. 0 .and. Anode .lt. 30001) go to 510
	   3786 
	   3787 !           bad A node node number - default stop sign  and oppfun = 6
	   3788 
	   3789           A_oppfunc = 6
	   3790 		  icntrl = 3
	   3791 		  ioppfun = 6           
	   3792  	      lwarn = lwarn + 1
	   3793           call emsg_i(5,500,W,ID,County,Anode,'Bad ANODE, set control=S, oppfunc=6     ') 
	   3794 		  go to 530
	   3795 
	   3796 !          get a node opposing functional class.  All funcl from approaching links in

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 87
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3797 !          nfun array.  Find "highest" ranking funcl other than current links funcl
	   3798 !          (array funclrank).  Otherwise, use same funcl
	   3799 
	   3800   510       continue
	   3801 			oppmax = 0
	   3802             oppfun = 0
	   3803 			do 515 j = 1, maxfuncl
	   3804 			  if (.not.nfun(Anode,j)) go to 515
	   3805 			  if (j .eq. ifun) go to 515
	   3806 			  if (funclrank(j) .gt. oppmax) then
	   3807 			    oppmax = funclrank(j)
	   3808 				ioppfun = j
	   3809               endif
	   3810   515       continue
	   3811             if (oppfun .gt. 0) then
	   3812 			  A_oppfunc = legalfun(oppfun)
	   3813 			  ioppfun = j
	   3814             else
	   3815 			  A_oppfunc = funcl
	   3816 			  ioppfun = ifun 
	   3817 			endif
	   3818 
	   3819 !           Anode control - default = S
	   3820 
	   3821   520       continue
	   3822             do 523 icntrl = 1, 6
	   3823 	          if (A_Control .eq. legalcntl(icntrl)) go to 525
	   3824   523       continue
	   3825 	        icntrl = 3
	   3826 	        lwarn = lwarn + 1
	   3827             call emsg_c(5,520,W,ID,County,A_Control,'Bad A_Control, default=S (stop)         ') 
	   3828 
	   3829 
	   3830 !           If signal (2), round about (6) or 4 way stop (4) also at node - 
	   3831 !           default to that control - in that order
	   3832 !           v 2.4 - Centroid connectors adjusted, but do not get warning
	   3833  
	   3834   525       continue
	   3835             if (icntrl.ne.2 .and. ncntl(Anode,2)) then
	   3836               icntrl = 2
	   3837 
	   3838 		      if (legalfun(ifun) .lt. 90) then
	   3839 		        lwarn = lwarn + 1
	   3840                 call emsg_c(5,525,W,ID,County,A_Control,'but signal found at A node, default=L   ') 
	   3841               endif
	   3842 
	   3843             elseif (icntrl.ne.6 .and. ncntl(Anode,6)) then
	   3844               icntrl = 6
	   3845 
	   3846 		      if (legalfun(ifun) .lt. 90) then
	   3847 		        lwarn = lwarn + 1
	   3848                 call emsg_c(5,526,W,ID,County,A_Control,'but roundabout found at A node,default=R') 
	   3849               endif
	   3850 
	   3851             elseif (icntrl.ne.4 .and. ncntl(Anode,4)) then
	   3852               icntrl = 4
	   3853 

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 88
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3854 		      if (legalfun(ifun) .lt. 90) then
	   3855 		        lwarn = lwarn + 1
	   3856                 call emsg_c(5,527,W,ID,County,A_Control,'but 4-way found at A node, default=F'   ) 
	   3857               endif
	   3858             endif
	   3859 
	   3860 
	   3861 !           prohibitions on A node - default = N
	   3862 
	   3863   530       continue
	   3864             do 533 iprhb= 1, 6
	   3865 	          if (A_Prohibit .eq. legalprhb(iprhb)) go to 535
	   3866   533       continue
	   3867 	        iprhb = 3
	   3868 	        lwarn = lwarn + 1
	   3869             call emsg_c(5,530,W,ID,County,A_Prohibit,'Bad A prohibitions, default=N (none)    ')
	   3870 
	   3871 !           lanes ab - if zero - make it one lane
	   3872 
	   3873   535       continue
	   3874             if (lanesBA .lt. 1) then
	   3875 		      lwarn = lwarn + 1
	   3876               call emsg_i(5,235,W,ID,County,LanesAB,'Dir<>1, LanesBA will default to 1       ')
	   3877               lanesBA = 1.0
	   3878 			endif
	   3879 
	   3880 !  lnsndx - index to cap_facln array (factype x lanes)
	   3881 
	   3882 			if (lanesBA .gt. 3) then 
	   3883 			  lnsndx = 3
	   3884             else 
	   3885 			  lnsndx = lanesBA
	   3886             endif
	   3887 
	   3888            if (trace(6))                                                               &
	   3889    		   write(fmsgout, 9536) ID, ioppfun, A_oppfunc,                                &  
	   3890 		                     icntrl, A_Control,                                        &
	   3891 							 iprhb, A_Prohibit,                                        &
	   3892                              lnsndx   
	   3893 
	   3894  9536   format('Trace(6) CAPSPD 536',i10,' BA inputs',                                 & 
	   3895                ', Oppfun:',2i4, ', Control:',i2,1x,a1,                             &
	   3896                ', Turn prohibit:',i2,1x,a1,', Lnsndx:',i2)
	   3897 
	   3898 !  Hourly Link capacity (units = veh / hr)
	   3899 
	   3900 		    Cap1hrBA = LnCap1hr(ifun,iat) *                             &    
	   3901 		               float(lanesBA) *                                     &
	   3902 			    	   Cap_FacLn(ifac, lnsndx) *                            & 
	   3903 	                   Cap_Cntl(icntrl) *                                   &
	   3904 				       Cap_Park(ipark) *                                    &
	   3905 				       Cap_Ped(ipedact) *                                   &
	   3906 				       Cap_DevDn(idevden) *                                 &
	   3907 				       Cap_Drvwy(idrvwy)	         
	   3908 
	   3909 !  MAX hourly lane capacity: 2200 freeway, 2000 surface
	   3910 

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 89
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3911             if (legalfun(ifun) .eq. 1  .or. legalfun(ifun) .eq. 2 .or.      &
	   3912                 legalfun(ifun) .eq. 3  .or.                                 &
	   3913  	            legalfun(ifun) .eq. 22 .or. legalfun(ifun) .eq. 23 .or.     &
	   3914 		        legalfun(ifun) .eq. 24 .or. legalfun(ifun) .eq. 25) then    
	   3915                Cap1hrBA = min(Cap1hrBA, 2200. * float(lanesBA))             
	   3916 			else                                                            
	   3917 			   CAP1hrBA = min(Cap1hrBA, 2000. * float(lanesBA))             
	   3918             endif
	   3919 
	   3920         if (trace(6))                                                               &
	   3921 		write(fmsgout, 9537) ID, Cap1hrBA, LnCap1hr(ifun,iat), lanesBA,             &  
	   3922 		                     Cap_FacLn(ifac, lnsndx), Cap_Cntl(icntrl),             &
	   3923 							 Cap_Park(ipark), Cap_Ped(ipedact),                     &
	   3924                              Cap_DevDn(idevden), Cap_Drvwy(idrvwy)  
	   3925 
	   3926  9537   format('Trace(6) CAPSPD 537',i10,                                           &  
	   3927                ' Cap1hrBA:', f8.1, ', LnCap:',f8.1,                                &
	   3928                ', Lanes:',i2,', Factyp/ln:',f6.3,', Control:',f6.3                  &
	   3929 			   ', Parking:', f6.3, ', PedAct:',f6.3,                                &
	   3930 			   ', DevDen:', f6.3, ', Drvwy den:',f6.3)
	   3931 
	   3932 !  Free speed - link (units = MPH)
	   3933 
	   3934             SPFrLinkBA = spl *                                              &
	   3935 			             Speederfac(ifun,iat) *                         &
	   3936 						 SpFr_Ped(ipedact) *                                &
	   3937 						 SpFr_DevDn(idevden) *                              &
	   3938 						 SpFr_Drvwy(idrvwy)
	   3939 
	   3940         if (trace(6))                                                               &
	   3941 		write(fmsgout, 9538) ID, SPFrLinkBA, spl,Speederfac(ifun,iat),              &  
	   3942 		                     SpFr_Ped(ipedact), SpFr_DevDn(idevden),                 &
	   3943 							 SpFr_Drvwy(idrvwy), PkSpFac(ifun,iat)                      
	   3943                 
	   3944   
	   3945  9538   format('Trace(6) CAPSPD 538',i10,                                          &  
	   3946                ' SpFrLinkBA:', f8.1, ', spl:',f8.1,                                &
	   3947                ', Speederfac:',f6.3,', PedAct:',f6.3,', DevDen:',f6.3,             &
	   3948 			   ', Drvwy den:',f6.3,', Peakfac:',f6.3)
	   3949 
	   3950 !  Nonsignalized Intersection delay (units = seconds) - 
	   3951 
	   3952              if (icntrl .eq. 2) go to 600 
	   3953 
	   3954 			 IntDelFr_A = ZVD_cntl(icntrl) *                                       &
	   3955 			              Delay_prhb(iprhb) 
	   3956 
	   3957 !  turn lanes
	   3958 
	   3959             lfac = 1.0
	   3960 	        if (A_LeftLns .eq. 1) then
	   3961 			    lfac = Delay_Tlns(2)
	   3962               else if (A_LeftLns .gt. 1) then
	   3963 			    lfac = Delay_TLns(4)
	   3964             endif
	   3965 
	   3966 			rfac = 1.0      

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 90
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   3967             if (A_RightLns .ge. 1) rfac = Delay_TLns(6)
	   3968 
	   3969 		    IntDelFr_A = IntDelFr_A * lfac * rfac
	   3970 
	   3971             if (trace(6))                                                           &
	   3972   		    write(fmsgout, 9539) ID, IntDelFr_A, ZVD_cntl(icntrl),                  & 
	   3973 			             Delay_prhb(iprhb), lfac, rfac                             
	   3974   
	   3975  9539   format('Trace(6) CAPSPD 539',i10,' Unsignalized IntDelFr_A:', f8.2,         &  
	   3976                ' ZVD_cntl:', f6.3, ', Delay_prhb:',f6.3,                            &
	   3977                ', lfac:',f6.3,', rfac:',f6.3)
	   3978 
	   3979 
	   3980 
	   3981             go to 700
	   3982 
	   3983 !  Signalized intersection
	   3984 
	   3985   600       continue
	   3986 			tottime = cyclen(ifun,iat)
	   3987 			grntime = tottime * grnpctfr(ifun,ioppfun)
	   3988 			redtime = tottime - grntime
	   3989 			zvd = (redtime / tottime) * ((redtime / 2.0) + 0.0)
	   3990 
	   3991 
	   3992 !  factors  - Progressive signals (Delay_prg) not yet coded. 
	   3993 !             iprgrss set to 2 above (not progressive), factor = 1.0
	   3994 
	   3995             IntDelFr_A = zvd *                                             &
	   3996                          Delay_prhb(iprhb) *                               &
	   3997 						 Delay_fac(ifac) *                                 & 
	   3998 						 Delay_Prg(iprgrss)
	   3999 
	   4000 !  turn lanes
	   4001 
	   4002             lfac = 1.0
	   4003 	        if (A_LeftLns .eq. 1) then
	   4004 			    lfac = Delay_Tlns(1)
	   4005               else if (A_LeftLns .gt. 1) then
	   4006 			    lfac = Delay_TLns(3)
	   4007             endif
	   4008 
	   4009 			rfac = 1.0      
	   4010             if (A_RightLns .ge. 1) rfac = Delay_TLns(5)
	   4011 
	   4012 		    IntDelFr_A = IntDelFr_A * lfac * rfac
	   4013 
	   4014 
	   4015 !  Capacity factor
	   4016 
	   4017             Cap1hrBA = Cap1hrBA * GrnPctFr(ifun, ioppfun)
	   4018 
	   4019 
	   4020             if (trace(6))                                                          &
	   4021   		    write(fmsgout, 9600) ID, IntDelFr_A, tottime, grntime, redtime, zvd,   &
	   4022 			       Delay_prhb(iprhb), Delay_fac(ifac), Delay_Prg(iprgrss),         &
	   4023 				   lfac, rfac, Cap1hrBA                             

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 91
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4024   
	   4025  9600   format('Trace(6) CAPSPD 600',i10,' Signalized IntDelFr_A:', f8.2,           &  
	   4026                ', time/red/green:', 3f6.1,', Zvd:',f6.3,                           &
	   4027 			   ', Delay_prhb:',f6.3, ', Delay_fac:',f6.3,', Delay_Prg:',f6.3,      &
	   4028                ', lfac:',f6.3,', rfac:',f6.3,', Cap1hr:',f8.1)
	   4029 
	   4030 
	   4031 !  calculate output variables for BA
	   4032 !  Capacity by TOD
	   4033 
	   4034   700       continue
	   4035 			CapPk3hrBA = Cap1hrBA * cappkfac
	   4036 			CapMidBA =   Cap1hrBA * capmidfac
	   4037 		    CapNightBA = Cap1hrBA * capnitefac 
	   4038 
	   4039 !  link travel time - free and peak first
	   4040 
	   4041 		    TTLinkFrBA = (length / SpFrLinkBA) * 60.
	   4042 		    TTLinkPkBA = TTLinkFrBA / PkSpFac(ifun,iat)
	   4043 
	   4044 !  Peak intersection delay - add capacity back in for no peak parking (A,P,B)
	   4045 
	   4046 			IntDelPk_A = IntDelFr_A / PkSpFac(ifun, iat)
	   4047 			if (parking .eq. 'A' .or. parking .eq. 'P' .or. parking .eq. 'B')       &
	   4048 			   IntDelPk_A = IntDelPk_A * (1 / Cap_Park(ipark))
	   4049 
	   4050 !  Composite (link & intersection) free travel time (minutes) and speed (MPH).  
	   4051 !  Check for minimum speed.  If less - factor link and intersection proportionally 
	   4052 
	   4053             TTFreeBA = TTLinkFrBA + (IntDelFr_A / 60.)
	   4054             SPFreeBA = length / (TTfreeBA / 60.)
	   4055             TTatspl = length / (float(spdlimit) / 60.)
	   4056   
	   4057     		if (SPFreeBA .ge. minspeed) go to 720
	   4058 
	   4059 		      lwarn = lwarn + 1
	   4060               call emsg_r(5,710,W,ID,County,SPFreeBA,'BA free speed < minimum. Minimum applied')
	   4061 
	   4062               pctlink = TTLinkFrBA / TTFreeBA 
	   4063               SPFreeBA = minspeed
	   4064               TTFreeBA = length / (minspeed / 60.)                                                      
	   4065 			  TTLinkFrBA = TTFreeBA * pctlink
	   4066 			  IntDelFr_A = (TTFreeBA - TTLinkFrBA) * 60. 
	   4067 
	   4068 !  Composite (link & intersection) peak travel time (minutes) and speed (MPH).  
	   4069 !  Check for minimum speed.  If less - factor link and intersection proportionally 
	   4070 
	   4071   720       continue
	   4072             TTPkEstBA = TTLinkPkBA + (IntDelPk_A / 60.)                                                       
	   4073             SPPeakBA = length / (TTPkEstBA / 60.)
	   4074 
	   4075             if (SPPeakBA .ge. minspeed) go to 730
	   4076 
	   4077 		      lwarn = lwarn + 1
	   4078               call emsg_r(5,720,W,ID,County,SPPeakBA,'BA peak speed < minimum. Minimum applied')
	   4079 
	   4080               pctlink = TTLinkPkBA / TTPkEstBA 

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 92
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4081               SPPeakBA = minspeed
	   4082               TTPkEstBA = length / (minspeed / 60.)                                                      
	   4083 			  TTLinkPkBA = TTPkEstBA * pctlink
	   4084 			  IntDelPk_A = (TTPkEstBA - TTLinkPkBA) * 60. 
	   4085 
	   4086 			   
	   4087 !  Feedback speeds and transit speeds, set feedbacks to estimated for initial run
	   4088 !  Retain look-up transit speed (PkLocLUBA, PkXprLUBA) for revision to speeds in 
	   4089 !  feedback loop (McLelland, Aug 15)
	   4090 
	   4091   730       continue
	   4092 			TTPeakBA = TTPkEstBA
	   4093 			TTPkPrevBA = TTPkEstBA
	   4094 			TTPkAssnBA = TTPkEstBA
	   4095 
	   4096             if (LocTrnSpFr(ifun, iat) .gt.0.) then     
	   4097 			  TTtran = length / (LocTrnSpFr(ifun, iat) / 60.) 
	   4098 			  TTFrLocBA = max(TTfreeBA / 0.90, TTtran)
	   4099 
	   4100 !            write(6,9731) ID, length, ifun, iat, LocTrnSpFr(ifun,iat), TTfreeBA, TTFrLocBA, TTtran
	   4101 ! 9731       format('ID:',i10,' BA len=',f8.2, ' fun/at:',2i4,' lookup:',f6.2, ' ttfr:',f8.2, 'ttfrloc:',f8.2,' tttr
	   4101 an:',f8.2)
	   4102 
	   4103             else
	   4104 			  TTFrLocBA = 0.
	   4105 			endif
	   4106 			
	   4107 			if (XprTrnSpFr(ifun, iat) .gt. 0.) then  
	   4108 			  TTtran = length / (XprTrnSpFr(ifun, iat) / 60.) 
	   4109 			  TTFrXprBA = max(TTfreeBA / 0.90, TTtran)
	   4110 			else
	   4111 			  TTFrXprBA = 0.
	   4112 			endif
	   4113 
	   4114 			if (LocTrnSpPk(ifun, iat) .gt. 0.) then
	   4115 			  TTtran = length / (LocTrnSpPk(ifun, iat) / 60.) 
	   4116 			  TTPkLocBA = max(TTPkEstBA / 0.90, TTtran)
	   4117 			  PkLocLUBa = TTtran
	   4118 			else
	   4119 			  TTPkLocBA = 0.
	   4120 			  PkLocLUBA = 0.
	   4121             endif
	   4122 
	   4123 			if (XprTrnSpPk(ifun, iat) .gt. 0.) then
	   4124 			  TTtran = length / (XprTrnSpPk(ifun, iat) / 60.) 
	   4125 			  TTPkXprBA = max(TTPkEstBA / 0.90, TTtran)
	   4126               PkXprLUBA = TTtran
	   4127             else
	   4128 			  TTPkXprBA = 0.
	   4129 			  PkXprLUBA = 0.
	   4130 			endif
	   4131 
	   4132 
	   4133 !   Peak and offpeak Non-stop transit speed - set equal to peak or free speed
	   4134 !   Skip stop transit speeds set to average of local and express speeds 
	   4135 !   McLelland - Dec. 29, 2005
	   4136 

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 93
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4137             TTPkNStBA = TTPkAssnBA 
	   4138 			TTFrNStBA = TTfreeBA 
	   4139 
	   4140             TTPkSkSBA = (TTPkLocBA + TTPkXprBA) / 2.0
	   4141 		    TTFrSkSBA = (TTFrLocBA + TTFrXprBA) / 2.0
	   4142 
	   4143 ! Bike travel time (7 mph) - but no faster than TTfree
	   4144 ! No bikes on freeways, HOV, or guideways.  
	   4145 
	   4146       if (legalfun(ifun) .eq. 1  .or.                             &
	   4147 	      legalfun(ifun) .eq. 22 .or. legalfun(ifun) .eq. 23 .or. &
	   4148 		  legalfun(ifun) .eq. 24 .or. legalfun(ifun) .eq. 25 .or. &
	   4149 		  legalfun(ifun) .eq. 30 .or. legalfun(ifun) .eq. 40) then  
	   4150 
	   4151 		TTbikeBA = 999.
	   4152       else
	   4153 		TTbikeBA = max(length * 8.57, TTfreeBA)
	   4154       endif
	   4155 
	   4156 
	   4157 
	   4158 !  GuideWay speed overrides
	   4159 !  must be legal guideway (funcl=22  HOV 2+ - transit speeds only,
	   4160 !                          funcl=23  HOV 3+ - transit speeds only,
	   4161 !                          funcl=24  HOV 3+ - transit speeds only,
	   4162 !                          funcl=25  HOV 3+ - transit speeds only,
	   4163 !                          funcl=30  Rail, - all speeds 
	   4164 !                          funcl=40  BRT - all speeds
	   4165 
	   4166             if (.not.(legalfun(ifun) .eq. 22 .or. legalfun(ifun) .eq. 23 .or. &
	   4167 			          legalfun(ifun) .eq. 24 .or. legalfun(ifun) .eq. 25 .or. &
	   4168 					  legalfun(ifun) .eq. 30 .or. legalfun(ifun) .eq. 40)) go to 750 
	   4169 			do 742 j = 1, gwcnt
	   4170 			  if (ID .eq. gdwyid(j)) then
	   4171 			    TTPkLocBA = gdwytt(j,2)
	   4172 				TTPkXprBA = TTPkLocBA
	   4173 				TTFrLocBA = TTPkLocBA
	   4174 				TTFrXprBA = TTPkLocBA
	   4175 
	   4176                 TTPkNStBA = gdwytt(j,4)
	   4177 				TTFrNStBA = gdwytt(j,4)
	   4178 
	   4179                 TTPkSkSBA = (TTPkLocBA + TTPkXprBA) / 2.0
	   4180 				TTFrSkSBA = (TTFrLocBA + TTFrXprBA) / 2.0
	   4181 
	   4182 				if (legalfun(ifun) .eq. 22 .or. legalfun(ifun) .eq. 23 .or. &
	   4183 				    legalfun(ifun) .eq. 24 .or. legalfun(ifun) .eq. 25) go to 745
	   4184 
	   4185 				TTfreeBA   = TTPkLocBA
	   4186 				TTpeakBA   = TTPkLocBA
	   4187 				TTPkEstBA  = TTPkLocBA
	   4188 				TTPkPrevBA = TTPkLocBA
	   4189 				TTPkAssnBA = TTPkLocBA
	   4190 				SPfreeBA = length / (TTfreeBA / 60.)
	   4191 				SPpeakBA = length / (TTpeakBA / 60.)
	   4192                 go to 745
	   4193               endif

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 94
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4194   742       continue
	   4195             go to 750
	   4196   745       continue 			  
	   4197 !            if (trace(6))                                                          &
	   4198   		    write(fmsgout, 9745) ID, legalfun(ifun), length, TTPkLocBA, TTfreeBA, SPfreeBA
	   4199  9745       format('Trace(6) CAPSPD 745',i10,' BA Guideway Speed override, funcl=', i3,   &  
	   4200                ' length', f6.2,' TT guideway / all traffic:', 2f8.2,', SPfree:',f6.2)
	   4201 
	   4202   750       continue
	   4203 
	   4204 
	   4205 
	   4206 
	   4207 
	   4208 
	   4209 !  Accumulate statistics for reports
	   4210 
	   4211             linkmiles(ifun,iat) = linkmiles(ifun,iat) + length 
	   4212             num1wT(ifun,iat) =    num1wT(ifun,iat) + 1
	   4213 
	   4214 			if (ifun .lt. 10) then
	   4215 			  if (lnsndx .eq. 1) then 
	   4216   		        linkmiles1(ifun,iat) = linkmiles1(ifun,iat) + length
	   4217                 num1w1(ifun,iat) =    num1w1(ifun,iat) + 1
	   4218 			  else if (lnsndx .eq. 2) then 
	   4219   		        linkmiles2(ifun,iat) = linkmiles2(ifun,iat) + length
	   4220                 num1w2(ifun,iat) =    num1w2(ifun,iat) + 1
	   4221 			  else 
	   4222   		        linkmiles3(ifun,iat) = linkmiles3(ifun,iat) + length
	   4223                 num1w3(ifun,iat) =    num1w3(ifun,iat) + 1
	   4224               endif
	   4225             endif
	   4226 
	   4227 
	   4228 			lanemiles(ifun,iat) = lanemiles(ifun,iat) + (length * lanesBA) 
	   4229 			capT(ifun,iat) =   capT(ifun,iat) +   Cap1hrBA 
	   4230 			TTfrT(ifun,iat) =  TTfrT(ifun,iat) +  TTfreeBA 
	   4231 			TTpkT(ifun,iat) =  TTpkT(ifun,iat) +  TTPkEstBA 
	   4232 			TTLfrT(ifun,iat) = TTLfrT(ifun,iat) + TTLinkFrBA 
	   4233 			TTLpkT(ifun,iat) = TTLpkT(ifun,iat) + TTLinkPkBA 
	   4234             splTT(ifun,iat)  = splTT(ifun,iat) + TTatspl
	   4235 
	   4236 			if (ifun .lt. 10) then
	   4237 			  if (lnsndx .eq. 1) then 
	   4238 			    cap1(ifun,iat) = cap1(ifun,iat) + Cap1hrBA
	   4239 			    TTfr1(ifun,iat) = TTfr1(ifun,iat) + TTFreeBA
	   4240 			    TTpk1(ifun,iat) = TTpk1(ifun,iat) + TTPKEstBA
	   4241 
	   4242 			  else if (lnsndx .eq. 2) then 
	   4243 			    cap2(ifun,iat) =  cap2(ifun,iat) +  Cap1hrAB
	   4244 			    TTfr2(ifun,iat) = TTfr2(ifun,iat) + TTFreeBA
	   4245 			    TTpk2(ifun,iat) = TTpk2(ifun,iat) + TTPkEstBA
	   4246 			  
	   4247 			  else 
	   4248 			    cap3(ifun,iat) =  cap3(ifun, iat) +  Cap1hrAB
	   4249 			    TTfr3(ifun,iat) = TTfr3(ifun,iat) + TTFreeBA
	   4250 			    TTpk3(ifun,iat) = TTpk3(ifun,iat) + TTPkEstBA

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 95
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4251 			  endif
	   4252             endif
	   4253 
	   4254 
	   4255 ! Done with BA direction 
	   4256 
	   4257   800 continue
	   4258 
	   4259 ! Walk travel time (3 mph) - not directional
	   4260 ! No walking on freeways, HOV, or guideways.  
	   4261 ! Walkmode = 10 for ok links, 0 for freeways, etc.
	   4262 
	   4263       if (legalfun(ifun) .eq. 1  .or.                             &
	   4264 	      legalfun(ifun) .eq. 22 .or. legalfun(ifun) .eq. 23 .or. &
	   4265 		  legalfun(ifun) .eq. 24 .or. legalfun(ifun) .eq. 25 .or. &
	   4266 		  legalfun(ifun) .eq. 30 .or. legalfun(ifun) .eq. 40) then  
	   4267 
	   4268 		TTwalkAB = 999.
	   4269 		TTwalkBA = 999.
	   4270 		walkmode = 0
	   4271       else
	   4272 	    TTwalkAB = length * 20.
	   4273 		TTwalkBA = length * 20.
	   4274 		walkmode = 10
	   4275       endif
	   4276 
	   4277 
	   4278 ! v.2.1 additions - keep old peak feedback traveltimes 
	   4279 ! April, 2006
	   4280 ! If RTNSPD (keep old speeds is true) - check new calcs vs old replace those that need replacing 
	   4281 
	   4282       repl = .false. 
	   4283       if (.not.RTNSPD) go to 840 
	   4284 
	   4285 ! AB dir - first check if old TTPeak is 0 (added link), use new stuff, else
	   4286 !  check cap1hr, TTpeak and ttpkloc are the same, if so, write new.  If not, keep set of old times
	   4287 
	   4288       if (dir .lt. 0) go to 810
	   4289 
	   4290 ! if old ttpkassn is 0, new link - use new data
	   4291 
	   4292         if (.not.(O_TTPkAssnAB .gt. 0)) then 
	   4293 		  repl = .true. 
	   4294 		  go to 810
	   4295         end if
	   4296 
	   4297 !  If cap, or TTpkest are different, link has changed - use new data
	   4298 
	   4299         if (abs(cap1hrAB-O_cap1AB) > 0.02 .or. abs(TTPkEstAB-O_TTPkEstAB) > 0.02) then
	   4300 		  repl = .true.
	   4301 		  go to 810
	   4302         end if
	   4303 
	   4304 !  Keep old peak travel times
	   4305 
	   4306 
	   4307   805     continue

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 96
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4308           TTPeakAB = O_TTPkAssnAB
	   4309 		  TTPkPrevAB = O_TTPkPrevAB
	   4310 		  TTPkAssnAB = O_TTPkAssnAB
	   4311 		  TTPkLocAB = O_TTPkLocAB
	   4312 		  TTPkXprAB = O_TTPkXprAB
	   4313 		  TTPkNStAB = O_TTPkNStAB
	   4314 		  TTPkSkSAB = O_TTPkSkSAB		   
	   4315 
	   4316 ! BA direction - same set of checks as AB
	   4317 
	   4318   810 continue 
	   4319       if (dir .gt. 0) go to 820
	   4320 
	   4321 ! if old ttpeak is 0, new link - use new data
	   4322 
	   4323         if (.not.(O_TTPkAssnBA .gt. 0)) then 
	   4324 		  repl = .true. 
	   4325 		  go to 820
	   4326         end if
	   4327 
	   4328 !  If cap, TTpeakest or ttpkloclu are different, link has changed - use new data
	   4329 
	   4330         if (abs(cap1hrBA-O_cap1BA) > 0.02 .or. abs(TTPkEstBA - O_TTPkEstBA) > 0.02) then
	   4331 		  repl = .true.
	   4332 		  go to 820
	   4333 		end if
	   4334 
	   4335 !  Keep old peak travel times
	   4336 
	   4337 
	   4338   815     continue
	   4339           TTPeakBA = O_TTPkAssnBA
	   4340 		  TTPkPrevBA = O_TTPkPrevBA
	   4341 		  TTPkAssnBA = O_TTPkAssnBA
	   4342 		  TTPkLocBA = O_TTPkLocBA
	   4343 		  TTPkXprBA = O_TTPkXprBA
	   4344 		  TTPkNStBA = O_TTPkNStBA
	   4345 		  TTPkSkSBA = O_TTPkSkSBA		   
	   4346 
	   4347 ! if old times were NOT written, put comment in log file
	   4348 
	   4349   820 continue
	   4350       if (repl) then
	   4351 	    replnum = replnum + 1
	   4352 		write(fmsgout, 9820) replnum, ID, dir, ifun, TTpeakAB, TTpeakBA, TTPkLocAB, TTPkLocBA
	   4353  9820   format(i6, ' NEW data only for ID=',i8,' dir=',i2,' funcl=',i2,' TTpeak=',2f8.2,' TTpkLoc=',2f8.2)
	   4354       end if		      
	   4355       go to 840
	   4356 
	   4357 ! v. 2.9 Funcl = 85 - Walk to transit station - flat time of 1 minute
	   4358 
	   4359   830 continue
	   4360 	  SPfreeAB = 3.0
	   4361 	  SPpeakAB = 3.0
	   4362       TTfreeAB = 1.0
	   4363       TTpeakAB = 1.0
	   4364       TTPkEstAB = 1.0

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 97
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4365       TTPkAssnAB = 1.0
	   4366       TTPkLocAB = 1.0
	   4367       TTPkXprAB = 1.0
	   4368       TTPkNStAB = 1.0
	   4369 	  TTPkSkSAB = 1.0
	   4370       TTFrLocAB = 1.0
	   4371       TTFrXprAB = 1.0
	   4372       TTFrNStAB = 1.0
	   4373 	  TTFrSkSAB = 1.0
	   4374       TTwalkAB = 1.0
	   4375 	  TTbikeAB = 1.0
	   4376 	  SPfreeBA = 3.0
	   4377 	  SPpeakBA = 3.0
	   4378       TTfreeBA = 1.0
	   4379       TTpeakBA = 1.0
	   4380       TTPkEstBA = 1.0
	   4381       TTPkAssnBA = 1.0
	   4382       TTPkLocBA = 1.0
	   4383       TTPkXprBA = 1.0
	   4384       TTPkNStBA = 1.0
	   4385 	  TTPkSkSBA = 1.0
	   4386       TTFrLocBA = 1.0
	   4387       TTFrXprBA = 1.0
	   4388       TTFrNStBA = 1.0
	   4389 	  TTFrSkSBA = 1.0
	   4390       TTwalkBA = 1.0
	   4391 	  TTbikeBA = 1.0
	   4392 	  walkmode = 10
	   4393 	  netalpha = 0.15
	   4394 	  netbeta = 4.00
	   4395 	  
	   4396 
	   4397 ! WRITE record
	   4398 
	   4399   840 continue
	   4400 
	   4401       write(fnetout, 9840)  ID,                                             & 
	   4402 							SPfreeAB, SPfreeBA, SPpeakAB, SPpeakBA,         &
	   4403 				        	TTfreeAB, TTfreeBA, TTpeakAB, TTpeakBA,         &
	   4404    	  				        TTLinkFrAB, TTLinkFrBA, TTLinkPkAB, TTLinkPkBA, &  
	   4405 					        IntDelFr_A, IntDelFr_B, IntDelPk_A, IntDelPk_B, &
	   4406 					        CapPk3hrAB, CapPk3hrBA, CapMidAB, CapMidBA,     &
	   4407 					        CapNightAB, CapNightBA, Cap1hrAB, Cap1hrBA,     &
	   4408 					        TTPkEstAB, TTPkEstBA, TTPkPrevAB, TTPkPrevBA,   &
	   4409 					        TTPkAssnAB, TTPkAssnBA, TTPkLocAB, TTPkLocBA,   &
	   4410 					        TTPkXprAB, TTPkXprBA, TTFrLocAB, TTFrLocBA,     &
	   4411 					        TTFrXprAB, TTFrXprBA, TTwalkAB, TTwalkBA,       &
	   4412 							netalpha, netbeta,    iat,      TTbikeAB,       &  
	   4413 							TTbikeBA, walkmode,                             &
	   4414 							PkLocLUAB, PkLocLUBa, PkXprLUAB, PkXprLUBA,     &
	   4415 							TTPkNStAB, TTPkNStBA, TTFrNStAB, TTFrNStBA,     &    	
	   4416 							TTPkSkSAB, TTPkSkSBA, TTFrSkSAB, TTFrSkSBA,     &
	   4417 							SpdLimRun    	
	   4418 
	   4419  9840                format(i10,                                          & !ID
	   4420                             f10.4, f10.4, f10.4, f10.4,                   & !SPfreeAB
	   4421 							f10.5, f10.5, f10.5, f10.5,                   & !TTfreeAB

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 98
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4422 							f10.5, f10.5, f10.5, f10.5,                   & !TTLinkfrAB
	   4423 							f10.5, f10.5, f10.5, f10.5,                   & !IntDelFr_A
	   4424 							f10.2, f10.2, f10.2, f10.2,                   & !CapPk3hrAB
	   4425 							f10.2, f10.2, f10.2, f10.2,                   & !CapNightAB
	   4426 							f8.4,  f8.4,  f8.4,  f8.4,                    & !TTPkestAB
	   4427 							f8.4,  f8.4,  f8.4,  f8.4,                    & !TTPkAssnAB
	   4428 							f8.4,  f8.4,  f8.4,  f8.4,                    & !TTPkXprAB
	   4429 							f8.4,  f8.4,  f8.4,  f8.4,                    & !TTFrXprAB
	   4430 							f8.4,  f8.4,  i8,    f8.4,                    & !netalpha
	   4431 							f8.4,  i8,                                    & !TTbikeBA
	   4432 							f8.4,  f8.4,  f8.4,  f8.4,                    & !PkLocLUAB
	   4433 							f8.4,  f8.4,  f8.4,  f8.4,                    & !TTPkNStAB
	   4434 							f8.4,  f8.4,  f8.4,  f8.4,                    & !TTPkSkSAB
	   4435 							i8)                                             !SpdLimRun
	   4436 
	   4437  
	   4438 ! get next record
	   4439  
	   4440       go to 100                               
	   4441  
	   4442 
	   4443   850 continue                                                          
	   4444 
	   4445 ! WRITE dictionary file 
	   4446 
	   4447       write(fdctout,9850) 
	   4448  9850 format('Metrolina Capspeed OUT File'/'530'/                          &
	   4449              '"ID",I,1,10,0,10,0,,,"",,Blank,'/                            &
	   4450              '"SPfreeAB",R,11,10,0,10,4,,,"",,Blank,'/                     & 
	   4451              '"SPfreeBA",R,21,10,0,10,4,,,"",,Blank,'/                     & 
	   4452              '"SPpeakAB",R,31,10,0,10,4,,,"",,Blank,'/                     &
	   4453              '"SPpeakBA",R,41,10,0,10,4,,,"",,Blank,'/                     &
	   4454              '"TTfreeAB",R,51,10,0,10,5,,,"",,Blank,'/                     &  
	   4455              '"TTfreeBA",R,61,10,0,10,5,,,"",,Blank,'/                     & 
	   4456              '"TTpeakAB",R,71,10,0,10,5,,,"",,Blank,'/                     &
	   4457              '"TTpeakBA",R,81,10,0,10,5,,,"",,Blank,'/                     & 
	   4458              '"TTLinkFrAB",R,91,10,0,10,5,,,"",,Blank,'/                   & 
	   4459              '"TTLinkFrBA",R,101,10,0,10,5,,,"",,Blank,'/                  &
	   4460              '"TTLinkPkAB",R,111,10,0,10,5,,,"",,Blank,'/                  & 
	   4461              '"TTLinkPkBA",R,121,10,0,10,5,,,"",,Blank,'/                  &
	   4462              '"IntDelFr_A",R,131,10,0,10,2,,,"",,Blank,'/                  &
	   4463              '"IntDelFr_B",R,141,10,0,10,2,,,"",,Blank,'/                  &
	   4464              '"IntDelPk_A",R,151,10,0,10,2,,,"",,Blank,'/                  & 
	   4465              '"IntDelPk_B",R,161,10,0,10,2,,,"",,Blank,'/                  &
	   4466              '"CapPk3hrAB",R,171,10,0,10,2,,,"",,Blank,'/                  &
	   4467              '"CapPk3hrBA",R,181,10,0,10,2,,,"",,Blank,'/                  &
	   4468              '"CapMidAB",R,191,10,0,10,2,,,"",,Blank,'/                    & 
	   4469              '"CapMidBA",R,201,10,0,10,2,,,"",,Blank,'/                    & 
	   4470              '"CapNightAB",R,211,10,0,10,2,,,"",,Blank,'/                  &  
	   4471              '"CapNightBA",R,221,10,0,10,2,,,"",,Blank,'/                  & 
	   4472              '"Cap1hrAB",R,231,10,0,10,2,,,"",,Blank,'/                    &
	   4473              '"Cap1hrBA",R,241,10,0,10,2,,,"",,Blank,'/                    & 
	   4474              '"TTPkEstAB",R,251,8,0,8,4,,,"",,Blank,'/                   &
	   4475              '"TTPkEstBA",R,259,8,0,8,4,,,"",,Blank,'/                   & 
	   4476              '"TTPkPrevAB",R,267,8,0,8,4,,,"",,Blank,'/                  &
	   4477              '"TTPkPrevBA",R,275,8,0,8,4,,,"",,Blank,'/                  & 
	   4478              '"TTPkAssnAB",R,283,8,0,8,4,,,"",,Blank,'/                  &

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 99
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4479              '"TTPkAssnBA",R,291,8,0,8,4,,,"",,Blank,'/                  &
	   4480              '"TTPkLocAB",R,299,8,0,8,4,,,"",,Blank,'/                   &
	   4481              '"TTPkLocBA",R,307,8,0,8,4,,,"",,Blank,'/                   &
	   4482              '"TTPkXprAB",R,315,8,0,8,4,,,"",,Blank,'/                   &
	   4483              '"TTPkXprBA",R,323,8,0,8,4,,,"",,Blank,'/                   &
	   4484              '"TTFrLocAB",R,331,8,0,8,4,,,"",,Blank,'/                   &
	   4485              '"TTFrLocBA",R,339,8,0,8,4,,,"",,Blank,'/                   &
	   4486              '"TTFrXprAB",R,347,8,0,8,4,,,"",,Blank,'/                   &
	   4487              '"TTFrXprBA",R,355,8,0,8,4,,,"",,Blank,'/                   &
	   4488              '"TTwalkAB",R,363,8,0,8,4,,,"",,Blank,'/                    &
	   4489              '"TTwalkBA",R,371,8,0,8,4,,,"",,Blank,'/                    & 
	   4490              '"alpha",R,379,8,0,8,4,,,"",,Blank,'/                       &
	   4491              '"beta",R,387,8,0,8,4,,,"",,Blank,'/                        &
	   4492              '"areatp",I,395,8,0,8,0,,,"",,Blank,'/                      &
	   4493              '"TTbikeAB",R,403,8,0,8,4,,,"",,Blank,'/                    &
	   4494              '"TTbikeBA",R,411,8,0,8,4,,,"",,Blank,'/                    &  
	   4495              '"walkmode",I,419,8,0,8,0,,,"",,Blank,'/                    &
	   4496              '"PkLocLUAB",R,427,8,0,8,4,,,"",,Blank,'/                   &
	   4497              '"PkLocLUBA",R,435,8,0,8,4,,,"",,Blank,'/                   &
	   4498              '"PkXprLUAB",R,443,8,0,8,4,,,"",,Blank,'/                   &
	   4499              '"PkXprLUBA",R,451,8,0,8,4,,,"",,Blank,'/                   &
	   4500              '"TTPkNStAB",R,459,8,0,8,4,,,"",,Blank,'/                   &
	   4501              '"TTPkNStBA",R,467,8,0,8,4,,,"",,Blank,'/                   &
	   4502              '"TTFrNStAB",R,475,8,0,8,4,,,"",,Blank,'/                   &
	   4503              '"TTFrNStBA",R,483,8,0,8,4,,,"",,Blank,'/                   &
	   4504              '"TTPkSkSAB",R,491,8,0,8,4,,,"",,Blank,'/                   &
	   4505              '"TTPkSkSBA",R,499,8,0,8,4,,,"",,Blank,'/                   &
	   4506              '"TTFrSkSAB",R,507,8,0,8,4,,,"",,Blank,'/                   &
	   4507              '"TTFrSksBA",R,515,8,0,8,4,,,"",,Blank,'/                   &                   
	   4508              '"SpdLimRun",I,523,8,0,8,0,,,"",,Blank,'/)                          
	   4509 			 
	   4510 			                     
	   4511 
	   4512 
	   4513 
	   4514 !  Totals on summary arrays 
	   4515 
	   4516 
	   4517       ii = maxfuncl + 1
	   4518       jj = maxat + 1
	   4519 
	   4520       do 860 i = 1, maxfuncl
	   4521 	    do 860 j = 1, maxat
	   4522 	      numlinks(ii,j)  = numlinks(ii,j)  + numlinks(i,j)
	   4523 	      numlinks(i,jj)  = numlinks(i,jj)  + numlinks(i,j)
	   4524 		  numlinks(ii,jj) = numlinks(ii,jj) + numlinks(i,j)
	   4525 
	   4526 	      num1wT(ii,j)  = num1wT(ii,j)  + num1wT(i,j)
	   4527 	      num1wT(i,jj)  = num1wT(i,jj)  + num1wT(i,j)
	   4528 		  num1wT(ii,jj) = num1wT(ii,jj) + num1wT(i,j)
	   4529 
	   4530   		  roadmiles(ii,j)  = roadmiles(ii,j)  + roadmiles(i,j)
	   4531 		  roadmiles(i,jj)  = roadmiles(i,jj)  + roadmiles(i,j)
	   4532 		  roadmiles(ii,jj) = roadmiles(ii,jj) + roadmiles(i,j)
	   4533 
	   4534   		  linkmiles(ii,j)  = linkmiles(ii,j)  + linkmiles(i,j)
	   4535 		  linkmiles(i,jj)  = linkmiles(i,jj)  + linkmiles(i,j)

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 100
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4536 		  linkmiles(ii,jj) = linkmiles(ii,jj) + linkmiles(i,j)
	   4537 
	   4538 		  lanemiles(ii,j)  = lanemiles(ii,j)  + lanemiles(i,j)
	   4539 		  lanemiles(i,jj)  = lanemiles(i,jj)  + lanemiles(i,j)
	   4540 		  lanemiles(ii,jj) = lanemiles(ii,jj) + lanemiles(i,j)
	   4541 
	   4542 		  capT(ii,j)  = capT(ii,j)  + capT(i,j)
	   4543 		  capT(i,jj)  = capT(i,jj)  + capT(i,j)
	   4544 		  capT(ii,jj) = capT(ii,jj) + capT(i,j)
	   4545 
	   4546 		  TTfrT(ii,j)  = TTfrT(ii,j)  + TTfrT(i,j)
	   4547 		  TTfrT(i,jj)  = TTfrT(i,jj)  + TTfrT(i,j)
	   4548 		  TTfrT(ii,jj) = TTfrT(ii,jj) + TTfrT(i,j)
	   4549 
	   4550 		  TTpkT(ii,j)  = TTpkT(ii,j)  + TTpkT(i,j)
	   4551 		  TTpkT(i,jj)  = TTpkT(i,jj)  + TTpkT(i,j)
	   4552 		  TTpkT(ii,jj) = TTpkT(ii,jj) + TTpkT(i,j)
	   4553 
	   4554 		  TTLfrT(ii,j)  = TTLfrT(ii,j)  + TTLfrT(i,j)
	   4555 		  TTLfrT(i,jj)  = TTLfrT(i,jj)  + TTLfrT(i,j)
	   4556 		  TTLfrT(ii,jj) = TTLfrT(ii,jj) + TTLfrT(i,j)
	   4557 
	   4558 		  TTLpkT(ii,j)  = TTLpkT(ii,j)  + TTLpkT(i,j)
	   4559 		  TTLpkT(i,jj)  = TTLpkT(i,jj)  + TTLpkT(i,j)
	   4560 		  TTLpkT(ii,jj) = TTLpkT(ii,jj) + TTLpkT(i,j)
	   4561 
	   4562 		  splTT(ii,j)  = splTT(ii,j)  + splTT(i,j)
	   4563 		  splTT(i,jj)  = splTT(i,jj)  + splTT(i,j)
	   4564 		  splTT(ii,jj) = splTT(ii,jj) + splTT(i,j)
	   4565 
	   4566    860 continue
	   4567 
	   4568 ! roadway links only totals
	   4569 
	   4570      ii = 10
	   4571      jj = maxat + 1
	   4572      do 870 i = 1, 9
	   4573 	   do 870 j = 1, maxat
	   4574 		 linkmiles1(ii,j)  = linkmiles1(ii,j)  + linkmiles1(i,j)
	   4575 		 linkmiles1(i,jj)  = linkmiles1(i,jj)  + linkmiles1(i,j)
	   4576 		 linkmiles1(ii,jj) = linkmiles1(ii,jj) + linkmiles1(i,j)
	   4577 
	   4578 		 linkmiles2(ii,j)  = linkmiles2(ii,j) +  linkmiles2(i,j)
	   4579 		 linkmiles2(i,jj)  = linkmiles2(i,jj) +  linkmiles2(i,j)
	   4580 		 linkmiles2(ii,jj) = linkmiles2(ii,jj) + linkmiles2(i,j)
	   4581 
	   4582 		 linkmiles3(ii,j)  = linkmiles3(ii,j) +  linkmiles3(i,j)
	   4583 		 linkmiles3(i,jj)  = linkmiles3(i,jj) +  linkmiles3(i,j)
	   4584 		 linkmiles3(ii,jj) = linkmiles3(ii,jj) + linkmiles3(i,j)
	   4585 
	   4586 		  cap1(ii,j)  = cap1(ii,j)  + cap1(i,j)
	   4587 		  cap1(i,jj)  = cap1(i,jj)  + cap1(i,j)
	   4588 		  cap1(ii,jj) = cap1(ii,jj) + cap1(i,j)
	   4589 
	   4590 		  cap2(ii,j)  = cap2(ii,j)  + cap2(i,j)
	   4591 		  cap2(i,jj)  = cap2(i,jj)  + cap2(i,j)
	   4592 		  cap2(ii,jj) = cap2(ii,jj) + cap2(i,j)

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 101
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4593 
	   4594 		  cap3(ii,j)  = cap3(ii,j)  + cap3(i,j)
	   4595 		  cap3(i,jj)  = cap3(i,jj)  + cap3(i,j)
	   4596 		  cap3(ii,jj) = cap3(ii,jj) + cap3(i,j)
	   4597 
	   4598 		  TTfr1(ii,j)  = TTfr1(ii,j)  + TTfr1(i,j)
	   4599 		  TTfr1(i,jj)  = TTfr1(i,jj)  + TTfr1(i,j)
	   4600 		  TTfr1(ii,jj) = TTfr1(ii,jj) + TTfr1(i,j)
	   4601 
	   4602 		  TTfr2(ii,j)  = TTfr2(ii,j)  + TTfr2(i,j)
	   4603 		  TTfr2(i,jj)  = TTfr2(i,jj)  + TTfr2(i,j)
	   4604 		  TTfr2(ii,jj) = TTfr2(ii,jj) + TTfr2(i,j)
	   4605 
	   4606 		  TTfr3(ii,j)  = TTfr3(ii,j)  + TTfr3(i,j)
	   4607 		  TTfr3(i,jj)  = TTfr3(i,jj)  + TTfr3(i,j)
	   4608 		  TTfr3(ii,jj) = TTfr3(ii,jj) + TTfr3(i,j)
	   4609 
	   4610 		  TTpk1(ii,j)  = TTpk1(ii,j)  + TTpk1(i,j)
	   4611 		  TTpk1(i,jj)  = TTpk1(i,jj)  + TTpk1(i,j)
	   4612 		  TTpk1(ii,jj) = TTpk1(ii,jj) + TTpk1(i,j)
	   4613 
	   4614 		  TTpk2(ii,j)  = TTpk2(ii,j)  + TTpk2(i,j)
	   4615 		  TTpk2(i,jj)  = TTpk2(i,jj)  + TTpk2(i,j)
	   4616 		  TTpk2(ii,jj) = TTpk2(ii,jj) + TTpk2(i,j)
	   4617 
	   4618 		  TTpk3(ii,j)  = TTpk3(ii,j)  + TTpk3(i,j)
	   4619 		  TTpk3(i,jj)  = TTpk3(i,jj)  + TTpk3(i,j)
	   4620 		  TTpk3(ii,jj) = TTpk3(ii,jj) + TTpk3(i,j)
	   4621 
	   4622 	      num1w1(ii,j)  = num1w1(ii,j)  + num1w1(i,j)
	   4623 	      num1w1(i,jj)  = num1w1(i,jj)  + num1w1(i,j)
	   4624 		  num1w1(ii,jj) = num1w1(ii,jj) + num1w1(i,j)
	   4625 
	   4626 	      num1w2(ii,j)  = num1w2(ii,j)  + num1w2(i,j)
	   4627 	      num1w2(i,jj)  = num1w2(i,jj)  + num1w2(i,j)
	   4628 		  num1w2(ii,jj) = num1w2(ii,jj) + num1w2(i,j)
	   4629 
	   4630 	      num1w3(ii,j)  = num1w3(ii,j)  + num1w3(i,j)
	   4631 	      num1w3(i,jj)  = num1w3(i,jj)  + num1w3(i,j)
	   4632 		  num1w3(ii,jj) = num1w3(ii,jj) + num1w3(i,j)
	   4633 
	   4634 
	   4635    870 continue
	   4636 
	   4637 		 
	   4638 !  Reports
	   4639 
	   4640       write(fmsgout, 9890) lin2, linAB, linBA, lwarn
	   4641  9890 format(////'CAPSPD complete',/,                               &
	   4642              '  Total link records        ', i6,/                   & 
	   4643 			 '  AB direction link records:', i6,/                   &
	   4644 			 '  BA direction link records:', i6,/,                  &
	   4645 			 '  Warnings issued:          ', i6)	   
	   4646 
	   4647 !  Number of links
	   4648 
	   4649       

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 102
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4650       write(fmsgout,9900)
	   4651  9900 format(/////'CAPSPD final statistics',//        &
	   4652              'Number of links'/)
	   4653       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4654  9902 format('Funcl                          Area Type',/,16x, 5a10,'     TOTAL')
	   4655       do 905 i = 1, maxfuncl
	   4656         write(fmsgout,9905), legalfun(i), funname(i), (numlinks(i,j),j=1,maxat+1) 
	   4657   905 continue
	   4658       write(fmsgout,9906) (numlinks(maxfuncl+1,j),j=1,maxat+1) 
	   4659  9905 format(i3,1x,a10,2x,6i10)
	   4660  9906 format(9x,'TOTAL',2x,6i10)
	   4661 
	   4662 !  Link miles
	   4663 
	   4664       write(fmsgout,9910)
	   4665  9910 format(//'Roadway miles'/)
	   4666       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4667       do 915 i = 1, maxfuncl
	   4668         write(fmsgout,9915), legalfun(i), funname(i), (roadmiles(i,j),j=1,maxat+1) 
	   4669   915 continue
	   4670       write(fmsgout,9916) (roadmiles(maxfuncl+1,j),j=1,maxat+1) 
	   4671  9915 format(i3,1x,a10,2x,6f10.2)
	   4672  9916 format(9x,'TOTAL',2x,6f10.2)
	   4673 
	   4674 !  Lane miles
	   4675 
	   4676       write(fmsgout,9920)
	   4677  9920 format(//'Lane miles'/)
	   4678       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4679       do 925 i = 1, maxfuncl
	   4680         write(fmsgout,9915), legalfun(i), funname(i), (lanemiles(i,j),j=1,maxat+1) 
	   4681   925 continue
	   4682       write(fmsgout,9916) (lanemiles(maxfuncl+1,j),j=1,maxat+1) 
	   4683 
	   4684 !  Avg Capacity - total 
	   4685 
	   4686       do 930 i = 1, maxfuncl+1
	   4687 	    do 930 j = 1, maxat+1
	   4688           if (num1wT(i,j) .gt. 0.) then
	   4689  		    T(i,j) = capT(i,j) / num1wT(i,j)
	   4690           else
	   4691 		    T(i,j) = 0.
	   4692           endif
	   4693   930 continue
	   4694 
	   4695       write(fmsgout,9930)
	   4696  9930 format(//'Average hourly capacity (All facilities)'/)
	   4697       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4698       do 935 i = 1, maxfuncl
	   4699         write(fmsgout,9935), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4700   935 continue
	   4701       write(fmsgout,9936) (T(maxfuncl+1,j),j=1,maxat+1) 
	   4702  9935 format(i3,1x,a10,2x,6f10.0)
	   4703  9936 format(9x,'TOTAL',2x,6f10.0)
	   4704  
	   4705 !  Avg Capacity - 1 lane (directional)
	   4706 

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 103
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4707       do 940 i = 1, 10
	   4708 	    do 940 j = 1, maxat + 1 
	   4709           if (num1w1(i,j) .gt. 0.) then
	   4710  		    T(i,j) = cap1(i,j) / num1w1(i,j)
	   4711           else
	   4712 		    T(i,j) = 0.
	   4713           endif
	   4714   940 continue
	   4715 
	   4716       write(fmsgout,9940)
	   4717  9940 format(//'Average hourly capacity - 1 lane (by direction)'/)
	   4718       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4719       do 945 i = 1, 9
	   4720         write(fmsgout,9935), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4721   945 continue
	   4722       write(fmsgout,9936) (T(10,j),j=1,maxat+1) 
	   4723 
	   4724 !  Avg Capacity - 2 lane (directional)
	   4725 
	   4726       do 950 i = 1, 10
	   4727 	    do 950 j = 1, maxat + 1
	   4728           if (num1w2(i,j) .gt. 0.) then
	   4729  		    T(i,j) = cap2(i,j) / num1w2(i,j)
	   4730           else
	   4731 		    T(i,j) = 0.
	   4732           endif
	   4733   950 continue
	   4734 
	   4735       write(fmsgout,9950)
	   4736  9950 format(//'Average hourly capacity - 2 lanes(by direction)'/)
	   4737       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4738       do 955 i = 1, 9
	   4739         write(fmsgout,9935), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4740   955 continue
	   4741      write(fmsgout,9936) (T(10,j),j=1,maxat+1) 
	   4742 
	   4743 !  Avg Capacity - 3+lane (directional)
	   4744 
	   4745       do 960 i = 1, 10
	   4746 	    do 960 j = 1, maxat + 1
	   4747           if (num1w3(i,j) .gt. 0.) then
	   4748  		    T(i,j) = cap3(i,j) / num1w3(i,j)
	   4749           else
	   4750 		    T(i,j) = 0.
	   4751           endif
	   4752 
	   4753   960 continue
	   4754       write(fmsgout,9960)
	   4755  9960 format(//'Average hourly capacity - 3+ lanes(by direction)'/)
	   4756       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4757       do 965 i = 1, 9
	   4758         write(fmsgout,9935), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4759   965 continue
	   4760       write(fmsgout,9936) (T(10,j),j=1,maxat+1) 
	   4761 
	   4762 !  Avg Free speed - total 
	   4763 

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 104
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4764       do 970 i = 1, maxfuncl + 1
	   4765 	    do 970 j = 1, maxat + 1
	   4766           if (TTfrT(i,j) .gt. 0.) then
	   4767             T(i,j) = linkmiles(i,j) / (TTfrT(i,j) / 60.)
	   4768           else
	   4769 		    T(i,j) = 0.
	   4770           endif
	   4771   970 continue
	   4772 
	   4773       write(fmsgout,9970)
	   4774  9970 format(//'Average free speed (All facilities)'/)
	   4775       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4776       do 975 i = 1, maxfuncl
	   4777         write(fmsgout,9975), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4778   975 continue
	   4779       write(fmsgout,9976) (T(maxfuncl+1,j),j=1,maxat+1) 
	   4780  9975 format(i3,1x,a10,2x,6f10.1)
	   4781  9976 format(9x,'TOTAL',2x,6f10.1)
	   4782 
	   4783  
	   4784 !  Avg free speed - 1 lane (directional)
	   4785 
	   4786       do 980 i = 1, 10
	   4787 	    do 980 j = 1, maxat + 1
	   4788           if (TTfr1(i,j) .gt. 0.) then
	   4789             T(i,j) = linkmiles1(i,j) / (TTfr1(i,j) / 60.)
	   4790           else
	   4791 		    T(i,j) = 0.
	   4792           endif
	   4793   980 continue
	   4794 
	   4795       write(fmsgout,9980)
	   4796  9980 format(//'Average free speed - 1 lane (by direction)'/)
	   4797       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4798       do 985 i = 1, 9
	   4799         write(fmsgout,9975), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4800   985 continue
	   4801       write(fmsgout,9976) (T(10,j),j=1,maxat+1) 
	   4802 
	   4803 !  Avg free speed - 2 lanes (directional)
	   4804 
	   4805       do 990 i = 1, 10
	   4806 	    do 990 j = 1, maxat + 1
	   4807           if (TTfr2(i,j) .gt. 0.) then
	   4808             T(i,j) = linkmiles2(i,j) / (TTfr2(i,j) / 60.)
	   4809           else
	   4810 		    T(i,j) = 0.
	   4811           endif
	   4812   990 continue
	   4813 
	   4814       write(fmsgout,9990)
	   4815  9990 format(//'Average free speed - 2 lanes (by direction)'/)
	   4816       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4817       do 995 i = 1, 9
	   4818         write(fmsgout,9975), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4819   995 continue
	   4820       write(fmsgout,9976) (T(10,j),j=1,maxat+1) 

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 105
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4821 
	   4822 !  Avg free speed - 3+ lanes (directional)
	   4823 
	   4824       do 1000 i = 1, 10
	   4825 	    do 1000 j = 1, maxat + 1
	   4826           if (TTfr3(i,j) .gt. 0.) then
	   4827             T(i,j) = linkmiles3(i,j) / (TTfr3(i,j) / 60.)
	   4828           else
	   4829 		    T(i,j) = 0.
	   4830           endif
	   4831  1000 continue
	   4832 
	   4833       write(fmsgout,1003)
	   4834  1003 format(//'Average free speed - 3+ lanes (by direction)'/)
	   4835       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4836       do 1005 i = 1, 9
	   4837         write(fmsgout,9975), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4838  1005 continue
	   4839       write(fmsgout,9976) (T(10,j),j=1,maxat+1) 
	   4840 
	   4841 !  Avg loaded speed - total 
	   4842 
	   4843       do 1010 i = 1, maxfuncl + 1
	   4844 	    do 1010 j = 1, maxat + 1
	   4845           if (TTpkT(i,j) .gt. 0.) then
	   4846             T(i,j) = linkmiles(i,j) / (TTpkT(i,j) / 60.)
	   4847           else
	   4848 		    T(i,j) = 0.
	   4849           endif
	   4850  1010 continue
	   4851 
	   4852       write(fmsgout,1011)
	   4853  1011 format(//'Average estimated loaded speed (All facilities)'/)
	   4854       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4855       do 1015 i = 1, maxfuncl
	   4856         write(fmsgout,9975), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4857  1015 continue
	   4858       write(fmsgout,9976) (T(maxfuncl+1,j),j=1,maxat+1) 
	   4859  
	   4860 !  Avg loaded speed - 1 lane (directional)
	   4861 
	   4862       do 1020 i = 1, 10
	   4863 	    do 1020 j = 1, maxat + 1
	   4864           if (TTpk1(i,j) .gt. 0.) then
	   4865             T(i,j) = linkmiles1(i,j) / (TTpk1(i,j) / 60.)
	   4866           else
	   4867 		    T(i,j) = 0.
	   4868           endif
	   4869  1020 continue
	   4870 
	   4871       write(fmsgout,1021)
	   4872  1021 format(//'Average estimated loaded speed - 1 lane (by direction)'/)
	   4873       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4874       do 1025 i = 1, 9
	   4875         write(fmsgout,9975), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4876  1025 continue
	   4877       write(fmsgout,9976) (T(10,j),j=1,maxat+1) 

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 106
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4878 
	   4879 !  Avg loaded speed - 2 lanes (directional)
	   4880 
	   4881       do 1030 i = 1, 10
	   4882 	    do 1030 j = 1, maxat + 1
	   4883           if (TTpk2(i,j) .gt. 0.) then
	   4884             T(i,j) = linkmiles2(i,j) / (TTpk2(i,j) / 60.)
	   4885           else
	   4886 		    T(i,j) = 0.
	   4887           endif
	   4888  1030 continue
	   4889 
	   4890       write(fmsgout,1031)
	   4891  1031 format(//'Average estimated loaded speed - 2 lanes (by direction)'/)
	   4892       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4893       do 1035 i = 1, 9
	   4894         write(fmsgout,9975), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4895  1035 continue
	   4896       write(fmsgout,9976) (T(10,j),j=1,maxat+1) 
	   4897 
	   4898 !  Avg loaded speed - 3+ lanes (directional)
	   4899 
	   4900       do 1040 i = 1, 10
	   4901 	    do 1040 j = 1, maxat + 1
	   4902           if (TTpk3(i,j) .gt. 0.) then
	   4903             T(i,j) = linkmiles3(i,j) / (TTpk3(i,j) / 60.)
	   4904           else
	   4905 		    T(i,j) = 0.
	   4906           endif
	   4907  1040 continue
	   4908 
	   4909       write(fmsgout,1041)
	   4910  1041 format(//'Average estimated loaded speed - 3+ lanes (by direction)'/)
	   4911       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4912       do 1042 i = 1, 9
	   4913         write(fmsgout,9915), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4914  1042 continue
	   4915       write(fmsgout,9916) (T(10,j),j=1,maxat+1) 
	   4916 
	   4917 
	   4918 !  Avg speed limit  - total 
	   4919 
	   4920       do 1043 i = 1, maxfuncl + 1
	   4921 	    do 1043 j = 1, maxat + 1
	   4922           if (splTT(i,j) .gt. 0.) then
	   4923             T(i,j) = linkmiles(i,j) / (splTT(i,j) / 60.)
	   4924           else
	   4925 		    T(i,j) = 0.
	   4926           endif
	   4927  1043 continue
	   4928 
	   4929       write(fmsgout,1044)
	   4930  1044 format(//'Average speed limit (All facilities)'/)
	   4931       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4932       do 1045 i = 1, maxfuncl
	   4933         write(fmsgout,9975), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4934  1045 continue

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 107
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4935       write(fmsgout,9976) (T(maxfuncl+1,j),j=1,maxat+1) 
	   4936 
	   4937 
	   4938 !  Pct intersection delay to total delay - free speed
	   4939 
	   4940       do 1050 i = 1, maxfuncl + 1
	   4941 	    do 1050 j = 1, maxat + 1
	   4942           if (TTfrT(i,j) .gt. 0.) then
	   4943             T(i,j) = (1- (TTLfrT(i,j) / TTfrT(i,j))) * 100.
	   4944           else
	   4945 		    T(i,j) = 0.
	   4946           endif
	   4947  1050 continue
	   4948 
	   4949       write(fmsgout,1051)
	   4950  1051 format(//'Free speed - percentage of total travel time at intersection'/)
	   4951       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4952       do 1055 i = 1, maxfuncl
	   4953         write(fmsgout,9975), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4954  1055 continue
	   4955       write(fmsgout,9976) (T(maxfuncl+1,j),j=1,maxat+1) 
	   4956  
	   4957 !  Pct intersection delay to total delay - load speed
	   4958 
	   4959       do 1060 i = 1, maxfuncl + 1
	   4960 	    do 1060 j = 1, maxat + 1
	   4961           if (TTpkT(i,j) .gt. 0.) then
	   4962             T(i,j) = (1- (TTLpkT(i,j) / TTpkT(i,j))) * 100.
	   4963           else
	   4964 		    T(i,j) = 0.
	   4965           endif
	   4966  1060 continue
	   4967 
	   4968       write(fmsgout,1061)
	   4969  1061 format(//'Estimated loaded speed - percentage of total travel time at intersection'/)
	   4970       write(fmsgout,9902) (atname(j), j=1,maxat)
	   4971       do 1065 i = 1, maxfuncl
	   4972         write(fmsgout,9975), legalfun(i), funname(i), (T(i,j),j=1,maxat+1) 
	   4973  1065 continue
	   4974       write(fmsgout,9976) (T(maxfuncl+1,j),j=1,maxat+1) 
	   4975  
	   4976       END subroutine CAPSPD                                                                       

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 108
                                                                 9-Dec-2011 10:07:43  source\capspd.F90



PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 _OPT                                    13 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  7 _PARAM                                  17 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  8 _NARRAY                            1050000 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  9 _LOOKUP                               7192 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
 10 _LEGALVAL                              701 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
 11 _AT                                 120000 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
 12 _GW                                   6004 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
 13 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated              1315957


ENTRY POINTS

 Address      Name  
                    
  4-00009BDA  CAPSPD


VARIABLES

 Address      Type  Name          Address      Type  Name          Address      Type  Name          Address      Type  Name        
                                                                                                                                   
  1-000000E0  R*4   AAWT               **      R*4   CAPNIGHTAB     5-00000028  I*4   FATYPEIN       1-000000C0  I*4   IDEVDEN     
  1-000001D0  I*4   ANODE              **      R*4   CAPNIGHTBA     5-00000020  I*4   FCNTLOUT       1-000000BC  I*4   IDRVWY      
  1-00000170  CHAR  A_CONTROL      9-00001578  R*4   CAPNITEFAC     5-00000000  I*4   FCNTRLIN       1-000000CC  I*4   IFAC        
  1-00000208  CHAR  A_CROSSSTR         **      R*4   CAPPK3HRAB     5-00000024  I*4   FDCTOUT            **      I*4   IFUN        
  1-000001AC  I*4   A_LEFTLNS          **      R*4   CAPPK3HRBA     1-0000015C  CHAR  FEDFUNC            **      I*4   II          
      **      I*4   A_OPPFUNC      9-00001570  R*4   CAPPKFAC       1-00000154  CHAR  FEDFUNC_AQ     9-00001580  R*4   IMPWTDIST   
  1-0000016C  CHAR  A_PROHIBIT     7-00000008  I*4   CAPYEAR        1-00000100  I*4   FERR           9-0000157C  R*4   IMPWTTIME   
  1-000001A4  I*4   A_RIGHTLNS     1-000000F8  I*4   COUNT1         5-00000010  I*4   FERRMSG            **      R*4   INTDELFR_A  
  1-000001A8  I*4   A_THRULNS      1-000000DC  R*4   COUNT1FAC      5-0000002C  I*4   FGUIDEWAYIN        **      R*4   INTDELFR_B  
  7-0000000C  I*4   BASEYEAR       1-000000D4  CHAR  COUNT1TYPE     5-00000008  I*4   FLOOKUP            **      R*4   INTDELPK_A  
  1-000001CC  I*4   BNODE          1-000000F4  I*4   COUNT1YR       5-00000018  I*4   FMSGOUT            **      R*4   INTDELPK_B  
  1-00000168  CHAR  B_CONTROL      1-000000F0  I*4   COUNT2         5-0000001C  I*4   FNERR              **      I*4   IOPPFUN     
  1-000001F4  CHAR  B_CROSSSTR     1-000000D8  R*4   COUNT2FAC      5-00000004  I*4   FNETIN         1-000000C4  I*4   IPARK       
  1-000001A0  I*4   B_LEFTLNS      1-000000D0  CHAR  COUNT2TYPE     5-0000000C  I*4   FNETOUT        1-000000B8  I*4   IPEDACT     
      **      I*4   B_OPPFUNC      1-000000EC  I*4   COUNT2YR       5-00000030  I*4   FRTNCD         2-000081C0  I*4   IPRGRSS     
  1-00000164  CHAR  B_PROHIBIT     1-000001D8  I*4   COUNTY         1-000001C8  I*4   FUNCL              **      I*4   IPRHB       
  1-00000198  I*4   B_RIGHTLNS     1-0000017C  CHAR  DEVELOPDEN     5-00000014  I*4   FWARNMSG           **      I*4   J           
  1-0000019C  I*4   B_THRULNS      1-000001BC  I*4   DIR                **      R*4   GRNTIME            **      I*4   JJ          
      **      R*4   CAP1HRAB       1-00000178  CHAR  DRIVEWYDEN    12-00001770  I*4   GWCNT              **      I*4   K           
      **      R*4   CAP1HRBA       1-00000428  CHAR  ENDOFREC           **      I*4   I              1-00000174  CHAR  LANDUSE     
      **      R*4   CAPMIDAB       2-000081D4  CHAR  F              1-000000C8  I*4   IAT            1-000000E8  I*4   LANES       
      **      R*4   CAPMIDBA       1-00000188  CHAR  FACTYPE            **      I*4   ICNTRL         1-000001B8  I*4   LANESAB     
  9-00001574  R*4   CAPMIDFAC          **      L*1   FATAL          1-000001DC  I*4   ID             1-000001B4  I*4   LANESBA     

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 109
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

 Address      Type  Name          Address      Type  Name          Address      Type  Name          Address      Type  Name        
                                                                                                                                   
  1-0000018C  R*4   LENGTH         1-00000148  R*4   O_TTPKESTAB        **      L*1   SEVERE             **      R*4   TTLINKPKAB  
      **      R*4   LFAC           1-00000144  R*4   O_TTPKESTBA    7-00000004  I*4   SPDCAP             **      R*4   TTLINKPKBA  
  2-000081BC  I*4   LIN2           1-00000130  R*4   O_TTPKLOCAB    1-000001B0  I*4   SPDLIMIT           **      R*4   TTPEAKAB    
  2-000081B8  I*4   LINAB          1-0000012C  R*4   O_TTPKLOCBA    1-000000E4  I*4   SPDLIMRUN          **      R*4   TTPEAKBA    
  2-000081B4  I*4   LINBA          1-00000120  R*4   O_TTPKNSTAB    0-FFFFFFF8  R*4   SPFREEAB           **      R*4   TTPKASSNAB  
      **      I*4   LNSNDX         1-0000011C  R*4   O_TTPKNSTBA    0-FFFFFFF4  R*4   SPFREEBA           **      R*4   TTPKASSNBA  
  1-000001C4  I*4   LOCCLASS1      1-00000140  R*4   O_TTPKPREVAB       **      R*4   SPFRLINKAB         **      R*4   TTPKESTAB   
  1-000001C0  I*4   LOCCLASS2      1-0000013C  R*4   O_TTPKPREVBA       **      R*4   SPFRLINKBA         **      R*4   TTPKESTBA   
  2-000081DC  I*4   LWARN          1-00000118  R*4   O_TTPKSKSAB    1-000000AC  R*4   SPL                **      R*4   TTPKLOCAB   
  2-000081CC  R*4   MAXALPHA       1-00000114  R*4   O_TTPKSKSBA    0-FFFFFFF0  R*4   SPPEAKAB           **      R*4   TTPKLOCBA   
 10-00000004  I*4   MAXAT          1-00000128  R*4   O_TTPKXPRAB    0-FFFFFFEC  R*4   SPPEAKBA           **      R*4   TTPKNSTAB   
  2-000081C4  R*4   MAXBETA        1-00000124  R*4   O_TTPKXPRBA    1-00000194  I*4   STATE              **      R*4   TTPKNSTBA   
 10-00000008  I*4   MAXFAC         1-00000184  CHAR  PARKING        1-0000021C  CHAR  STRNAME            **      R*4   TTPKPREVAB  
 10-00000000  I*4   MAXFUNCL       1-000000A0  I*4   PCTLINK        1-000001D4  I*4   TAZ                **      R*4   TTPKPREVBA  
  2-000081D0  R*4   MINALPHA       1-00000180  CHAR  PEDACTIVTY         **      R*4   TOTTIME            **      R*4   TTPKSKSAB   
  2-000081C8  R*4   MINBETA            **      R*4   PKLOCLUAB          **      R*4   TTATSPL            **      R*4   TTPKSKSBA   
  9-00001584  R*4   MINSPEED           **      R*4   PKLOCLUBA          **      R*4   TTBIKEAB           **      R*4   TTPKXPRAB   
      **      R*4   NETALPHA           **      R*4   PKXPRLUAB          **      R*4   TTBIKEBA           **      R*4   TTPKXPRBA   
      **      R*4   NETBETA            **      R*4   PKXPRLUBA          **      R*4   TTFREEAB           **      R*4   TTTRAN      
  1-000000B4  I*4   OPPFAC         1-000000FC  I*4   PROJNUM            **      R*4   TTFREEBA           **      R*4   TTWALKAB    
  1-000000B0  I*4   OPPFUN             **      R*4   REDTIME            **      R*4   TTFRLOCAB          **      R*4   TTWALKBA    
      **      I*4   OPPMAX             **      L*1   REPL               **      R*4   TTFRLOCBA      2-000081E4  CHAR  W           
  1-00000150  R*4   O_CAP1AB       2-000081B0  I*4   REPLNUM            **      R*4   TTFRNSTAB          **      I*4   WALKMODE    
  1-0000014C  R*4   O_CAP1BA       1-00000190  I*4   REVLN              **      R*4   TTFRNSTBA      2-000081D8  L*1   WARN        
  1-00000110  R*4   O_PKLOCLUAB    1-00000160  CHAR  REVTIME            **      R*4   TTFRSKSAB          **      R*4   ZVD         
  1-0000010C  R*4   O_PKLOCLUBA        **      R*4   RFAC               **      R*4   TTFRSKSBA      1-000000A8  R*4   ZVD1        
  1-00000108  R*4   O_PKXPRLUAB    7-00000010  L*1   RTNSPD             **      R*4   TTFRXPRAB      1-000000A4  R*4   ZVD2        
  1-00000104  R*4   O_PKXPRLUBA    7-00000000  I*4   RUNYEAR            **      R*4   TTFRXPRBA                                    
  1-00000138  R*4   O_TTPKASSNAB   2-000081E0  CHAR  S                  **      R*4   TTLINKFRAB                                   
  1-00000134  R*4   O_TTPKASSNBA   1-000001E0  CHAR  SECONDNAM          **      R*4   TTLINKFRBA                                   


ARRAYS

 Address      Type  Name              Bytes  Dimensions

  9-00001588  R*4   ALPHA               840  (21, 5, 2)
 10-00000173  CHAR  ATNAME               50  (5)
  9-000018D0  R*4   BETA                840  (21, 5, 2)
  2-00007DF0  R*4   CAP1                240  (10, 6)
  2-00007D00  R*4   CAP2                240  (10, 6)
  2-00007C10  R*4   CAP3                240  (10, 6)
  2-000067D0  R*4   CAPT                504  (21, 6)
  9-00001558  R*4   CAP_CNTL             24  (6)
  9-00001438  R*4   CAP_DEVDN            16  (4)
  9-00001458  R*4   CAP_DRVWY            16  (4)
  9-00001478  R*4   CAP_FACLN           108  (9, 3)
  9-00001404  R*4   CAP_PARK             20  (5)
  9-00001418  R*4   CAP_PED              16  (4)
 10-00000259  CHAR  CNTLNAME             60  (6)
  9-00000348  R*4   CYCLEN              420  (21, 5)
  9-00001514  R*4   DELAY_FAC            36  (9)
  9-00001550  R*4   DELAY_PRG             8  (2)
  9-000014FC  R*4   DELAY_PRHB           24  (6)
  9-00001538  R*4   DELAY_TLNS           24  (6)

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 110
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

 10-000001D7  CHAR  FACNAME              90  (9)
  2-000081E8  I*4   FUNCLRANK            84  (21)
 10-000000A1  CHAR  FUNNAME             210  (21)
 12-00000000  I*4   GDWYID             1200  (300)
 12-000004B0  R*4   GDWYTT             4800  (300, 4)
  9-00000D20  R*4   GRNPCTFR           1764  (21, 21)
 10-00000295  CHAR  HMLNAME              40  (4)
  2-000069C8  R*4   LANEMILES           504  (21, 6)
 10-00000069  CHAR  LEGALCNTL             7  (7)
 10-00000060  CHAR  LEGALFAC              9  (9)
 10-00000070  CHAR  LEGALFFN             28  (14)
 10-0000000C  I*4   LEGALFUN             84  (21)
 10-00000091  CHAR  LEGALHML              4  (4)
 10-00000095  CHAR  LEGALLU               6  (6)
 10-0000009B  CHAR  LEGALPRHB             6  (6)
 10-0000008C  CHAR  LEGALPRK              5  (5)
  2-00006BC0  R*4   LINKMILES           504  (21, 6)
  2-000080C0  R*4   LINKMILES1          240  (10, 6)
  2-00007FD0  R*4   LINKMILES2          240  (10, 6)
  2-00007EE0  R*4   LINKMILES3          240  (10, 6)
  6-0000000A  L*1   LIST                  3  (3)
  9-00000000  R*4   LNCAP1HR            420  (21, 5)
  9-00000690  R*4   LOCTRNSPFR          420  (21, 5)
  9-000009D8  R*4   LOCTRNSPPK          420  (21, 5)
  8-000D4670  L*1   NCNTL            180000  (30000, 6)
  8-0003A980  L*1   NFUN             630000  (30000, 21)
  2-00007580  I*4   NUM1W1              240  (10, 6)
  2-000073A0  I*4   NUM1W2              240  (10, 6)
  2-00007490  I*4   NUM1W3              240  (10, 6)
  2-00006FB0  I*4   NUM1WT              504  (21, 6)
  2-000071A8  I*4   NUMLINKS            504  (21, 6)
 10-000001A5  CHAR  PARKNAME             50  (5)
  9-000004EC  R*4   PKSPFAC             420  (21, 5)
 10-00000231  CHAR  PRHBNAME             40  (4)
  2-00006DB8  R*4   ROADMILES           504  (21, 6)
  9-000001A4  R*4   SPEEDERFAC          420  (21, 5)
  9-00001448  R*4   SPFR_DEVDN           16  (4)
  9-00001468  R*4   SPFR_DRVWY           16  (4)
  9-00001428  R*4   SPFR_PED             16  (4)
  2-00005FF0  R*4   SPLTT               504  (21, 6)
  1-00000230  R*4   T                   504  (21, 6)
 11-00000000  I*4   TAZAT            120000  (30000)
  6-00000000  L*1   TRACE                10  (10)
  2-00007B20  R*4   TTFR1               240  (10, 6)
  2-00007A30  R*4   TTFR2               240  (10, 6)
  2-00007940  R*4   TTFR3               240  (10, 6)
  2-000065D8  R*4   TTFRT               504  (21, 6)
  2-000061E8  R*4   TTLFRT              504  (21, 6)
  2-00005DF8  R*4   TTLPKT              504  (21, 6)
  2-00007850  R*4   TTPK1               240  (10, 6)
  2-00007760  R*4   TTPK2               240  (10, 6)
  2-00007670  R*4   TTPK3               240  (10, 6)
  2-000063E0  R*4   TTPKT               504  (21, 6)
  9-00000834  R*4   XPRTRNSPFR          420  (21, 5)
  9-00000B7C  R*4   XPRTRNSPPK          420  (21, 5)
  8-00000000  I*4   ZBRIN            120000  (30000)
  8-0001D4C0  I*4   ZBROUT           120000  (30000)

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 111
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

  9-000014E4  R*4   ZVD_CNTL             24  (6)


LABELS

 Address      Label  Address      Label  Address      Label  Address      Label  Address      Label  Address      Label
                                                                                                                       
      **      100     4-0000B1C0  145         **      445         **      745         **      935         **      1015 
      **      105     4-0000B23B  150     4-0000CDC3  450     4-0000E83E  750     4-00011DD3  940     4-00013179  1020 
  4-0000A9A1  110     4-0000B2F6  170     4-0000D0B5  500     4-0000EB30  800         **      945         **      1025 
  4-0000A9D0  112         **      210         **      510         **      805     4-00012030  950     4-000133DC  1030 
      **      114     4-0000B707  215     4-0000D1B8  515     4-0000EC89  810         **      955         **      1035 
  4-0000AA20  115         **      220         **      520         **      815     4-0001228D  960     4-0001363F  1040 
      **      118         **      223         **      523     4-0000ED47  820         **      965         **      1042 
  4-0000ABCD  120     4-0000B7DB  225     4-0000D26C  525         **      830     4-000124F8  970     4-000138AA  1043 
  4-0000AEB8  125     4-0000B955  230     4-0000D3D0  530         **      840         **      975         **      1045 
      **      128         **      233         **      533         **      850     4-000127A0  980     4-00013B60  1050 
  4-0000AF8F  130     4-0000BA10  235     4-0000D48B  535         **      860         **      985         **      1055 
      **      133         **      300         **      600         **      870     4-00012A03  990     4-00013E14  1060 
  4-0000B04A  135     4-0000C5D3  400     4-0000E045  700         **      905         **      995         **      1065 
      **      138     4-0000C773  420     4-0000E1EE  720         **      915     4-00012C66  1000                     
  4-0000B105  140     4-0000C87F  430     4-0000E2FA  730         **      925         **      1005                     
      **      143         **      442         **      742     4-00011B33  930     4-00012ED1  1010                     

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 112
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

	   4977 
	   4978       END program


PROGRAM SECTIONS

    Name				 Bytes   Attributes

  1 .bss                                  2852 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  2 .data                                38368 NOPIC CON REL LCL NOSHR NOEXE   RD   WRT QUAD
  3 .literal                              3700   PIC CON REL LCL   SHR NOEXE   RD NOWRT QUAD
  4 .text                                86943   PIC CON REL LCL   SHR   EXE NORD NOWRT QUAD
  5 _FIL                                    52 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  6 _OPT                                    13 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  7 _PARAM                                  17 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  8 _NARRAY                            1050000 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
  9 _LOOKUP                               7192 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
 10 _LEGALVAL                              701 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
 11 _AT                                 120000 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
 12 _GW                                   6004 NOPIC OVR REL GBL NOSHR NOEXE   RD   WRT OCTA
 13 .drectve                               115 NOPIC CON REL LCL NOSHR NOEXE NORD NOWRT QUAD

    Total Space Allocated              1315957


ENTRY POINTS

 Address      Name       
                         
  4-0001406E  MAIN$CAPSPD


VARIABLES

 Address      Type  Name         Address      Type  Name         Address      Type  Name         Address      Type  Name       
                                                                                                                               
  7-0000000C  I*4   BASEYEAR      5-00000000  I*4   FCNTRLIN      5-0000000C  I*4   FNETOUT      10-00000000  I*4   MAXFUNCL   
  9-00001574  R*4   CAPMIDFAC     5-00000024  I*4   FDCTOUT       5-00000030  I*4   FRTNCD        9-00001584  R*4   MINSPEED   
  9-00001578  R*4   CAPNITEFAC    5-00000010  I*4   FERRMSG       5-00000014  I*4   FWARNMSG      1-00000574  I*4   MSGOUT     
  9-00001570  R*4   CAPPKFAC      5-0000002C  I*4   FGUIDEWAYIN  12-00001770  I*4   GWCNT         2-000095D4  I*4   RTN        
  7-00000008  I*4   CAPYEAR       5-00000008  I*4   FLOOKUP       9-00001580  R*4   IMPWTDIST     7-00000010  L*1   RTNSPD     
  2-000095DC  L*1   FATAL         5-00000018  I*4   FMSGOUT       9-0000157C  R*4   IMPWTTIME     7-00000000  I*4   RUNYEAR    
  5-00000028  I*4   FATYPEIN      5-0000001C  I*4   FNERR        10-00000004  I*4   MAXAT         2-000095D8  L*1   SEVERE     
  5-00000020  I*4   FCNTLOUT      5-00000004  I*4   FNETIN       10-00000008  I*4   MAXFAC        7-00000004  I*4   SPDCAP     


ARRAYS

 Address      Type  Name              Bytes  Dimensions

  9-00001588  R*4   ALPHA               840  (21, 5, 2)
 10-00000173  CHAR  ATNAME               50  (5)
  9-000018D0  R*4   BETA                840  (21, 5, 2)
  9-00001558  R*4   CAP_CNTL             24  (6)
  9-00001438  R*4   CAP_DEVDN            16  (4)
  9-00001458  R*4   CAP_DRVWY            16  (4)
  9-00001478  R*4   CAP_FACLN           108  (9, 3)

CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 113
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

  9-00001404  R*4   CAP_PARK             20  (5)
  9-00001418  R*4   CAP_PED              16  (4)
 10-00000259  CHAR  CNTLNAME             60  (6)
  9-00000348  R*4   CYCLEN              420  (21, 5)
  9-00001514  R*4   DELAY_FAC            36  (9)
  9-00001550  R*4   DELAY_PRG             8  (2)
  9-000014FC  R*4   DELAY_PRHB           24  (6)
  9-00001538  R*4   DELAY_TLNS           24  (6)
 10-000001D7  CHAR  FACNAME              90  (9)
 10-000000A1  CHAR  FUNNAME             210  (21)
 12-00000000  I*4   GDWYID             1200  (300)
 12-000004B0  R*4   GDWYTT             4800  (300, 4)
  9-00000D20  R*4   GRNPCTFR           1764  (21, 21)
 10-00000295  CHAR  HMLNAME              40  (4)
 10-00000069  CHAR  LEGALCNTL             7  (7)
 10-00000060  CHAR  LEGALFAC              9  (9)
 10-00000070  CHAR  LEGALFFN             28  (14)
 10-0000000C  I*4   LEGALFUN             84  (21)
 10-00000091  CHAR  LEGALHML              4  (4)
 10-00000095  CHAR  LEGALLU               6  (6)
 10-0000009B  CHAR  LEGALPRHB             6  (6)
 10-0000008C  CHAR  LEGALPRK              5  (5)
  6-0000000A  L*1   LIST                  3  (3)
  9-00000000  R*4   LNCAP1HR            420  (21, 5)
  9-00000690  R*4   LOCTRNSPFR          420  (21, 5)
  9-000009D8  R*4   LOCTRNSPPK          420  (21, 5)
  8-000D4670  L*1   NCNTL            180000  (30000, 6)
  8-0003A980  L*1   NFUN             630000  (30000, 21)
 10-000001A5  CHAR  PARKNAME             50  (5)
  9-000004EC  R*4   PKSPFAC             420  (21, 5)
 10-00000231  CHAR  PRHBNAME             40  (4)
  9-000001A4  R*4   SPEEDERFAC          420  (21, 5)
  9-00001448  R*4   SPFR_DEVDN           16  (4)
  9-00001468  R*4   SPFR_DRVWY           16  (4)
  9-00001428  R*4   SPFR_PED             16  (4)
 11-00000000  I*4   TAZAT            120000  (30000)
  6-00000000  L*1   TRACE                10  (10)
  9-00000834  R*4   XPRTRNSPFR          420  (21, 5)
  9-00000B7C  R*4   XPRTRNSPPK          420  (21, 5)
  8-00000000  I*4   ZBRIN            120000  (30000)
  8-0001D4C0  I*4   ZBROUT           120000  (30000)
  9-000014E4  R*4   ZVD_CNTL             24  (6)


LABELS

 Address      Label  Address      Label  Address      Label  Address      Label
                                                                               
      **      900         **      920         **      980         **      990  



CAPSPD                          Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 114
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

FUNCTIONS AND SUBROUTINES REFERENCED

  Type  Name             Type  Name             Type  Name             Type  Name          
                                                                                           
         ZBR                    EMSG_C                 EMSG_C2                LOOKUPIN     
         CAPSPD                 EMSG_I                 CNTRLIN                AREATYPE     
         CHECKN                 EMSG_R                 NETPASS1               GUIDEWAY     

CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 115
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

COMPILER OPTIONS BEING USED

  /noalign:commons                      /noalign:dcommons
  /align:records                        /noalign:sequence
  /noalign:rec1byte                     /noalign:rec2byte
  /noalign:rec4byte                     /noalign:rec8byte
  /altparam                             /noannotations:code
  /noannotations:detail                 /noannotations:feedback
  /noannotations:inlining               /noannotations:loop_transforms
  /noannotations:loop_unrolling         /noannotations:prefetching
  /noannotations:shrinkwrapping         /noannotations:software_pipelining
  /noannotations:tail_calls             /noannotations:tail_recursion
  /arch:generic                         /noasmattributes:machine
  /noasmattributes:source               /assume:accuracy_sensitive
  /noassume:buffered_io                 /noassume:byterecl
  /noassume:dummy_aliases               /noassume:minus0
  /assume:protect_constants             /assume:source_include
  /noassume:underscore                  /noassume:2underscores
  /noautomatic                          /nobintext
  /ccdefault:default                    /nocheck:arg_temp_created
  /nocheck:bounds                       /check:flawed_pentium
  /nocheck:format                       /nocheck:output_conversion
  /nocheck:overflow                     /nocheck:power
  /nocheck:underflow                    /convert:native
  /D:_WIN32=1                           /D:_DF_VER=660
  /D:_VF_VER=660                        /D:_X86_=1
  /D:_M_IX86=500                        /D:_INTEGRAL_MAX_BITS=32
  /double_size:64                       /nod_lines
  /error_limit:30                       /extend_source:72
  /nof66                                /nof77rtl
  /nofast                               /nofltconsist
  /fpscomp:filesfromcmd                 /nofpscomp:general
  /nofpscomp:ioformat                   /nofpscomp:ldio_spacing
  /fpscomp:libs                         /nofpscomp:logicals
  /nofpconstant                         /fpe3
  /free                                 /g1
  /Gt0                                  /iface:stdref
  /nointconstant                        /integer_size:32
  /libdir:automatic                     /libdir:user
  /nolibs_dll                           /nomachine_code
  /math_library:check                   /mixed_str_len_arg
  /nomodule                             /names:uppercase
  /nonoinclude                          /O4
  /inline:speed                         /notransform_loops
  /nopipeline                           /tune:generic
  /unroll:0                             /nopad_source
  /real_size:32                         /norecursive
  /reentrancy:none                      /noshow:include
  /show:map                             /stand:none
  /nosyntax_only                        /notraceback
  /novms                                /warn:alignments
  /nowarn:argument_checking             /nowarn:declarations
  /nowarn:errors                        /warn:general
  /nowarn:granularity                   /nowarn:ignore_loc
  /nowarn:stderrors                     /nowarn:truncated_source
  /warn:uncalled                        /warn:uninitialized
  /nowarn:unused                        /warn:usage

CNTRLIN                         Source Listing                   9-Dec-2011 10:07:52  Compaq Visual Fortran 6.6-1877    Page 116
                                                                 9-Dec-2011 10:07:43  source\capspd.F90

  /I         path : source\,C:\Program Files\Microsoft Visual Studio\DF98\INCLUDE\,C:\Program Files\Microsoft Visual Studio\VC98\...
  /V         filename : capspd.lst
  /o         filename : C:\DOCUME~1\JWMCLE~1\LOCALS~1\Temp\objE8.tmp
  /nobrowser
  /Fd        filename : none

COMPILER: Compaq Visual Fortran 6.6-1877-47BAQ

COMPILATION STATISTICS

  CPU time:          4.70 seconds
  Elapsed time:      4.71 seconds
  Pagefaults:           0
  I/O Count:            0
